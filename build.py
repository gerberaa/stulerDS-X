#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó –ø—Ä–æ–µ–∫—Ç—É –≤ –æ–¥–∏–Ω –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª
–ü—ñ–¥—Ç—Ä–∏–º—É—î Windows —Ç–∞ Linux
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path

def check_pyinstaller():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π PyInstaller"""
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: –≤–µ—Ä—Å—ñ—è {PyInstaller.__version__}")
        return True
    except ImportError:
        print("‚ùå PyInstaller –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")
        return False

def install_pyinstaller():
    """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ PyInstaller"""
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PyInstaller...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è PyInstaller")
        return False

def create_spec_file():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ .spec —Ñ–∞–π–ª –¥–ª—è PyInstaller"""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

# –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö Python —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
a = Analysis(
    ['bot.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('data.json', '.'),
        ('projects.json', '.'),
        ('browser_profile', 'browser_profile'),
        ('*.md', '.'),
    ],
    hiddenimports=[
        'telegram',
        'telegram.ext',
        'telegram.ext.filters',
        'aiohttp',
        'requests',
        'selenium',
        'selenium.webdriver',
        'selenium.webdriver.chrome',
        'selenium.webdriver.chrome.service',
        'selenium.webdriver.chrome.options',
        'selenium.webdriver.common.by',
        'selenium.webdriver.support.ui',
        'selenium.webdriver.support.wait',
        'selenium.webdriver.support.expected_conditions',
        'selenium.common.exceptions',
        'dotenv',
        'asyncio',
        'threading',
        'logging',
        'datetime',
        'json',
        'os',
        'sys',
        'pathlib',
        'typing',
        'security_manager',
        'project_manager',
        'discord_monitor',
        'twitter_monitor',
        'selenium_twitter_monitor',
        'config',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='telegram_monitor_bot',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)
'''
    
    with open('telegram_monitor_bot.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ñ–∞–π–ª telegram_monitor_bot.spec")

def build_executable():
    """–°–∫–æ–º–ø—ñ–ª—é–≤–∞—Ç–∏ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª"""
    print("üî® –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω—É–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É...")
    
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .spec —Ñ–∞–π–ª –¥–ª—è –±—ñ–ª—å—à —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—é
        subprocess.check_call([
            sys.executable, "-m", "PyInstaller", 
            "--clean", 
            "telegram_monitor_bot.spec"
        ])
        
        print("‚úÖ –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó: {e}")
        return False

def create_distribution():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É –∑ –≥–æ—Ç–æ–≤–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º"""
    print("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è...")
    
    dist_dir = Path("dist_package")
    if dist_dir.exists():
        shutil.rmtree(dist_dir)
    
    dist_dir.mkdir()
    
    # –ö–æ–ø—ñ—é—î–º–æ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª
    exe_name = "telegram_monitor_bot.exe" if platform.system() == "Windows" else "telegram_monitor_bot"
    exe_path = Path("dist") / exe_name
    
    if exe_path.exists():
        shutil.copy2(exe_path, dist_dir / exe_name)
        print(f"‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª: {exe_name}")
    else:
        print(f"‚ùå –í–∏–∫–æ–Ω—É–≤–∞–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {exe_path}")
        return False
    
    # –ö–æ–ø—ñ—é—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏
    files_to_copy = [
        "data.json",
        "projects.json", 
        "browser_profile",
        "README.md",
        "ACCOUNT_MANAGER_GUIDE.md",
        "SELENIUM_TWITTER_GUIDE.md",
        "TWITTER_IMPROVEMENTS_SUMMARY.md"
    ]
    
    for file_name in files_to_copy:
        src_path = Path(file_name)
        if src_path.exists():
            if src_path.is_file():
                shutil.copy2(src_path, dist_dir / file_name)
            else:
                shutil.copytree(src_path, dist_dir / file_name)
            print(f"‚úÖ –°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: {file_name}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ .env.example
    env_example = """# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –±–æ—Ç–∞
BOT_TOKEN=your_bot_token_here
ADMIN_PASSWORD=401483

# Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
AUTHORIZATION=your_discord_authorization_token

# Twitter/X –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
TWITTER_AUTH_TOKEN=your_twitter_auth_token
TWITTER_CSRF_TOKEN=your_twitter_csrf_token
"""
    
    with open(dist_dir / ".env.example", 'w', encoding='utf-8') as f:
        f.write(env_example)
    
    print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ .env.example")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫—É
    if platform.system() == "Windows":
        run_script = f"""@echo off
echo –ó–∞–ø—É—Å–∫ Telegram Monitor Bot...
echo.

REM –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª .env
if not exist .env (
    echo –ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!
    echo –°–∫–æ–ø—ñ—é–π—Ç–µ .env.example –≤ .env —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    pause
    exit /b 1
)

echo –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...
{exe_name}

pause
"""
        with open(dist_dir / "run.bat", 'w', encoding='utf-8') as f:
            f.write(run_script)
    else:
        run_script = f"""#!/bin/bash
echo "–ó–∞–ø—É—Å–∫ Telegram Monitor Bot..."
echo ""

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª .env
if [ ! -f .env ]; then
    echo "–ü–æ–º–∏–ª–∫–∞: –§–∞–π–ª .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"
    echo "–°–∫–æ–ø—ñ—é–π—Ç–µ .env.example –≤ .env —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏"
    exit 1
fi

echo "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞..."
./{exe_name}
"""
        with open(dist_dir / "run.sh", 'w', encoding='utf-8') as f:
            f.write(run_script)
        os.chmod(dist_dir / "run.sh", 0o755)
    
    print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫—É")
    
    return True

def create_readme():
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ README –¥–ª—è —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è"""
    readme_content = """# Telegram Monitor Bot - –ì–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É

## –û–ø–∏—Å
–¶–µ –≥–æ—Ç–æ–≤–∏–π –¥–æ –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Discord –∫–∞–Ω–∞–ª—ñ–≤ —Ç–∞ Twitter/X –∞–∫–∞—É–Ω—Ç—ñ–≤.

## –®–≤–∏–¥–∫–∏–π —Å—Ç–∞—Ä—Ç

### Windows
1. –°–∫–æ–ø—ñ—é–π—Ç–µ `.env.example` –≤ `.env`
2. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ `.env` —Ñ–∞–π–ª—ñ
3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å `run.bat`

### Linux
1. –°–∫–æ–ø—ñ—é–π—Ç–µ `.env.example` –≤ `.env`
2. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ `.env` —Ñ–∞–π–ª—ñ
3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å `./run.sh`

## –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É

### –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
- `BOT_TOKEN` - —Ç–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ Telegram –±–æ—Ç–∞ (–æ—Ç—Ä–∏–º–∞–π—Ç–µ —É @BotFather)
- `ADMIN_PASSWORD` - –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –±–æ—Ç–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 401483)

### –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏:
- `AUTHORIZATION` - Discord authorization —Ç–æ–∫–µ–Ω –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Discord
- `TWITTER_AUTH_TOKEN` - Twitter auth_token –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter/X
- `TWITTER_CSRF_TOKEN` - Twitter csrf_token –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter/X

## –§—É–Ω–∫—Ü—ñ—ó –±–æ—Ç–∞
- –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Discord –∫–∞–Ω–∞–ª—ñ–≤
- –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Twitter/X –∞–∫–∞—É–Ω—Ç—ñ–≤
- –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ Telegram
- –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
- –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏

## –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç—É
–ü—Ä–æ–µ–∫—Ç –∑–±–µ—Ä—ñ–≥–∞—î –≤—Å—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä—É:
- `data.json` - –±–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
- `projects.json` - –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø—Ä–æ–µ–∫—Ç—ñ–≤
- `browser_profile/` - –ø—Ä–æ—Ñ—ñ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è Selenium
- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –≤ .md —Ñ–∞–π–ª–∞—Ö

## –ü—ñ–¥—Ç—Ä–∏–º–∫–∞
–ü—Ä–∏ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—ñ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ:
1. –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤ .env —Ñ–∞–π–ª—ñ
2. –ù–∞—è–≤–Ω—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è
3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ–∞–π–ª—ñ–≤

## –í–µ—Ä—Å—ñ—è
–í–µ—Ä—Å—ñ—è: 1.0
–î–∞—Ç–∞ –∑–±—ñ—Ä–∫–∏: {date}
–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}
""".format(
        date=subprocess.check_output(['date'], shell=True).decode().strip() if platform.system() != "Windows" else "Windows",
        platform=platform.system()
    )
    
    with open("dist_package/README.md", 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ README.md")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó Telegram Monitor Bot")
    print("=" * 50)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ PyInstaller
    if not check_pyinstaller():
        if not install_pyinstaller():
            print("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ PyInstaller. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
            return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ .spec —Ñ–∞–π–ª
    create_spec_file()
    
    # –ö–æ–º–ø—ñ–ª—é—î–º–æ
    if not build_executable():
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–º–ø—ñ–ª—è—Ü—ñ—ó. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è
    if not create_distribution():
        print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ —Ä–æ–∑–ø–æ–≤—Å—é–¥–∂–µ–Ω–Ω—è. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è.")
        return False
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ README
    create_readme()
    
    print("\n" + "=" * 50)
    print("üéâ –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
    print(f"üìÅ –ì–æ—Ç–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø–∞–ø—Ü—ñ: dist_package/")
    print(f"üíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}")
    print("=" * 50)
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)