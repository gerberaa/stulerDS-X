import asyncio
from datetime import datetime, timedelta
from typing import Dict, Set
import logging

class SecurityManager:
    def __init__(self, timeout_seconds: int = 300):
        self.timeout_seconds = timeout_seconds
        self.user_sessions: Dict[int, datetime] = {}
        self.authorized_users: Set[int] = set()
        self.logger = logging.getLogger(__name__)
        
    def authorize_user(self, user_id: int) -> None:
        """–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        self.authorized_users.add(user_id)
        self.user_sessions[user_id] = datetime.now()
        self.logger.info(f"User {user_id} authorized")
        
    def is_user_authorized(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á"""
        if user_id not in self.authorized_users:
            return False
            
        if user_id not in self.user_sessions:
            self.authorized_users.discard(user_id)
            return False
            
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è —Å–µ—Å—ñ—è
        session_time = self.user_sessions[user_id]
        if datetime.now() - session_time > timedelta(seconds=self.timeout_seconds):
            self.deauthorize_user(user_id)
            return False
            
        return True
        
    def deauthorize_user(self, user_id: int) -> None:
        """–î–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        self.authorized_users.discard(user_id)
        self.user_sessions.pop(user_id, None)
        self.logger.info(f"User {user_id} deauthorized")
        
    def update_user_activity(self, user_id: int) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if user_id in self.authorized_users:
            self.user_sessions[user_id] = datetime.now()
            
    def get_session_time_left(self, user_id: int) -> int:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å —â–æ –∑–∞–ª–∏—à–∏–≤—Å—è –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó"""
        if user_id not in self.user_sessions:
            return 0
            
        session_time = self.user_sessions[user_id]
        time_left = self.timeout_seconds - (datetime.now() - session_time).total_seconds()
        return max(0, int(time_left))
        
    def check_expired_sessions(self, bot):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω—ñ —Å–µ—Å—ñ—ó (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
        expired_users = []
        
        for user_id in list(self.authorized_users):
            if not self.is_user_authorized(user_id):
                expired_users.append(user_id)
                
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
        for user_id in expired_users:
            try:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ requests
                import requests
                from config import BOT_TOKEN
                
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    'chat_id': user_id,
                    'text': "üîí –í–∞—à–∞ —Å–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∑–Ω–æ–≤—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏."
                }
                response = requests.post(url, data=data, timeout=10)
                
                if response.status_code != 200:
                    self.logger.error(f"Failed to send session expired message to {user_id}: {response.status_code}")
                    
            except Exception as e:
                self.logger.error(f"Failed to send session expired message to {user_id}: {e}")