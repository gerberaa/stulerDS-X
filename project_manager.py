import json
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

class ProjectManager:
    def __init__(self, data_file: str = "data.json"):
        self.data_file = data_file
        self.data: Dict[str, Any] = {
            'projects': {},  # user_id -> projects
            'users': {},    # user_id -> user_data
            'settings': {}, # global settings
            'metadata': {
                'version': '1.0',
                'created_at': datetime.now().isoformat(),
                'last_updated': datetime.now().isoformat()
            }
        }
        self.logger = logging.getLogger(__name__)
        self._last_save = datetime.now()
        self._save_interval = 30  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
        self.load_data()
        
    def load_data(self) -> None:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É"""
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    loaded_data = json.load(f)
                    
                # –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑—ñ —Å—Ç–∞—Ä–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ (projects.json)
                if 'projects' not in loaded_data and isinstance(loaded_data, dict):
                    # –°—Ç–∞—Ä–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - –≤–µ—Å—å —Ñ–∞–π–ª —Ü–µ –ø—Ä–æ–µ–∫—Ç–∏
                    self.data['projects'] = loaded_data
                    self.logger.info("–ú—ñ–≥—Ä–∞—Ü—ñ—è –∑—ñ —Å—Ç–∞—Ä–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö")
                else:
                    # –ù–æ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
                    self.data.update(loaded_data)
                    
                self.logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–∞–Ω—ñ: {len(self.data['projects'])} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏")
            else:
                self.logger.info("–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ñ–∞–π–ª –¥–∞–Ω–∏—Ö")
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            
    def save_data(self, force: bool = False) -> None:
        """–ó–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ –≤ —Ñ–∞–π–ª (–∑ –∫–µ—à—É–≤–∞–Ω–Ω—è–º)"""
        try:
            now = datetime.now()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø—Ä–æ–π—à–ª–æ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —á–∞—Å—É –∞–±–æ –ø—Ä–∏–º—É—Å–æ–≤–æ
            if not force and (now - self._last_save).seconds < self._save_interval:
                return
                
            self.data['metadata']['last_updated'] = now.isoformat()
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            self._last_save = now
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: {e}")
            
    def add_project(self, user_id: int, project_data: Dict) -> bool:
        """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç"""
        try:
            user_id_str = str(user_id)
            if user_id_str not in self.data['projects']:
                self.data['projects'][user_id_str] = []
                
            # –î–æ–¥–∞—î–º–æ ID –ø—Ä–æ–µ–∫—Ç—É —Ç–∞ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
            project_data['id'] = len(self.data['projects'][user_id_str]) + 1
            project_data['created_at'] = datetime.now().isoformat()
            
            self.data['projects'][user_id_str].append(project_data)
            self.save_data()
            self.logger.info(f"–î–æ–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {project_data['name']}")
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É: {e}")
            return False
            
    def get_user_projects(self, user_id: int) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return self.data['projects'].get(str(user_id), [])
        
    def delete_project(self, user_id: int, project_id: int) -> bool:
        """–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç"""
        try:
            user_id_str = str(user_id)
            if user_id_str in self.data['projects']:
                projects = self.data['projects'][user_id_str]
                for i, project in enumerate(projects):
                    if project['id'] == project_id:
                        del projects[i]
                        self.save_data()
                        self.logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç {project_id} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
                        return True
            return False
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É: {e}")
            return False
            
    def get_project_by_id(self, user_id: int, project_id: int) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç –∑–∞ ID"""
        projects = self.get_user_projects(user_id)
        for project in projects:
            if project['id'] == project_id:
                return project
        return None
        
    def format_projects_list(self, user_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        projects = self.get_user_projects(user_id)
        if not projects:
            return "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."
            
        result = "üìã –í–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:\n\n"
        for project in projects:
            platform_emoji = "üê¶" if project['platform'] == 'twitter' else "üí¨"
            result += f"{platform_emoji} **{project['name']}**\n"
            result += f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {project['platform'].title()}\n"
            result += f"   –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {project['url']}\n"
            result += f"   –°—Ç–≤–æ—Ä–µ–Ω–æ: {project['created_at'][:10]}\n\n"
            
        return result
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    def add_user(self, user_id: int, user_data: Dict) -> bool:
        """–î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user_id_str = str(user_id)
            self.data['users'][user_id_str] = {
                'id': user_id,
                'first_name': user_data.get('first_name', ''),
                'username': user_data.get('username', ''),
                'created_at': datetime.now().isoformat(),
                'last_seen': datetime.now().isoformat()
            }
            self.save_data()
            self.logger.info(f"–î–æ–¥–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            return False
    
    def update_user_last_seen(self, user_id: int) -> None:
        """–û–Ω–æ–≤–∏—Ç–∏ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—ñ–∑–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            user_id_str = str(user_id)
            if user_id_str in self.data['users']:
                self.data['users'][user_id_str]['last_seen'] = datetime.now().isoformat()
                self.save_data()
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    
    def get_user_data(self, user_id: int) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        return self.data['users'].get(str(user_id))
    
    def get_all_users(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        return self.data['users']
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    def set_setting(self, key: str, value: Any) -> bool:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        try:
            self.data['settings'][key] = value
            self.save_data()
            self.logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è {key}")
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {e}")
            return False
    
    def get_setting(self, key: str, default: Any = None) -> Any:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        return self.data['settings'].get(key, default)
    
    def get_all_settings(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        return self.data['settings']
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
    def set_forward_channel(self, user_id: int, channel_id: str) -> bool:
        """–í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        try:
            user_id_str = str(user_id)
            if 'forward_settings' not in self.data['settings']:
                self.data['settings']['forward_settings'] = {}
            
            self.data['settings']['forward_settings'][user_id_str] = {
                'channel_id': channel_id,
                'enabled': True,
                'created_at': datetime.now().isoformat()
            }
            self.save_data()
            self.logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {channel_id}")
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {e}")
            return False
    
    def get_forward_channel(self, user_id: int) -> Optional[str]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        user_id_str = str(user_id)
        forward_settings = self.data['settings'].get('forward_settings', {})
        user_settings = forward_settings.get(user_id_str, {})
        
        if user_settings.get('enabled', False):
            return user_settings.get('channel_id')
        return None
    
    def enable_forward(self, user_id: int) -> bool:
        """–£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        try:
            user_id_str = str(user_id)
            if 'forward_settings' not in self.data['settings']:
                self.data['settings']['forward_settings'] = {}
            
            if user_id_str not in self.data['settings']['forward_settings']:
                self.data['settings']['forward_settings'][user_id_str] = {}
            
            self.data['settings']['forward_settings'][user_id_str]['enabled'] = True
            self.save_data()
            self.logger.info(f"–£–≤—ñ–º–∫–Ω–µ–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {e}")
            return False
    
    def disable_forward(self, user_id: int) -> bool:
        """–í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        try:
            user_id_str = str(user_id)
            if 'forward_settings' not in self.data['settings']:
                self.data['settings']['forward_settings'] = {}
            
            if user_id_str not in self.data['settings']['forward_settings']:
                self.data['settings']['forward_settings'][user_id_str] = {}
            
            self.data['settings']['forward_settings'][user_id_str]['enabled'] = False
            self.save_data()
            self.logger.info(f"–í–∏–º–∫–Ω–µ–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è: {e}")
            return False
    
    def get_forward_status(self, user_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
        user_id_str = str(user_id)
        forward_settings = self.data['settings'].get('forward_settings', {})
        user_settings = forward_settings.get(user_id_str, {})
        
        return {
            'enabled': user_settings.get('enabled', False),
            'channel_id': user_settings.get('channel_id', ''),
            'created_at': user_settings.get('created_at', '')
        }
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    def add_sent_message(self, message_id: str, channel_id: str, user_id: int) -> bool:
        """–î–æ–¥–∞—Ç–∏ ID –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)"""
        try:
            if 'sent_messages' not in self.data['settings']:
                self.data['settings']['sent_messages'] = {}
            
            user_id_str = str(user_id)
            if user_id_str not in self.data['settings']['sent_messages']:
                self.data['settings']['sent_messages'][user_id_str] = {}
            
            if channel_id not in self.data['settings']['sent_messages'][user_id_str]:
                self.data['settings']['sent_messages'][user_id_str][channel_id] = []
            
            # –î–æ–¥–∞—î–º–æ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Å–æ–º
            self.data['settings']['sent_messages'][user_id_str][channel_id].append({
                'message_id': message_id,
                'timestamp': datetime.now().isoformat()
            })
            
            # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–æ—Å—Ç–∞–Ω–Ω—ñ 500 –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ)
            if len(self.data['settings']['sent_messages'][user_id_str][channel_id]) > 500:
                self.data['settings']['sent_messages'][user_id_str][channel_id] = \
                    self.data['settings']['sent_messages'][user_id_str][channel_id][-500:]
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
            self.save_data()
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return False
    
    def is_message_sent(self, message_id: str, channel_id: str, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"""
        try:
            user_id_str = str(user_id)
            sent_messages = self.data['settings'].get('sent_messages', {})
            user_messages = sent_messages.get(user_id_str, {})
            channel_messages = user_messages.get(channel_id, [])
            
            for msg in channel_messages:
                if msg['message_id'] == message_id:
                    return True
            return False
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            return False
    
    def cleanup_old_messages(self, hours: int = 24) -> None:
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å—Ç–∞—Ä—à—ñ –∑–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω)"""
        try:
            cutoff_time = datetime.now() - timedelta(hours=hours)
            
            if 'sent_messages' not in self.data['settings']:
                return
            
            for user_id_str in self.data['settings']['sent_messages']:
                for channel_id in self.data['settings']['sent_messages'][user_id_str]:
                    messages = self.data['settings']['sent_messages'][user_id_str][channel_id]
                    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–æ–≤—ñ—à—ñ –∑–∞ cutoff_time
                    self.data['settings']['sent_messages'][user_id_str][channel_id] = [
                        msg for msg in messages 
                        if datetime.fromisoformat(msg['timestamp']) > cutoff_time
                    ]
            
            self.save_data()
            self.logger.info(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å—Ç–∞—Ä—à—ñ –∑–∞ {hours} –≥–æ–¥–∏–Ω)")
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")
    
    # –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def get_statistics(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_users = len(self.data['users'])
        total_projects = sum(len(projects) for projects in self.data['projects'].values())
        
        discord_projects = 0
        twitter_projects = 0
        
        for projects in self.data['projects'].values():
            for project in projects:
                if project.get('platform') == 'discord':
                    discord_projects += 1
                elif project.get('platform') == 'twitter':
                    twitter_projects += 1
        
        return {
            'total_users': total_users,
            'total_projects': total_projects,
            'discord_projects': discord_projects,
            'twitter_projects': twitter_projects,
            'data_file_size': os.path.getsize(self.data_file) if os.path.exists(self.data_file) else 0,
            'last_updated': self.data['metadata']['last_updated']
        }
    
    def export_data(self, export_file: str = None) -> str:
        """–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ"""
        if not export_file:
            export_file = f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        try:
            with open(export_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, ensure_ascii=False, indent=2)
            self.logger.info(f"–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤ {export_file}")
            return export_file
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É: {e}")
            return ""
    
    def import_data(self, import_file: str) -> bool:
        """–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ"""
        try:
            with open(import_file, 'r', encoding='utf-8') as f:
                imported_data = json.load(f)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—É –∫–æ–ø—ñ—é
            backup_file = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            self.export_data(backup_file)
            
            # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ
            self.data.update(imported_data)
            self.save_data()
            
            self.logger.info(f"–î–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ {import_file}")
            return True
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: {e}")
            return False