import asyncio
import aiohttp
import logging
from datetime import datetime
from typing import Dict, List, Optional, Set
import json
import re

class DiscordMonitor:
    def __init__(self, authorization_token: str):
        self.authorization = authorization_token
        self.session: Optional[aiohttp.ClientSession] = None
        self.logger = logging.getLogger(__name__)
        self.last_message_ids: Dict[str, str] = {}  # channel_id -> last_message_id
        self.monitoring_channels: Set[str] = set()
        
    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession(
            headers={
                'Authorization': self.authorization,
                'User-Agent': 'DiscordBot (https://github.com/discord/discord-api-docs, 1.0)',
                'Content-Type': 'application/json',
                'X-RateLimit-Precision': 'millisecond'
            },
            timeout=aiohttp.ClientTimeout(total=10)
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()
            
    def add_channel(self, channel_url: str) -> bool:
        """–î–æ–¥–∞—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        try:
            # –ü–∞—Ä—Å–∏–º–æ URL Discord –∫–∞–Ω–∞–ª—É
            # –§–æ—Ä–º–∞—Ç: https://discord.com/channels/server_id/channel_id
            match = re.search(r'discord\.com/channels/(\d+)/(\d+)', channel_url)
            if not match:
                self.logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç URL Discord: {channel_url}")
                return False
                
            server_id, channel_id = match.groups()
            self.monitoring_channels.add(channel_id)
            self.logger.info(f"–î–æ–¥–∞–Ω–æ –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {channel_id}")
            return True
            
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É: {e}")
            return False
            
    def remove_channel(self, channel_id: str) -> None:
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        self.monitoring_channels.discard(channel_id)
        self.last_message_ids.pop(channel_id, None)
        self.logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –∫–∞–Ω–∞–ª –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {channel_id}")
        
    async def get_channel_messages(self, channel_id: str, limit: int = 5) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É (–±–µ–∑–ø–µ—á–Ω–æ)"""
        if not self.session:
            return []
            
        try:
            url = f"https://discord.com/api/v9/channels/{channel_id}/messages?limit={limit}"
            async with self.session.get(url) as response:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ rate limit
                if response.status == 429:
                    retry_after = float(response.headers.get('Retry-After', 1))
                    self.logger.warning(f"Rate limited, —á–µ–∫–∞—î–º–æ {retry_after} —Å–µ–∫—É–Ω–¥")
                    await asyncio.sleep(retry_after)
                    return await self.get_channel_messages(channel_id, limit)
                
                if response.status == 200:
                    messages = await response.json()
                    return messages
                elif response.status == 401:
                    self.logger.error("Unauthorized: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π authorization —Ç–æ–∫–µ–Ω")
                elif response.status == 403:
                    self.logger.error("Forbidden: –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É")
                else:
                    self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {response.status}")
                return []
                
        except Exception as e:
            self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Discord API: {e}")
            return []
            
    async def check_new_messages(self) -> List[Dict]:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª–∞—Ö (–≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ)"""
        new_messages = []
        
        for i, channel_id in enumerate(self.monitoring_channels):
            try:
                # –î–æ–¥–∞—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –¥–æ —Ä—ñ–∑–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤
                if i > 0:
                    await asyncio.sleep(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ –º—ñ–∂ –∫–∞–Ω–∞–ª–∞–º–∏
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                messages = await self.get_channel_messages(channel_id, limit=5)
                if not messages:
                    continue
                    
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                last_id = self.last_message_ids.get(channel_id)
                
                # –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ –±–∞–∑–æ–≤–µ
                if last_id is None:
                    self.last_message_ids[channel_id] = messages[0]['id']
                    continue
                
                # –®—É–∫–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤—ñ–¥ –Ω–∞–π–Ω–æ–≤—ñ—à–∏—Ö –¥–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏—Ö)
                found_new = False
                for message in messages:
                    message_id = message['id']
                    
                    # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –æ—Å—Ç–∞–Ω–Ω—î –≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
                    if message_id == last_id:
                        break
                        
                    # –¶–µ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    found_new = True
                    new_messages.append({
                        'channel_id': channel_id,
                        'message_id': message_id,
                        'content': message.get('content', ''),
                        'author': message.get('author', {}).get('username', 'Unknown'),
                        'timestamp': message.get('timestamp', ''),
                        'url': f"https://discord.com/channels/{message.get('guild_id', '')}/{channel_id}/{message_id}"
                    })
                
                # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è
                if found_new:
                    self.logger.info(f"–ö–∞–Ω–∞–ª {channel_id}: –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—Å—Ç–∞–Ω–Ω—î –≤—ñ–¥–æ–º–µ: {last_id}")
                    
                # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –Ω–∞–π–Ω–æ–≤—ñ—à–µ
                if messages:
                    self.last_message_ids[channel_id] = messages[0]['id']
                    
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–∞–Ω–∞–ª—É {channel_id}: {e}")
                
        return new_messages
        
    async def start_monitoring(self, callback_func, interval: int = 15):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑ callback —Ñ—É–Ω–∫—Ü—ñ—î—é (–±–µ–∑–ø–µ—á–Ω–æ)"""
        while True:
            try:
                new_messages = await self.check_new_messages()
                
                if new_messages:
                    # –õ–æ–≥—É—î–º–æ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    self.logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(new_messages)} –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
                    if asyncio.iscoroutinefunction(callback_func):
                        await callback_func(new_messages)
                    else:
                        callback_func(new_messages)
                    
                # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑–∞—Ç—Ä–∏–º–∫—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                import random
                random_delay = random.uniform(0.5, 2.0)
                await asyncio.sleep(interval + random_delay)
                
            except Exception as e:
                self.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                # –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ —á–µ–∫–∞—î–º–æ –¥–æ–≤—à–µ
                await asyncio.sleep(interval * 2)
                
    def get_monitoring_status(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        return {
            'channels_count': len(self.monitoring_channels),
            'channels': list(self.monitoring_channels),
            'last_checks': dict(self.last_message_ids)
        }
        
    def format_message_notification(self, message: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è"""
        content = message['content'][:200] + "..." if len(message['content']) > 200 else message['content']
        
        # –ï–∫—Ä–∞–Ω—É—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è Markdown
        content = content.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[')
        author = message['author'].replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
        
        return (
            f"üí¨ *–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Discord*\n\n"
            f"üë§ –ê–≤—Ç–æ—Ä: {author}\n"
            f"üìù –¢–µ–∫—Å—Ç: {content}\n"
            f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]({message['url']})"
        )