import logging
import asyncio
import threading
from datetime import datetime
from typing import List, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, JobQueue
from security_manager import SecurityManager
from project_manager import ProjectManager
from discord_monitor import DiscordMonitor
from twitter_monitor import TwitterMonitor
from selenium_twitter_monitor import SeleniumTwitterMonitor
from config import BOT_TOKEN, ADMIN_PASSWORD, SECURITY_TIMEOUT, MESSAGES, DISCORD_AUTHORIZATION, MONITORING_INTERVAL, TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN, TWITTER_MONITORING_INTERVAL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è - —Ç—ñ–ª—å–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
security_manager = SecurityManager(SECURITY_TIMEOUT)
project_manager = ProjectManager()
discord_monitor = DiscordMonitor(DISCORD_AUTHORIZATION) if DISCORD_AUTHORIZATION else None
twitter_monitor = TwitterMonitor(TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN) if TWITTER_AUTH_TOKEN else None
selenium_twitter_monitor = None  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–æ—á—ñ–∫—É—é—Ç—å –ø–∞—Ä–æ–ª—å)
waiting_for_password = {}

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤
user_states = {}  # user_id -> {'state': 'adding_project', 'data': {...}}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
bot_instance = None

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç", callback_data="add_project")],
        [InlineKeyboardButton("üìã –ú–æ—ó –ø—Ä–æ–µ–∫—Ç–∏", callback_data="my_projects")],
        [InlineKeyboardButton("üîß –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤", callback_data="account_manager")],
        [InlineKeyboardButton("üìú –Ü—Å—Ç–æ—Ä—ñ—è Discord", callback_data="discord_history")],
        [InlineKeyboardButton("üê¶ Selenium Twitter", callback_data="selenium_twitter")],
        [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="forward_settings")],
        [InlineKeyboardButton("üîß –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diagnostics")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")],
        [InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_platform_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üê¶ Twitter/X", callback_data="platform_twitter")],
        [InlineKeyboardButton("üí¨ Discord", callback_data="platform_discord")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_history_count_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    keyboard = [
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 5", callback_data="history_5")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 10", callback_data="history_10")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 20", callback_data="history_20")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 50", callback_data="history_50")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_discord_channels_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ Discord –∫–∞–Ω–∞–ª–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    projects = project_manager.get_user_projects(user_id)
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    keyboard = []
    for project in discord_projects:
        keyboard.append([InlineKeyboardButton(
            f"üí¨ {project['name']}", 
            callback_data=f"channel_{project['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_forward_settings_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    forward_status = project_manager.get_forward_status(user_id)
    
    keyboard = []
    
    if forward_status['enabled']:
        keyboard.append([InlineKeyboardButton("üî¥ –í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="disable_forward")])
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="change_channel")])
    else:
        keyboard.append([InlineKeyboardButton("üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="enable_forward")])
        keyboard.append([InlineKeyboardButton("üìù –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="set_channel")])
    
    keyboard.append([InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="auto_setup")])
    keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="forward_status")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_diagnostics_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ç–∞", callback_data="check_bot_status")],
        [InlineKeyboardButton("üì∫ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª—ñ–≤", callback_data="test_channels")],
        [InlineKeyboardButton("üîó Discord API", callback_data="test_discord_api")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data="reload_data")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def escape_markdown(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è Markdown"""
    if not text:
        return ""
    return str(text).replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[').replace(']', '\\]')

def extract_twitter_username(url: str) -> str:
    """–í–∏—Ç—è–≥—Ç–∏ username –∑ Twitter URL"""
    try:
        # –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ URL
        if 'twitter.com' in url or 'x.com' in url:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ—Ç–æ–∫–æ–ª
            url = url.replace('https://', '').replace('http://', '')
            
            # –í–∏–¥–∞–ª—è—î–º–æ www
            if url.startswith('www.'):
                url = url[4:]
                
            # –í–∏—Ç—è–≥—É—î–º–æ username
            if url.startswith('twitter.com/'):
                username = url.split('/')[1]
            elif url.startswith('x.com/'):
                username = url.split('/')[1]
            else:
                return None
                
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            username = username.split('?')[0].split('#')[0]
            
            return username if username else None
            
        return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Twitter username: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    
    if security_manager.is_user_authorized(user_id):
        welcome_text = (
            f"–ü—Ä–∏–≤—ñ—Ç {update.effective_user.first_name}! üëã\n\n"
            f"üîê –ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥\n\n"
            f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
        )
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_main_menu_keyboard()
        )
    else:
        waiting_for_password[user_id] = True
        await update.message.reply_text(MESSAGES['password_request'])

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–µ –≤—ñ–¥ –∫–∞–Ω–∞–ª—É)
    if not update.effective_user:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –∫–∞–Ω–∞–ª
    if update.message.chat.type in ['channel', 'supergroup']:
        # –Ø–∫—â–æ —Ü–µ –∫–∞–Ω–∞–ª, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±–æ—Ç–∞ –ø—ñ–Ω–≥–Ω—É–ª–∏
        if update.message.text and '@' in update.message.text:
            # –®—É–∫–∞—î–º–æ username –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç—ñ
            bot_username = context.bot.username
            if bot_username and f'@{bot_username}' in update.message.text:
                # –ë–æ—Ç–∞ –ø—ñ–Ω–≥–Ω—É–ª–∏ –≤ –∫–∞–Ω–∞–ª—ñ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
                await handle_channel_ping(update, context)
        return
        
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—á—ñ–∫—É—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    if user_id in waiting_for_password:
        if message_text == ADMIN_PASSWORD:
            security_manager.authorize_user(user_id)
            del waiting_for_password[user_id]
            welcome_text = (
                f"{MESSAGES['password_correct']}\n\n"
                f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
            )
            await update.message.reply_text(
                welcome_text,
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(MESSAGES['password_incorrect'])
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if not security_manager.is_user_authorized(user_id):
        waiting_for_password[user_id] = True
        await update.message.reply_text(MESSAGES['session_expired'])
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    security_manager.update_user_activity(user_id)
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–∞–Ω –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
    if user_id in user_states:
        if user_states[user_id]['state'] == 'adding_project':
            await handle_project_creation(update, context)
        elif user_states[user_id]['state'] == 'setting_forward_channel':
            await handle_forward_channel_setting(update, context)
        return
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏
    if message_text.startswith('/'):
        await handle_command(update, context, message_text)
    else:
        await update.message.reply_text(
            f"–í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {message_text}\n"
            f"–ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_main_menu_keyboard()
        )

async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE, command: str) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥"""
    user_id = update.effective_user.id
    
    if command == '/status':
        time_left = security_manager.get_session_time_left(user_id)
        await update.message.reply_text(
            f"–°—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó:\n"
            f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π: {'–¢–∞–∫' if security_manager.is_user_authorized(user_id) else '–ù—ñ'}\n"
            f"–ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {time_left} —Å–µ–∫—É–Ω–¥"
        )
    elif command == '/logout':
        security_manager.deauthorize_user(user_id)
        await update.message.reply_text("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.")
    elif command == '/help':
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
            "/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó\n"
            "/logout - –í–∏–π—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–∏\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
        )
    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    if not security_manager.is_user_authorized(user_id):
        await query.edit_message_text(MESSAGES['session_expired'])
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    security_manager.update_user_activity(user_id)
    
    # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if not project_manager.get_user_data(user_id):
        project_manager.add_user(user_id, {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        })
    else:
        project_manager.update_user_last_seen(user_id)
    
    callback_data = query.data
    
    if callback_data == "main_menu":
        await query.edit_message_text(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_main_menu_keyboard()
        )
    elif callback_data == "add_project":
        await query.edit_message_text(
            "‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É\n\n–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:",
            reply_markup=get_platform_keyboard()
        )
    elif callback_data == "my_projects":
        projects_text = project_manager.format_projects_list(user_id)
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            projects_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif callback_data == "platform_twitter":
        user_states[user_id] = {
            'state': 'adding_project',
            'data': {'platform': 'twitter'}
        }
        await query.edit_message_text(
            "üê¶ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É Twitter/X\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:"
        )
    elif callback_data == "platform_discord":
        user_states[user_id] = {
            'state': 'adding_project',
            'data': {'platform': 'discord'}
        }
        await query.edit_message_text(
            "üí¨ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É Discord\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:"
        )
    elif callback_data == "help":
        help_text = (
            "‚ùì –î–æ–ø–æ–º–æ–≥–∞\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n"
            "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n"
            "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ Twitter/X —Ç–∞ Discord\n"
            "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –±–µ–∑–ø–µ–∫–∞ –∑ –ø–∞—Ä–æ–ª–µ–º\n\n"
            "üîê –ë–µ–∑–ø–µ–∫–∞:\n"
            "‚Ä¢ –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å\n\n"
            "üìù –§–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω—å:\n"
            "‚Ä¢ Twitter: https://twitter.com/username\n"
            "‚Ä¢ Discord: https://discord.com/channels/server_id/channel_id"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif callback_data == "selenium_twitter":
        selenium_text = (
            "üê¶ **Selenium Twitter –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥**\n\n"
            "üîß **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ `/selenium_auth` - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤ Twitter\n"
            "‚Ä¢ `/selenium_add username` - –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ `/selenium_test username` - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ `/selenium_start` - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ `/selenium_stop` - –ó—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n\n"
            "üìù **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
            "1. `/selenium_auth` - —É–≤—ñ–π–¥—ñ—Ç—å –≤ Twitter\n"
            "2. `/selenium_add pilk_xz` - –¥–æ–¥–∞–π—Ç–µ –∞–∫–∞—É–Ω—Ç\n"
            "3. `/selenium_test pilk_xz` - –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ\n"
            "4. `/selenium_start` - –∑–∞–ø—É—Å—Ç—ñ—Ç—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n\n"
            "üí° **–ü–µ—Ä–µ–≤–∞–≥–∏ Selenium:**\n"
            "‚Ä¢ –†–µ–∞–ª—å–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä\n"
            "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ –ù–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥\n"
            "‚Ä¢ –û–±—Ö—ñ–¥ –æ–±–º–µ–∂–µ–Ω—å API"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            selenium_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif callback_data == "account_manager":
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
        projects = project_manager.get_user_projects(user_id)
        
        if not projects:
            await query.edit_message_text(
                "üîß **–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤**\n\n‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.\n\n–î–æ–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.",
                reply_markup=get_main_menu_keyboard()
            )
            return
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        twitter_projects = [p for p in projects if p['platform'] == 'twitter']
        discord_projects = [p for p in projects if p['platform'] == 'discord']
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫
        text = "üîß **–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤**\n\n"
        
        if twitter_projects:
            text += "üê¶ **Twitter/X –∞–∫–∞—É–Ω—Ç–∏:**\n"
            for i, project in enumerate(twitter_projects, 1):
                username = extract_twitter_username(project['url'])
                text += f"{i}. @{username} ({project['name']})\n"
            text += "\n"
        
        if discord_projects:
            text += "üí¨ **Discord –∫–∞–Ω–∞–ª–∏:**\n"
            for i, project in enumerate(discord_projects, 1):
                channel_id = extract_discord_channel_id(project['url'])
                text += f"{i}. –ö–∞–Ω–∞–ª {channel_id} ({project['name']})\n"
            text += "\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        text += "üîß **–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**\n"
        text += "‚Ä¢ /remove_twitter username - –≤–∏–¥–∞–ª–∏—Ç–∏ Twitter –∞–∫–∞—É–Ω—Ç\n"
        text += "‚Ä¢ /remove_discord channel_id - –≤–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª\n"
        text += "‚Ä¢ /accounts - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif callback_data == "discord_history":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î Discord –ø—Ä–æ–µ–∫—Ç–∏
        projects = project_manager.get_user_projects(user_id)
        discord_projects = [p for p in projects if p['platform'] == 'discord']
        
        if not discord_projects:
            await query.edit_message_text(
                "üìú –Ü—Å—Ç–æ—Ä—ñ—è Discord\n\n‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó.\n\n–î–æ–¥–∞–π—Ç–µ Discord –ø—Ä–æ–µ–∫—Ç —Å–ø–æ—á–∞—Ç–∫—É.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await query.edit_message_text(
                "üìú –Ü—Å—Ç–æ—Ä—ñ—è Discord\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:",
                reply_markup=get_discord_channels_keyboard(user_id)
            )
    elif callback_data.startswith("channel_"):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
        project_id = int(callback_data.split("_")[1])
        project = project_manager.get_project_by_id(user_id, project_id)
        
        if project:
            user_states[user_id] = {
                'state': 'viewing_history',
                'data': {'project': project}
            }
            await query.edit_message_text(
                f"üìú –Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {project['name']}\n\n–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
                reply_markup=get_history_count_keyboard()
            )
    elif callback_data.startswith("history_"):
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        count = int(callback_data.split("_")[1])
        await handle_discord_history(update, context, count)
    elif callback_data == "settings":
        stats = project_manager.get_statistics()
        user_projects = project_manager.get_user_projects(user_id)
        
        settings_text = (
            "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
            f"üîê –ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥\n"
            f"üìä –í–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏: {len(user_projects)}\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
            f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
            f"üí¨ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['discord_projects']}\n"
            f"üê¶ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['twitter_projects']}\n"
            f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–∞–Ω–∏—Ö: {stats['data_file_size']} –±–∞–π—Ç\n"
            f"üïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {stats['last_updated'][:19]}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
            "‚Ä¢ –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è\n"
            "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Å–µ—Å—ñ—ó\n"
            "‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif callback_data == "forward_settings":
        forward_status = project_manager.get_forward_status(user_id)
        
        if forward_status['enabled']:
            status_text = f"üì¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n‚úÖ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ\nüì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id']}\nüïí –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {forward_status['created_at'][:19] if forward_status['created_at'] else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n\nüí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª, –Ω–µ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        else:
            status_text = "üì¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n‚ùå –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ\n\n–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤.\n\nüí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª."
        
        await query.edit_message_text(
            status_text,
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "enable_forward":
        if project_manager.enable_forward(user_id):
            await query.edit_message_text(
                "‚úÖ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
    elif callback_data == "disable_forward":
        if project_manager.disable_forward(user_id):
            await query.edit_message_text(
                "üî¥ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
    elif callback_data in ["set_channel", "change_channel"]:
        user_states[user_id] = {
            'state': 'setting_forward_channel',
            'data': {}
        }
        await query.edit_message_text(
            "üìù –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            "**–°–ø–æ—Å—ñ–± 1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "1. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –ü—ñ–Ω–≥–Ω—ñ—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ: @bot_username\n"
            "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç—É—î –∫–∞–Ω–∞–ª\n\n"
            "**–°–ø–æ—Å—ñ–± 2 - –†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "–í–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É –∞–±–æ username –∫–∞–Ω–∞–ª—É:\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ @channel_username\n"
            "‚Ä¢ -1001234567890 (ID –∫–∞–Ω–∞–ª—É)\n"
            "‚Ä¢ channel_username (–±–µ–∑ @)\n\n"
            "üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!"
        )
    elif callback_data == "auto_setup":
        bot_username = context.bot.username
        await query.edit_message_text(
            f"ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É**\n\n"
            f"–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É:\n\n"
            f"1Ô∏è‚É£ **–î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª**\n"
            f"   ‚Ä¢ –î–æ–¥–∞–π—Ç–µ @{bot_username} –≤ –∫–∞–Ω–∞–ª —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"   ‚Ä¢ –ù–∞–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n\n"
            f"2Ô∏è‚É£ **–ü—ñ–Ω–≥–Ω—ñ—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ**\n"
            f"   ‚Ä¢ –ù–∞–ø–∏—à—ñ—Ç—å –≤ –∫–∞–Ω–∞–ª—ñ: @{bot_username}\n"
            f"   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç—É—î –∫–∞–Ω–∞–ª\n\n"
            f"3Ô∏è‚É£ **–ì–æ—Ç–æ–≤–æ!**\n"
            f"   ‚Ä¢ –ö–∞–Ω–∞–ª –±—É–¥–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n"
            f"   ‚Ä¢ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\n\n"
            f"üí° **–ü–µ—Ä–µ–≤–∞–≥–∏:**\n"
            f"‚Ä¢ –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ ID –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
            f"‚Ä¢ –ú–∏—Ç—Ç—î–≤–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "forward_status":
        forward_status = project_manager.get_forward_status(user_id)
        user_projects = project_manager.get_user_projects(user_id)
        discord_projects = [p for p in user_projects if p['platform'] == 'discord']
        
        status_text = (
            f"üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if forward_status['enabled'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id'] or '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
            f"üìã Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(discord_projects)}\n"
            f"üïí –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {forward_status['created_at'][:19] if forward_status['created_at'] else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n\n"
            f"üí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª, –Ω–µ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n"
        )
        
        if forward_status['enabled'] and discord_projects:
            status_text += "üì¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –∑:\n"
            for project in discord_projects:
                status_text += f"‚Ä¢ {project['name']}\n"
        elif not discord_projects:
            status_text += "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."
        
        await query.edit_message_text(
            status_text,
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "diagnostics":
        diagnostics_text = (
            "üîß **–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:\n\n"
            "üîç **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ç–∞** - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
            "üì∫ **–¢–µ—Å—Ç –∫–∞–Ω–∞–ª—ñ–≤** - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—ñ–≤\n"
            "üîó **Discord API** - —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Discord\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏\n"
            "üîÑ **–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏** - –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ"
        )
        await query.edit_message_text(
            diagnostics_text,
            reply_markup=get_diagnostics_keyboard()
        )
    elif callback_data == "check_bot_status":
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            bot_info = await context.bot.get_me()
            bot_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            auth_users = len(security_manager.authorized_users)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            discord_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if discord_monitor else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
            
            status_text = (
                f"üîç **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
                f"ü§ñ –ë–æ—Ç: {bot_status}\n"
                f"üìõ –Ü–º'—è: {bot_info.first_name}\n"
                f"üÜî ID: {bot_info.id}\n"
                f"üë§ Username: @{bot_info.username}\n\n"
                f"üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {auth_users}\n"
                f"üîó Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {discord_status}\n"
                f"üìä –ü—Ä–æ–µ–∫—Ç—ñ–≤: {len(project_manager.get_user_projects(user_id))}\n"
                f"üïí –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            await query.edit_message_text(
                status_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ—Ç–∞**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "test_channels":
        try:
            forward_channel = project_manager.get_forward_channel(user_id)
            
            if forward_channel:
                # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                test_message = (
                    f"üß™ **–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è**\n\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: {forward_channel}\n"
                    f"üë§ –í—ñ–¥: {update.effective_user.first_name}\n"
                    f"üïí –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"‚úÖ –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–∞–Ω–∞–ª –ø—Ä–∞—Ü—é—î!"
                )
                
                await context.bot.send_message(
                    chat_id=forward_channel,
                    text=test_message,
                    parse_mode='Markdown'
                )
                
                result_text = f"‚úÖ **–¢–µ—Å—Ç –∫–∞–Ω–∞–ª—É –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!**\n\nüì∫ –ö–∞–Ω–∞–ª: `{forward_channel}`\nüì§ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
            else:
                result_text = "‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**\n\n–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö."
            
            await query.edit_message_text(
                result_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∫–∞–Ω–∞–ª—É**\n\n{str(e)}\n\nüí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n‚Ä¢ –ß–∏ –¥–æ–¥–∞–Ω–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n‚Ä¢ –ß–∏ —î —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n‚Ä¢ –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–∞–Ω–∞–ª—É",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "test_discord_api":
        try:
            if not DISCORD_AUTHORIZATION:
                await query.edit_message_text(
                    "‚ùå **Discord API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**\n\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å AUTHORIZATION —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª—ñ",
                    reply_markup=get_diagnostics_keyboard()
                )
                return
            
            # –¢–µ—Å—Ç—É—î–º–æ Discord API
            import aiohttp
            headers = {
                'Authorization': DISCORD_AUTHORIZATION,
                'User-Agent': 'DiscordBot (https://github.com/discord/discord-api-docs, 1.0)'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get('https://discord.com/api/v10/users/@me', headers=headers) as response:
                    if response.status == 200:
                        user_data = await response.json()
                        result_text = (
                            f"‚úÖ **Discord API –ø—Ä–∞—Ü—é—î**\n\n"
                            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_data.get('username', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                            f"üÜî ID: {user_data.get('id', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                            f"üìß Email: {user_data.get('email', '–ü—Ä–∏—Ö–æ–≤–∞–Ω–æ')}\n"
                            f"üîê –í–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π: {'‚úÖ' if user_data.get('verified', False) else '‚ùå'}\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {response.status}"
                        )
                    else:
                        result_text = f"‚ùå **Discord API –ø–æ–º–∏–ª–∫–∞**\n\n–°—Ç–∞—Ç—É—Å: {response.status}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {await response.text()}"
            
            await query.edit_message_text(
                result_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ Discord API**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "show_stats":
        try:
            stats = project_manager.get_statistics()
            user_projects = project_manager.get_user_projects(user_id)
            discord_projects = [p for p in user_projects if p['platform'] == 'discord']
            forward_status = project_manager.get_forward_status(user_id)
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            sent_messages = project_manager.data['settings'].get('sent_messages', {})
            total_tracked = sum(
                len(channel_messages) 
                for user_messages in sent_messages.values() 
                for channel_messages in user_messages.values()
            )
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
                f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
                f"üîó Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(discord_projects)}\n"
                f"üê¶ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len([p for p in user_projects if p['platform'] == 'twitter'])}\n\n"
                f"üì¢ **–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è:**\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if forward_status['enabled'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id'] or '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n\n"
                f"üíæ **–î–∞–Ω—ñ:**\n"
                f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {stats.get('data_size', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"üì® –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {total_tracked}\n"
                f"üïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {stats.get('last_update', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "reload_data":
        try:
            # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            project_manager.load_data()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            if discord_monitor:
                discord_monitor.channels.clear()
                for user_id_str, projects in project_manager.data['projects'].items():
                    for project in projects:
                        if project['platform'] == 'discord':
                            channel_id = project['link'].split('/')[-1]
                            discord_monitor.add_channel(channel_id)
            
            await query.edit_message_text(
                "üîÑ **–î–∞–Ω—ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ**\n\n‚úÖ –ü—Ä–æ–µ–∫—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ\n‚úÖ Discord –∫–∞–Ω–∞–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ\n‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ",
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )

async def handle_project_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É"""
    user_id = update.effective_user.id
    message_text = update.message.text
    state_data = user_states[user_id]['data']
    
    if 'name' not in state_data:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É
        state_data['name'] = message_text
        platform = state_data['platform']
        
        if platform == 'twitter':
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É: {message_text}\n\n"
                f"üê¶ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Twitter/X —Å—Ç–æ—Ä—ñ–Ω–∫—É:\n"
                f"–ü—Ä–∏–∫–ª–∞–¥: https://twitter.com/username"
            )
        else:  # discord
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É: {message_text}\n\n"
                f"üí¨ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Discord –∫–∞–Ω–∞–ª:\n"
                f"–ü—Ä–∏–∫–ª–∞–¥: https://discord.com/channels/1408570777275469866/1413243132467871839"
            )
    else:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        state_data['url'] = message_text
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç
        if project_manager.add_project(user_id, state_data):
            # –î–æ–¥–∞—î–º–æ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            if state_data['platform'] == 'discord' and discord_monitor:
                try:
                    discord_monitor.add_channel(state_data['url'])
                    logger.info(f"–î–æ–¥–∞–Ω–æ Discord –∫–∞–Ω–∞–ª –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {state_data['url']}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            elif state_data['platform'] == 'twitter' and twitter_monitor:
                try:
                    # –í–∏—Ç—è–≥—É—î–º–æ username –∑ URL
                    username = extract_twitter_username(state_data['url'])
                    if username:
                        twitter_monitor.add_account(username)
                        logger.info(f"–î–æ–¥–∞–Ω–æ Twitter –∞–∫–∞—É–Ω—Ç –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {username}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                    
            success_text = (
                f"üéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                f"üìù –ù–∞–∑–≤–∞: {state_data['name']}\n"
                f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {state_data['platform'].title()}\n"
                f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {state_data['url']}\n\n"
                f"–ü—Ä–æ–µ–∫—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."
            )
            await update.message.reply_text(
                success_text,
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard()
            )
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        del user_states[user_id]

async def handle_forward_channel_setting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    # –û—á–∏—â–∞—î–º–æ @ —è–∫—â–æ —î
    if message_text.startswith('@'):
        message_text = message_text[1:]
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—É
    if not message_text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∞–±–æ username –∫–∞–Ω–∞–ª—É.")
        return
    
    # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª
    if project_manager.set_forward_channel(user_id, message_text):
        success_text = (
            f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {message_text}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
            f"–¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∞—à–∏—Ö Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –≤ —Ü–µ–π –∫–∞–Ω–∞–ª."
        )
        await update.message.reply_text(
            success_text,
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard()
        )
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id in user_states:
        del user_states[user_id]

async def handle_channel_ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–Ω–≥—É –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª
        channel_id = update.message.chat.id
        channel_title = update.message.chat.title or "Unknown Channel"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –ø—ñ–Ω–≥–Ω—É–≤
        if update.message.from_user:
            user_id = update.message.from_user.id
            username = update.message.from_user.username or update.message.from_user.first_name
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
            if not security_manager.is_user_authorized(user_id):
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üîí –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.\n\n–°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –±–æ—Ç—ñ: @{context.bot.username}"
                    )
                except:
                    pass  # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                return
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
            if project_manager.set_forward_channel(user_id, str(channel_id)):
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª
                safe_channel_title = escape_markdown(channel_title)
                safe_username = escape_markdown(username)
                
                confirmation_text = (
                    f"‚úÖ **–ö–∞–Ω–∞–ª –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è!**\n\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: {safe_channel_title}\n"
                    f"üë§ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: @{safe_username}\n"
                    f"üîÑ –°—Ç–∞—Ç—É—Å: –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
                    f"–¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –≤ —Ü–µ–π –∫–∞–Ω–∞–ª."
                )
                
                await context.bot.send_message(
                    chat_id=channel_id,
                    text=confirmation_text,
                    parse_mode='Markdown'
                )
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚úÖ –ö–∞–Ω–∞–ª '{channel_title}' —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å!"
                    )
                except:
                    pass
                    
                logger.info(f"–ö–∞–Ω–∞–ª {channel_id} ({channel_title}) –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            else:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É '{channel_title}'. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                    )
                except:
                    pass
        else:
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await context.bot.send_message(
                chat_id=channel_id,
                text="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è."
            )
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—ñ–Ω–≥—É –≤ –∫–∞–Ω–∞–ª—ñ: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.message.chat.id,
                text="‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
        except:
            pass

async def handle_discord_history(update: Update, context: ContextTypes.DEFAULT_TYPE, count: int) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó Discord"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'viewing_history':
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())
        return
    
    project = user_states[user_id]['data']['project']
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await query.edit_message_text(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É {project['name']}...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord
        messages = await get_discord_messages_history(project['url'], count)
        
        if not messages:
            await query.edit_message_text(
                f"üìú –Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {project['name']}\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n–ú–æ–∂–ª–∏–≤–æ, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É –∞–±–æ –∫–∞–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            history_text = format_discord_history(messages, project['name'], count)
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(history_text) > 4000:
                # Telegram –º–∞—î –ª—ñ–º—ñ—Ç –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                parts = [history_text[i:i+4000] for i in range(0, len(history_text), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await query.edit_message_text(part)
                    else:
                        await context.bot.send_message(chat_id=user_id, text=part)
            else:
                await query.edit_message_text(history_text, reply_markup=get_main_menu_keyboard())
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó Discord: {e}")
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–∞–Ω–∞–ª—É {project['name']}:\n{str(e)}",
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id in user_states:
            del user_states[user_id]

async def get_discord_messages_history(channel_url: str, limit: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ Discord –∫–∞–Ω–∞–ª—É"""
    if not DISCORD_AUTHORIZATION:
        return []
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ URL –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è channel_id
        import re
        match = re.search(r'discord\.com/channels/(\d+)/(\d+)', channel_url)
        if not match:
            return []
        
        channel_id = match.group(2)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π session –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://discord.com/api/v9/channels/{channel_id}/messages?limit={limit}",
                headers={
                    'Authorization': DISCORD_AUTHORIZATION,
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {response.status}")
                    return []
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_discord_messages_history: {e}")
        return []

def format_discord_history(messages: List[Dict], channel_name: str, count: int) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Discord"""
    from datetime import datetime
    
    header = f"üìú **–Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {channel_name}**\n"
    header += f"üìä –û—Å—Ç–∞–Ω–Ω—ñ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n"
    
    if not messages:
        return header + "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    
    formatted_messages = []
    for i, message in enumerate(messages, 1):
        author = message.get('author', {}).get('username', 'Unknown')
        content = message.get('content', '')
        timestamp = message.get('timestamp', '')
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å
        try:
            if timestamp:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime('%d.%m.%Y %H:%M')
            else:
                time_str = 'Unknown time'
        except:
            time_str = 'Unknown time'
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if len(content) > 200:
            content = content[:200] + "..."
        
        formatted_msg = f"**{i}.** üë§ {author} | üïí {time_str}\n"
        if content:
            formatted_msg += f"üí¨ {content}\n"
        formatted_msg += "‚îÄ" * 30 + "\n"
        
        formatted_messages.append(formatted_msg)
    
    return header + "\n".join(formatted_messages)

def handle_discord_notifications_sync(new_messages: List[Dict]) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Discord (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    global bot_instance
    
    if not bot_instance:
        return
        
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
        # (–Ω–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó)
        all_users = project_manager.get_all_users()
        users_with_forwarding = []
        
        for user_id in all_users:
            forward_channel = project_manager.get_forward_channel(user_id)
            if forward_channel:
                users_with_forwarding.append(user_id)
        
        if not users_with_forwarding:
            return
                
        # –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        for message in new_messages:
            message_id = message.get('message_id', '')
            channel_id = message.get('channel_id', '')
            
            # –ö—Ä–∞—Å–∏–≤–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            author = escape_markdown(message['author'])
            content = escape_markdown(message['content'])
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(content) > 200:
                content = content[:200] + "..."
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            timestamp = message.get('timestamp', '')
            formatted_date = "–ù–µ –≤—ñ–¥–æ–º–æ"
            time_ago = ""
            
            if timestamp:
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d %B, %H:%M UTC")
                    time_ago = _get_time_ago(dt)
                except:
                    formatted_date = timestamp[:19] if len(timestamp) > 19 else timestamp
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä –∑ URL
            server_name = "Discord"
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ guild_id –∑ URL
                url_parts = message['url'].split('/')
                if len(url_parts) >= 5:
                    guild_id = url_parts[4]
                    server_name = f"Discord Server ({guild_id})"
            except:
                pass
            
            forward_text = (
                f"üì¢ **–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord**\n"
                f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {server_name}\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author}\n"
                f"‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                f"‚Ä¢ –¢–µ–∫—Å—Ç: {content}\n"
                f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]({message['url']})"
            )
            
            for user_id in users_with_forwarding:
                try:
                    # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–Ω–∞–ª—É
                    forward_channel = project_manager.get_forward_channel(user_id)
                    if not forward_channel:
                        continue
                    
                    # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
                    forward_key = f"forward_{channel_id}_{message_id}"
                    if project_manager.is_message_sent(forward_key, forward_channel, user_id):
                        continue
                    
                    # –®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
                    import requests
                    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                    data = {
                        'chat_id': forward_channel,
                        'text': forward_text,
                        'parse_mode': 'Markdown'
                    }
                    response = requests.post(url, data=data, timeout=3)  # –ó–º–µ–Ω—à–µ–Ω–∏–π timeout
                    
                    if response.status_code == 200:
                        project_manager.add_sent_message(forward_key, forward_channel, user_id)
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª {forward_channel} (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id})")
                    else:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {forward_channel}: {response.status_code}")
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Discord —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

def handle_twitter_notifications_sync(new_tweets: List[Dict]) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤ Twitter (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    global bot_instance
    
    if not bot_instance:
        return
        
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
        all_users = project_manager.get_all_users()
        users_with_forwarding = []
        
        for user_id in all_users:
            forward_channel = project_manager.get_forward_channel(user_id)
            if forward_channel:
                users_with_forwarding.append(user_id)
        
        if not users_with_forwarding:
            return
                
        # –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–≤—ñ—Ç—ñ–≤
        for tweet in new_tweets:
            tweet_id = tweet.get('tweet_id', '')
            account = tweet.get('account', '')
            
            # –ö—Ä–∞—Å–∏–≤–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            author = escape_markdown(tweet.get('author', 'Unknown'))
            text = escape_markdown(tweet.get('text', ''))
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(text) > 200:
                text = text[:200] + "..."
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            timestamp = tweet.get('timestamp', '')
            formatted_date = "–ù–µ –≤—ñ–¥–æ–º–æ"
            time_ago = ""
            
            if timestamp:
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d %B, %H:%M UTC")
                    time_ago = _get_time_ago(dt)
                except:
                    formatted_date = timestamp[:19] if len(timestamp) > 19 else timestamp
            
            forward_text = (
                f"üê¶ **–ù–æ–≤–∏–π —Ç–≤—ñ—Ç –∑ Twitter**\n"
                f"‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª—å: @{account}\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author}\n"
                f"‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                f"‚Ä¢ –¢–µ–∫—Å—Ç: {text}\n"
                f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–≤—ñ—Ç–∞]({tweet.get('url', '')})"
            )
            
            for user_id in users_with_forwarding:
                try:
                    # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–Ω–∞–ª—É
                    forward_channel = project_manager.get_forward_channel(user_id)
                    if not forward_channel:
                        continue
                    
                    # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
                    forward_key = f"twitter_{account}_{tweet_id}"
                    if project_manager.is_message_sent(forward_key, forward_channel, user_id):
                        continue
                    
                    # –®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
                    import requests
                    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                    data = {
                        'chat_id': forward_channel,
                        'text': forward_text,
                        'parse_mode': 'Markdown'
                    }
                    response = requests.post(url, data=data, timeout=3)
                    
                    if response.status_code == 200:
                        project_manager.add_sent_message(forward_key, forward_channel, user_id)
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ Twitter —Ç–≤—ñ—Ç –≤ –∫–∞–Ω–∞–ª {forward_channel} (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id})")
                    else:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Twitter —Ç–≤—ñ—Ç–∞ –≤ –∫–∞–Ω–∞–ª {forward_channel}: {response.status_code}")
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Twitter –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Twitter —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

async def start_discord_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Discord"""
    global discord_monitor
    
    if not discord_monitor or not DISCORD_AUTHORIZATION:
        logger.warning("Discord authorization —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        return
        
    try:
        async with discord_monitor:
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ Discord –∫–∞–Ω–∞–ª–∏ –∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            for user_id, projects in project_manager.data['projects'].items():
                for project in projects:
                    if project['platform'] == 'discord':
                        discord_monitor.add_channel(project['url'])
                        
            logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Discord –∫–∞–Ω–∞–ª—ñ–≤")
            await discord_monitor.start_monitoring(handle_discord_notifications_sync, MONITORING_INTERVAL)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Discord: {e}")

async def start_twitter_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Twitter –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    global twitter_monitor
    
    if not twitter_monitor or not TWITTER_AUTH_TOKEN:
        logger.warning("Twitter auth_token –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        return
        
    try:
        async with twitter_monitor:
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ Twitter –∞–∫–∞—É–Ω—Ç–∏ –∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            for user_id, projects in project_manager.data['projects'].items():
                for project in projects:
                    if project['platform'] == 'twitter':
                        username = extract_twitter_username(project['url'])
                        if username:
                            twitter_monitor.add_account(username)
                            
            logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            while True:
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π HTML –ø–∞—Ä—Å–∏–Ω–≥
                    new_tweets = await twitter_monitor.check_new_tweets()
                    
                    if new_tweets:
                        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
                        formatted_tweets = []
                        for tweet in new_tweets:
                            formatted_tweets.append({
                                'tweet_id': tweet.get('id', ''),
                                'account': tweet.get('user', {}).get('screen_name', ''),
                                'author': tweet.get('user', {}).get('name', ''),
                                'text': tweet.get('text', ''),
                                'url': tweet.get('url', ''),
                                'timestamp': tweet.get('created_at', '')
                            })
                        
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                        handle_twitter_notifications_sync(formatted_tweets)
                        logger.info(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {len(formatted_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                    
                    # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                    await asyncio.sleep(TWITTER_MONITORING_INTERVAL)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")
                    await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")

async def start_selenium_twitter_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global selenium_twitter_monitor
    
    if not selenium_twitter_monitor:
        logger.warning("Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return
        
    try:
        selenium_twitter_monitor.monitoring_active = True
        
        logger.info(f"–ó–∞–ø—É—Å–∫ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter –∞–∫–∞—É–Ω—Ç—ñ–≤: {list(selenium_twitter_monitor.monitoring_accounts)}")
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        while selenium_twitter_monitor.monitoring_active:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ —á–µ—Ä–µ–∑ Selenium
                new_tweets = await selenium_twitter_monitor.check_new_tweets()
                
                if new_tweets:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
                    formatted_tweets = []
                    for tweet in new_tweets:
                        formatted_tweets.append({
                            'tweet_id': tweet.get('id', ''),
                            'account': tweet.get('user', {}).get('screen_name', ''),
                            'author': tweet.get('user', {}).get('name', ''),
                            'text': tweet.get('text', ''),
                            'url': tweet.get('url', ''),
                            'timestamp': tweet.get('created_at', '')
                        })
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                    handle_twitter_notifications_sync(formatted_tweets)
                    logger.info(f"Selenium: –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(formatted_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                
                # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")
                await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

def check_sessions(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω—ñ —Å–µ—Å—ñ—ó"""
    try:
        security_manager.check_expired_sessions(context.bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ–π: {e}")

def cleanup_old_messages(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        project_manager.cleanup_old_messages(hours=24)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")

def _get_time_ago(dt: datetime) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å —Ç–æ–º—É"""
    try:
        from datetime import datetime, timezone
        now = datetime.now(timezone.utc)
        
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ dt –º–∞—î timezone
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        
        diff = now - dt
        
        total_seconds = int(diff.total_seconds())
        
        if total_seconds < 0:
            return "—â–æ–π–Ω–æ"
        elif total_seconds < 60:
            return f"{total_seconds} —Å–µ–∫—É–Ω–¥ —Ç–æ–º—É"
        elif total_seconds < 3600:
            minutes = total_seconds // 60
            return f"{minutes} —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É"
        elif total_seconds < 86400:
            hours = total_seconds // 3600
            return f"{hours} –≥–æ–¥–∏–Ω —Ç–æ–º—É"
        else:
            days = total_seconds // 86400
            return f"{days} –¥–Ω—ñ–≤ —Ç–æ–º—É"
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—É: {e}")
        return ""

# Selenium Twitter –∫–æ–º–∞–Ω–¥–∏
async def selenium_auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ Twitter —á–µ—Ä–µ–∑ Selenium"""
    global selenium_twitter_monitor
    
    if not selenium_twitter_monitor:
        selenium_twitter_monitor = SeleniumTwitterMonitor()
        await selenium_twitter_monitor.__aenter__()
    
    await update.message.reply_text("üîê –í—ñ–¥–∫—Ä–∏–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ Twitter...")
    
    try:
        if selenium_twitter_monitor.open_manual_auth():
            selenium_twitter_monitor.save_profile()
            await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {str(e)}")

async def selenium_add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –¥–ª—è Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    global selenium_twitter_monitor
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /selenium_add pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    if not selenium_twitter_monitor:
        selenium_twitter_monitor = SeleniumTwitterMonitor()
        await selenium_twitter_monitor.__aenter__()
    
    if selenium_twitter_monitor.add_account(username):
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ Twitter –∞–∫–∞—É–Ω—Ç –¥–ª—è Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: @{username}")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞: @{username}")

async def selenium_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global selenium_twitter_monitor
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /selenium_test pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    if not selenium_twitter_monitor:
        selenium_twitter_monitor = SeleniumTwitterMonitor()
        await selenium_twitter_monitor.__aenter__()
    
    await update.message.reply_text(f"üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è @{username}...")
    
    try:
        tweets = await selenium_twitter_monitor.get_user_tweets(username, limit=3)
        
        if tweets:
            result_text = f"‚úÖ **Selenium —Ç–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π!**\n\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤:\n\n"
            
            for i, tweet in enumerate(tweets, 1):
                text_preview = tweet['text'][:100] + "..." if len(tweet['text']) > 100 else tweet['text']
                result_text += f"{i}. {text_preview}\n"
                result_text += f"   üîó [–ü–µ—Ä–µ–π—Ç–∏]({tweet['url']})\n\n"
                
            await update.message.reply_text(result_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå –¢–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è @{username}")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")

async def selenium_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global selenium_twitter_monitor
    
    if not selenium_twitter_monitor:
        selenium_twitter_monitor = SeleniumTwitterMonitor()
        await selenium_twitter_monitor.__aenter__()
    
    if not selenium_twitter_monitor.monitoring_accounts:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É! –î–æ–¥–∞–π—Ç–µ Twitter –∞–∫–∞—É–Ω—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    import threading
    selenium_thread = threading.Thread(target=lambda: asyncio.run(start_selenium_twitter_monitoring()))
    selenium_thread.daemon = True
    selenium_thread.start()
    
    await update.message.reply_text("üöÄ **Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ!**\n\n–ë–æ—Ç –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥.", parse_mode='Markdown')

async def selenium_stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó—É–ø–∏–Ω–∏—Ç–∏ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global selenium_twitter_monitor
    
    if selenium_twitter_monitor:
        selenium_twitter_monitor.monitoring_active = False
        await selenium_twitter_monitor.__aexit__(None, None, None)
        selenium_twitter_monitor = None
    
    await update.message.reply_text("‚èπÔ∏è **Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ!**", parse_mode='Markdown')

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
async def accounts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    user_id = update.effective_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–µ–∫—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    projects = project_manager.get_user_projects(user_id)
    
    if not projects:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.\n\n–î–æ–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫
    text = "üìã **–í–∞—à—ñ –∞–∫–∞—É–Ω—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:**\n\n"
    
    if twitter_projects:
        text += "üê¶ **Twitter/X –∞–∫–∞—É–Ω—Ç–∏:**\n"
        for i, project in enumerate(twitter_projects, 1):
            username = extract_twitter_username(project['url'])
            text += f"{i}. @{username} ({project['name']})\n"
        text += "\n"
    
    if discord_projects:
        text += "üí¨ **Discord –∫–∞–Ω–∞–ª–∏:**\n"
        for i, project in enumerate(discord_projects, 1):
            channel_id = extract_discord_channel_id(project['url'])
            text += f"{i}. –ö–∞–Ω–∞–ª {channel_id} ({project['name']})\n"
        text += "\n"
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    text += "üîß **–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**\n"
    text += "‚Ä¢ /remove_twitter username - –≤–∏–¥–∞–ª–∏—Ç–∏ Twitter –∞–∫–∞—É–Ω—Ç\n"
    text += "‚Ä¢ /remove_discord channel_id - –≤–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª\n"
    text += "‚Ä¢ /accounts - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫"
    
    await update.message.reply_text(text, parse_mode='Markdown')

async def remove_twitter_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ Twitter –∞–∫–∞—É–Ω—Ç –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /remove_twitter pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    projects = project_manager.get_user_projects(user_id)
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    
    project_to_remove = None
    for project in twitter_projects:
        if extract_twitter_username(project['url']) == username:
            project_to_remove = project
            break
    
    if not project_to_remove:
        await update.message.reply_text(f"‚ùå Twitter –∞–∫–∞—É–Ω—Ç @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–µ–∫—Ç
    if project_manager.remove_project(user_id, project_to_remove['name']):
        await update.message.reply_text(f"‚úÖ Twitter –∞–∫–∞—É–Ω—Ç @{username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        
        # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∑ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∞ —è–∫—â–æ –≤—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
        global selenium_twitter_monitor
        if selenium_twitter_monitor and username in selenium_twitter_monitor.monitoring_accounts:
            selenium_twitter_monitor.monitoring_accounts.discard(username)
            if username in selenium_twitter_monitor.seen_tweets:
                del selenium_twitter_monitor.seen_tweets[username]
            await update.message.reply_text(f"‚úÖ –ê–∫–∞—É–Ω—Ç @{username} —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞ @{username}.")

async def remove_discord_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å ID Discord –∫–∞–Ω–∞–ª—É!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /remove_discord 1358806016648544326")
        return
    
    channel_id = context.args[0].strip()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    projects = project_manager.get_user_projects(user_id)
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    project_to_remove = None
    for project in discord_projects:
        if extract_discord_channel_id(project['url']) == channel_id:
            project_to_remove = project
            break
    
    if not project_to_remove:
        await update.message.reply_text(f"‚ùå Discord –∫–∞–Ω–∞–ª {channel_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–µ–∫—Ç
    if project_manager.remove_project(user_id, project_to_remove['name']):
        await update.message.reply_text(f"‚úÖ Discord –∫–∞–Ω–∞–ª {channel_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        
        # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∑ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∞ —è–∫—â–æ –≤—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
        global discord_monitor
        if discord_monitor and channel_id in discord_monitor.monitoring_channels:
            discord_monitor.monitoring_channels.discard(channel_id)
            if channel_id in discord_monitor.last_message_ids:
                del discord_monitor.last_message_ids[channel_id]
            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É {channel_id}.")

def extract_twitter_username(url: str) -> str:
    """–í–∏—Ç—è–≥—Ç–∏ username –∑ Twitter URL"""
    import re
    match = re.search(r'twitter\.com/([^/?]+)', url)
    return match.group(1) if match else url

def extract_discord_channel_id(url: str) -> str:
    """–í–∏—Ç—è–≥—Ç–∏ channel_id –∑ Discord URL"""
    import re
    match = re.search(r'discord\.com/channels/\d+/(\d+)', url)
    return match.group(1) if match else url

def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    global bot_instance
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ BOT_TOKEN")
        return
    
    if not DISCORD_AUTHORIZATION:
        logger.warning("AUTHORIZATION —Ç–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    bot_instance = application.bot
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Selenium Twitter –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("selenium_auth", selenium_auth_command))
    application.add_handler(CommandHandler("selenium_add", selenium_add_command))
    application.add_handler(CommandHandler("selenium_test", selenium_test_command))
    application.add_handler(CommandHandler("selenium_start", selenium_start_command))
    application.add_handler(CommandHandler("selenium_stop", selenium_stop_command))
    
    # –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
    application.add_handler(CommandHandler("accounts", accounts_command))
    application.add_handler(CommandHandler("remove_twitter", remove_twitter_command))
    application.add_handler(CommandHandler("remove_discord", remove_discord_command))
    
    application.add_error_handler(error_handler)
    
    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–µ—Å—ñ–π (–∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É)
    job_queue = application.job_queue
    job_queue.run_repeating(check_sessions, interval=300, first=300)  # –ö–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    
    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏)
    job_queue.run_repeating(cleanup_old_messages, interval=7200, first=7200)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    if discord_monitor and DISCORD_AUTHORIZATION:
        import threading
        discord_thread = threading.Thread(target=lambda: asyncio.run(start_discord_monitoring()))
        discord_thread.daemon = True
        discord_thread.start()
        logger.info("Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    if twitter_monitor and TWITTER_AUTH_TOKEN:
        import threading
        twitter_thread = threading.Thread(target=lambda: asyncio.run(start_twitter_monitoring()))
        twitter_thread.daemon = True
        twitter_thread.start()
        logger.info("Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    try:
        application.run_polling()
    except KeyboardInterrupt:
        # –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
        project_manager.save_data(force=True)
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ, –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

if __name__ == '__main__':
    main()