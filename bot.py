import logging
import asyncio
import threading
import requests
import tempfile
import os
from datetime import datetime
from typing import List, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, JobQueue
from security_manager import SecurityManager
from project_manager import ProjectManager
from discord_monitor import DiscordMonitor
from twitter_monitor import TwitterMonitor
from selenium_twitter_monitor import SeleniumTwitterMonitor
from access_manager import access_manager
from config import BOT_TOKEN, ADMIN_PASSWORD, SECURITY_TIMEOUT, MESSAGES, DISCORD_AUTHORIZATION, MONITORING_INTERVAL, TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN, TWITTER_MONITORING_INTERVAL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è - —Ç—ñ–ª—å–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.ERROR
)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
security_manager = SecurityManager(SECURITY_TIMEOUT)
project_manager = ProjectManager()
discord_monitor = DiscordMonitor(DISCORD_AUTHORIZATION) if DISCORD_AUTHORIZATION else None
twitter_monitor = TwitterMonitor(TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN) if TWITTER_AUTH_TOKEN else None
selenium_twitter_monitor = None  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–æ—á—ñ–∫—É—é—Ç—å –ø–∞—Ä–æ–ª—å)
waiting_for_password = {}

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤
user_states = {}  # user_id -> {'state': 'adding_project', 'data': {...}}

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
bot_instance = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
global_sent_tweets = {}  # account -> set of sent tweet_ids

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –º–∞—î –±—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
def require_auth(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
        if not access_manager.is_authorized(user_id):
            await update.message.reply_text(
                "üîê **–î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ!**\n\n"
                "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è.\n"
                "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.",
                parse_mode='Markdown'
            )
            return
        
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
        return await func(update, context)
    
    return wrapper

# ===================== –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ =====================
def sync_monitors_with_projects() -> None:
    """–ó–≤–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏ –¥–æ —Ñ–∞–∫—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Selenium –∞–∫–∞—É–Ω—Ç—ñ–≤"""
    try:
        # –ó–±–∏—Ä–∞—î–º–æ —Ü—ñ–ª—å–æ–≤—ñ Twitter usernames —ñ–∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤
        project_usernames = set()
        for _, projects in project_manager.data.get('projects', {}).items():
            for p in projects:
                if p.get('platform') == 'twitter':
                    username = extract_twitter_username(p.get('url', ''))
                    if username:
                        project_usernames.add(username)

        # –î–æ–¥–∞—î–º–æ —è–≤–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ selenium –∞–∫–∞—É–Ω—Ç–∏ (—è–∫—â–æ —â–µ —î)
        selenium_saved = set(project_manager.get_selenium_accounts() or [])
        target_usernames = project_usernames.union(selenium_saved)

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Twitter API –º–æ–Ω—ñ—Ç–æ—Ä–∞
        global twitter_monitor
        if twitter_monitor is not None:
            current = set(getattr(twitter_monitor, 'monitoring_accounts', set()))
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ
            for username in list(current - target_usernames):
                try:
                    twitter_monitor.remove_account(username)
                except Exception:
                    pass
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ (—ñ–∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤/selenium_saved)
            for username in list(target_usernames - current):
                try:
                    twitter_monitor.add_account(username)
                except Exception:
                    pass

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∞
        global selenium_twitter_monitor
        if selenium_twitter_monitor is not None:
            current = set(getattr(selenium_twitter_monitor, 'monitoring_accounts', set()))
            # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ
            for username in list(current - target_usernames):
                selenium_twitter_monitor.monitoring_accounts.discard(username)
                if username in selenium_twitter_monitor.seen_tweets:
                    del selenium_twitter_monitor.seen_tweets[username]
            # –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ
            for username in list(target_usernames - current):
                selenium_twitter_monitor.add_account(username)

        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è Discord –∫–∞–Ω–∞–ª—ñ–≤
        global discord_monitor
        if discord_monitor is not None:
            project_channels = set()
            for _, projects in project_manager.data.get('projects', {}).items():
                for p in projects:
                    if p.get('platform') == 'discord':
                        ch = extract_discord_channel_id(p.get('url', ''))
                        if ch:
                            project_channels.add(ch)
            current = set(getattr(discord_monitor, 'monitoring_channels', set()))
            for ch in list(current - project_channels):
                discord_monitor.monitoring_channels.discard(ch)
                if ch in discord_monitor.last_message_ids:
                    del discord_monitor.last_message_ids[ch]
            for ch in list(project_channels - current):
                try:
                    # Reconstruct URL for add_channel convenience
                    discord_monitor.add_channel(f"https://discord.com/channels/0/{ch}")
                except Exception:
                    pass
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤: {e}")

# ===================== –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è Telegram chat_id =====================
def normalize_chat_id(chat_id_value: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ chat_id: –¥–æ–¥–∞—î -100 –¥–ª—è –∫–∞–Ω–∞–ª—ñ–≤/—Å—É–ø–µ—Ä–≥—Ä—É–ø, —è–∫—â–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.
    –ü—Ä–∏–π–º–∞—î —Ä—è–¥–æ–∫ –∑ —Ü–∏—Ñ—Ä–∞–º–∏ –∞–±–æ –≤–∂–µ –≤–∞–ª—ñ–¥–Ω–∏–π –≤—ñ–¥'—î–º–Ω–∏–π chat_id."""
    try:
        val = str(chat_id_value).strip()
        if val.startswith('@'):
            return val  # username, –Ω–µ—Ö–∞–π Telegram –æ–±—Ä–æ–±–∏—Ç—å
        # –Ø–∫—â–æ –≤–∂–µ –≤—ñ–¥'—î–º–Ω–∏–π - –∑–∞–ª–∏—à–∞—î–º–æ
        if val.startswith('-'):
            return val
        # –Ø–∫—â–æ —Ü–µ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ (–π–º–æ–≤—ñ—Ä–Ω–æ, –∫–∞–Ω–∞–ª/—Å—É–ø–µ—Ä–≥—Ä—É–ø–∞, —â–æ –ø–æ—Ç—Ä–µ–±—É—î -100)
        if val.isdigit():
            return '-100' + val
        return val
    except Exception:
        return str(chat_id_value)

# ===================== –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ –∑–∞ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ =====================
def get_users_tracking_discord_channel(channel_id: str) -> List[int]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –º–∞—é—Ç—å –ø—Ä–æ–µ–∫—Ç –∑ —Ü–∏–º Discord channel_id."""
    try:
        tracked_users: List[int] = []
        target = (channel_id or '').strip()
        for user_id_str, projects in project_manager.data.get('projects', {}).items():
            for p in projects:
                if p.get('platform') == 'discord':
                    cid = extract_discord_channel_id(p.get('url', ''))
                    if cid == target:
                        try:
                            tracked_users.append(int(user_id_str))
                        except:
                            pass
        return tracked_users
    except Exception:
        return []

# ===================== –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ –∑–∞ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ =====================
def get_users_tracking_twitter(username: str) -> List[int]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –º–∞—é—Ç—å –ø—Ä–æ–µ–∫—Ç –∑ —Ü–∏–º Twitter username."""
    try:
        tracked_users: List[int] = []
        target = (username or '').replace('@', '').strip().lower()
        for user_id_str, projects in project_manager.data.get('projects', {}).items():
            for p in projects:
                if p.get('platform') == 'twitter':
                    u = extract_twitter_username(p.get('url', '') or '')
                    if u and u.replace('@', '').strip().lower() == target:
                        tracked_users.append(int(user_id_str))
                        break
        return tracked_users
    except Exception:
        return []

def get_users_tracking_discord_channel(channel_id: str) -> List[int]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —â–æ –º–∞—é—Ç—å –ø—Ä–æ–µ–∫—Ç –∑ —Ü–∏–º Discord channel_id."""
    try:
        tracked_users: List[int] = []
        target = str(channel_id)
        for user_id_str, projects in project_manager.data.get('projects', {}).items():
            for p in projects:
                if p.get('platform') == 'discord':
                    ch = extract_discord_channel_id(p.get('url', '') or '')
                    if ch and ch == target:
                        tracked_users.append(int(user_id_str))
                        break
        return tracked_users
    except Exception:
        return []

@require_auth
async def handle_forwarded_channel_setup(update: Update, context: ContextTypes.DEFAULT_TYPE, fwd_chat) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –∑–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–∏."""
    user_id = update.effective_user.id
    try:
        chat_type = getattr(fwd_chat, 'type', '')
        chat_id = getattr(fwd_chat, 'id', None)
        title = getattr(fwd_chat, 'title', '') or getattr(fwd_chat, 'username', '') or 'Unknown'
        if not chat_id:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ ID –∫–∞–Ω–∞–ª—É —ñ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.")
            return
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        channel_id_str = str(chat_id)
        project_manager.set_forward_channel(user_id, channel_id_str)
        # –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–∞–Ω–∞–ª
        try:
            await context.bot.send_message(
                chat_id=normalize_chat_id(channel_id_str),
                text=f"‚úÖ –ö–∞–Ω–∞–ª –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á @{update.effective_user.username or user_id} –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—é–¥–∏.")
        except Exception as e:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –∫–∞–Ω–∞–ª: {e}")
        await update.message.reply_text(
            f"‚úÖ –ê–≤—Ç–æ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–ö–∞–Ω–∞–ª: {title}\nID: `{normalize_chat_id(channel_id_str)}`",
            parse_mode='Markdown'
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: {e}")

# ===================== –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è =====================
@require_auth
async def forward_enable_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if project_manager.enable_forward(user_id):
        status = project_manager.get_forward_status(user_id)
        channel_id = status.get('channel_id') or '‚Äî'
        await update.message.reply_text(
            f"üü¢ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ü–æ—Ç–æ—á–Ω–∏–π –∫–∞–Ω–∞–ª: `{channel_id}`",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —É–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.")

@require_auth
async def forward_disable_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if project_manager.disable_forward(user_id):
        await update.message.reply_text("üî¥ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.")

@require_auth
async def forward_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    status = project_manager.get_forward_status(user_id)
    enabled = status.get('enabled', False)
    channel_id = status.get('channel_id') or '‚Äî'
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else 'üî¥ –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª: `{channel_id}`\n\n"
        f"–Ø–∫ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞–Ω–∞–ª: –¥–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø—É —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–∞–º: @" + context.bot.username + " ping",
        parse_mode='Markdown'
    )

@require_auth
async def forward_set_channel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not context.args:
        await update.message.reply_text(
            "–í–∫–∞–∂—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É. –ü—Ä–∏–∫–ª–∞–¥: /forward_set_channel -1001234567890\n\n–ü—ñ–¥–∫–∞–∑–∫–∞: –ø—Ä–æ—Å—Ç—ñ—à–µ ‚Äî –∑–∞–π–¥—ñ—Ç—å —É –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫–∞–Ω–∞–ª —Ç–∞ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: @"
            + context.bot.username + " ping (–±–æ—Ç –∑–±–µ—Ä–µ ID –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)")
        return
    channel_id = context.args[0]
    if project_manager.set_forward_channel(user_id, str(channel_id)):
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ: `{channel_id}`",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞–Ω–∞–ª.")

@require_auth
async def forward_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    channel_id = project_manager.get_forward_channel(user_id)
    if not channel_id:
        await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ /forward_set_channel –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —É –∫–∞–Ω–∞–ª—ñ: @" + context.bot.username + " ping")
        return
    try:
        text = (
            "‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            "–¶–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞—à–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."
        )
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        data = {'chat_id': normalize_chat_id(channel_id), 'text': text}
        r = requests.post(url, data=data, timeout=5)
        if r.status_code == 200:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É –≤–∞—à –∫–∞–Ω–∞–ª –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —É –∫–∞–Ω–∞–ª: {r.status_code}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –í–∏–Ω—è—Ç–æ–∫: {e}")

def cleanup_old_tweets():
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Ç–≤—ñ—Ç–∏ –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 100)"""
    global global_sent_tweets
    
    for account in global_sent_tweets:
        if len(global_sent_tweets[account]) > 100:
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —Å–ø–∏—Å–æ–∫, —Å–æ—Ä—Ç—É—î–º–æ —Ç–∞ –∑–∞–ª–∏—à–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 100
            tweets_list = list(global_sent_tweets[account])
            tweets_list.sort(reverse=True)  # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ ID (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ –ø–µ—Ä—à–∏–º–∏)
            global_sent_tweets[account] = set(tweets_list[:100])
            logger.info(f"–û—á–∏—â–µ–Ω–æ —Å—Ç–∞—Ä—ñ —Ç–≤—ñ—Ç–∏ –¥–ª—è {account}, –∑–∞–ª–∏—à–µ–Ω–æ {len(global_sent_tweets[account])} —Ç–≤—ñ—Ç—ñ–≤")

 

def download_and_send_image(image_url: str, chat_id: str, caption: str = "") -> bool:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Telegram"""
    try:
        # –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è Twitter –∑–æ–±—Ä–∞–∂–µ–Ω—å —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if 'pbs.twimg.com/media/' in image_url and '?' not in image_url:
            image_url += '?format=jpg&name=medium'
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Referer': 'https://x.com/'
        }
        
        logger.info(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {image_url}")
        response = requests.get(image_url, headers=headers, timeout=15)
        response.raise_for_status()
        logger.info(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ, —Ä–æ–∑–º—ñ—Ä: {len(response.content)} –±–∞–π—Ç")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 20MB –¥–ª—è Telegram)
        if len(response.content) > 20 * 1024 * 1024:
            logger.warning(f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–µ: {len(response.content)} –±–∞–π—Ç")
            return False
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        content_type = response.headers.get('content-type', '')
        if 'jpeg' in content_type or 'jpg' in content_type:
            suffix = '.jpg'
        elif 'png' in content_type:
            suffix = '.png'
        elif 'webp' in content_type:
            suffix = '.webp'
        else:
            suffix = '.jpg'  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix=suffix) as temp_file:
            temp_file.write(response.content)
            temp_file_path = temp_file.name
        
        try:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Telegram API
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"
            
            with open(temp_file_path, 'rb') as photo_file:
                files = {'photo': photo_file}
                data = {
                    'chat_id': normalize_chat_id(chat_id),
                    'caption': caption[:1024] if caption else '',  # Telegram –æ–±–º–µ–∂—É—î caption –¥–æ 1024 —Å–∏–º–≤–æ–ª—ñ–≤
                    'parse_mode': 'Markdown'
                }
                
                response = requests.post(url, files=files, data=data, timeout=30)
                
                if response.status_code == 200:
                    logger.info(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª {chat_id}")
                    return True
                else:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {response.status_code}")
                    logger.error(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                    return False
                    
        finally:
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            try:
                os.unlink(temp_file_path)
            except:
                pass
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è/–≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return False

def get_main_menu_keyboard(user_id: int = None) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ—ó –ø—Ä–æ–µ–∫—Ç–∏", callback_data="my_projects")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç", callback_data="add_project")],
        [InlineKeyboardButton("üê¶ Selenium Twitter", callback_data="selenium_twitter")],
        [InlineKeyboardButton("üìú –Ü—Å—Ç–æ—Ä—ñ—è Discord", callback_data="discord_history")],
        [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="forward_settings")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="settings")]
    ]
    
    # –î–æ–¥–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤
    if user_id and access_manager.is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    return InlineKeyboardMarkup(keyboard)

def get_platform_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üê¶ Twitter/X", callback_data="platform_twitter")],
        [InlineKeyboardButton("üí¨ Discord", callback_data="platform_discord")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_projects_menu_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏"""
    projects = project_manager.get_user_projects(user_id)
    selenium_accounts = project_manager.get_selenium_accounts()
    
    keyboard = []
    
    # Twitter –ø—Ä–æ–µ–∫—Ç–∏
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    if twitter_projects:
        keyboard.append([InlineKeyboardButton("üê¶ Twitter –ø—Ä–æ–µ–∫—Ç–∏", callback_data="twitter_projects")])
    
    # Discord –ø—Ä–æ–µ–∫—Ç–∏
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    if discord_projects:
        keyboard.append([InlineKeyboardButton("üí¨ Discord –ø—Ä–æ–µ–∫—Ç–∏", callback_data="discord_projects")])
    
    # Selenium Twitter –∞–∫–∞—É–Ω—Ç–∏
    if selenium_accounts:
        keyboard.append([InlineKeyboardButton("üöÄ Selenium Twitter", callback_data="selenium_accounts")])
    
    # –ö–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Twitter", callback_data="add_twitter")])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Discord", callback_data="add_discord")])
    keyboard.append([InlineKeyboardButton("üöÄ –î–æ–¥–∞—Ç–∏ Selenium", callback_data="add_selenium")])
    
    # –ù–∞–∑–∞–¥
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_twitter_projects_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤"""
    projects = project_manager.get_user_projects(user_id)
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    
    keyboard = []
    
    for project in twitter_projects:
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –Ω–∞–∑–≤–∏
        name = project['name'][:20] + "..." if len(project['name']) > 20 else project['name']
        keyboard.append([
            InlineKeyboardButton(f"üê¶ {name}", callback_data=f"view_twitter_{project['id']}"),
            InlineKeyboardButton("‚ùå", callback_data=f"delete_twitter_{project['id']}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Twitter", callback_data="add_twitter")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_discord_projects_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤"""
    projects = project_manager.get_user_projects(user_id)
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    keyboard = []
    
    for project in discord_projects:
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –Ω–∞–∑–≤–∏
        name = project['name'][:20] + "..." if len(project['name']) > 20 else project['name']
        keyboard.append([
            InlineKeyboardButton(f"üí¨ {name}", callback_data=f"view_discord_{project['id']}"),
            InlineKeyboardButton("‚ùå", callback_data=f"delete_discord_{project['id']}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Discord", callback_data="add_discord")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_selenium_accounts_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É Selenium –∞–∫–∞—É–Ω—Ç—ñ–≤"""
    selenium_accounts = project_manager.get_selenium_accounts()
    
    keyboard = []
    
    for username in selenium_accounts:
        keyboard.append([
            InlineKeyboardButton(f"üöÄ @{username}", callback_data=f"view_selenium_{username}"),
            InlineKeyboardButton("‚ùå", callback_data=f"delete_selenium_{username}")
        ])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ Selenium", callback_data="add_selenium")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="projects_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_history_count_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    keyboard = [
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 5", callback_data="history_5")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 10", callback_data="history_10")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 20", callback_data="history_20")],
        [InlineKeyboardButton("üìÑ –û—Å—Ç–∞–Ω–Ω—ñ 50", callback_data="history_50")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_discord_channels_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ Discord –∫–∞–Ω–∞–ª–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    projects = project_manager.get_user_projects(user_id)
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    keyboard = []
    for project in discord_projects:
        keyboard.append([InlineKeyboardButton(
            f"üí¨ {project['name']}", 
            callback_data=f"channel_{project['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_forward_settings_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    forward_status = project_manager.get_forward_status(user_id)
    
    keyboard = []
    
    if forward_status['enabled']:
        keyboard.append([InlineKeyboardButton("üî¥ –í–∏–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="disable_forward")])
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="change_channel")])
    else:
        keyboard.append([InlineKeyboardButton("üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è", callback_data="enable_forward")])
        keyboard.append([InlineKeyboardButton("üìù –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data="set_channel")])
    
    keyboard.append([InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="auto_setup")])
    keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="forward_status")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def get_diagnostics_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ç–∞", callback_data="check_bot_status")],
        [InlineKeyboardButton("üì∫ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª—ñ–≤", callback_data="test_channels")],
        [InlineKeyboardButton("üîó Discord API", callback_data="test_discord_api")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data="reload_data")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_panel_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ"""
    keyboard = [
        [InlineKeyboardButton("üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ", callback_data="admin_users")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîß –°–∏—Å—Ç–µ–º–∞", callback_data="admin_system")],
        [InlineKeyboardButton("üìã –í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏", callback_data="admin_all_projects")],
        [InlineKeyboardButton("‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_create_for_user")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_users_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_list_users")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_add_user")],
        [InlineKeyboardButton("üëë –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞", callback_data="admin_add_admin")],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_search_user")],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data="admin_delete_user")],
        [InlineKeyboardButton("üîÑ –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–ª—å", callback_data="admin_change_role")],
        [InlineKeyboardButton("üîê –°–∫–∏–Ω—É—Ç–∏ –ø–∞—Ä–æ–ª—å", callback_data="admin_reset_password")],
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)", callback_data="admin_forward")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_user_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_admin_forward_keyboard(target_user_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    status = project_manager.get_forward_status(target_user_id)
    enabled = status.get('enabled', False)
    keyboard = []
    if enabled:
        keyboard.append([InlineKeyboardButton("üî¥ –í–∏–º–∫–Ω—É—Ç–∏", callback_data=f"admin_forward_disable_{target_user_id}")])
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data=f"admin_forward_set_{target_user_id}")])
    else:
        keyboard.append([InlineKeyboardButton("üü¢ –£–≤—ñ–º–∫–Ω—É—Ç–∏", callback_data=f"admin_forward_enable_{target_user_id}")])
        keyboard.append([InlineKeyboardButton("üìù –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª", callback_data=f"admin_forward_set_{target_user_id}")])
    keyboard.append([
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data=f"admin_forward_status_{target_user_id}"),
        InlineKeyboardButton("üß™ –¢–µ—Å—Ç", callback_data=f"admin_forward_test_{target_user_id}")
    ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
    return InlineKeyboardMarkup(keyboard)

def get_admin_system_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"""
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏", callback_data="admin_system_stats")],
        [InlineKeyboardButton("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏", callback_data="admin_system_logs")],
        [InlineKeyboardButton("üîÑ –û—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Å—ñ—ó", callback_data="admin_cleanup_sessions")],
        [InlineKeyboardButton("üíæ –°—Ç–≤–æ—Ä–∏—Ç–∏ –±–µ–∫–∞–ø", callback_data="admin_create_backup")],
        [InlineKeyboardButton("‚ö†Ô∏è –°–∫–∏–Ω—É—Ç–∏ —Å–∏—Å—Ç–µ–º—É", callback_data="admin_reset_system")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    return InlineKeyboardMarkup(keyboard)

def escape_markdown(text: str) -> str:
    """–ï–∫—Ä–∞–Ω—É–≤–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –¥–ª—è Markdown"""
    if not text:
        return ""
    return str(text).replace('*', '\\*').replace('_', '\\_').replace('`', '\\`').replace('[', '\\[').replace(']', '\\]')

def extract_twitter_username(url: str) -> str:
    """–í–∏—Ç—è–≥—Ç–∏ username –∑ Twitter URL"""
    try:
        # –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏ URL
        if 'twitter.com' in url or 'x.com' in url:
            # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ—Ç–æ–∫–æ–ª
            url = url.replace('https://', '').replace('http://', '')
            
            # –í–∏–¥–∞–ª—è—î–º–æ www
            if url.startswith('www.'):
                url = url[4:]
                
            # –í–∏—Ç—è–≥—É—î–º–æ username
            if url.startswith('twitter.com/'):
                username = url.split('/')[1]
            elif url.startswith('x.com/'):
                username = url.split('/')[1]
            else:
                return None
                
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            username = username.split('?')[0].split('#')[0]
            
            return username if username else None
            
        return None
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Twitter username: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É
    if access_manager.is_authorized(user_id):
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó
        access_manager.update_session_activity(user_id)
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        selenium_status = "üöÄ –ê–∫—Ç–∏–≤–Ω–∏–π" if selenium_twitter_monitor and selenium_twitter_monitor.monitoring_active else "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
        selenium_accounts = len(selenium_twitter_monitor.monitoring_accounts) if selenium_twitter_monitor else 0
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_role = access_manager.get_user_role(user_id)
        role_emoji = "üëë" if user_role == "admin" else "üë§"
        role_text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if user_role == "admin" else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤—ñ—Ç, {username}!\n\n"
            f"{role_emoji} **–†–æ–ª—å:** {role_text}\n"
            "‚úÖ –í–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n"
            f"üöÄ **Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:** {selenium_status}\n"
            f"üìä **–ê–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:** {selenium_accounts}\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó.",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤—ñ—Ç, {username}!\n\n"
            "üîê –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.\n"
            "–Ø–∫—â–æ –≤–∏ –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_id = update.effective_user.id
    username = update.effective_user.username or "Unknown"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
    if access_manager.is_authorized(user_id):
        # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó
        access_manager.update_session_activity(user_id)
        await update.message.reply_text(
            "‚úÖ –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ!",
            parse_mode='Markdown'
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ
    user_data = access_manager.get_user_by_telegram_id(user_id)
    if not user_data:
        await update.message.reply_text(
            "‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**\n\n"
            "–í–∞—à Telegram ID –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.",
            parse_mode='Markdown'
        )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–∫—Ç–∏–≤–Ω–∏–π
    if not user_data.get("is_active", True):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!**\n\n"
            "–í–∞—à –∞–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π.\n"
            "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            parse_mode='Markdown'
        )
        return
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –ø–∞—Ä–æ–ª—å
    await update.message.reply_text(
        "üîê **–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:**\n\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.",
        parse_mode='Markdown'
    )
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
    waiting_for_password[user_id] = True

async def logout_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ —Å–∏—Å—Ç–µ–º–∏"""
    user_id = update.effective_user.id
    
    if access_manager.is_authorized(user_id):
        access_manager.logout_user(user_id)
        await update.message.reply_text(
            "üëã **–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏!**\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.",
            parse_mode='Markdown'
        )

async def register_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not access_manager.check_permission(user_id, "can_manage_users"):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
            parse_mode='Markdown'
        )
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìù **–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /register <telegram_id> <username> [password]\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /register 123456789 JohnDoe mypassword",
            parse_mode='Markdown'
        )
        return
    
    try:
        target_telegram_id = int(context.args[0])
        username = context.args[1] if len(context.args) > 1 else ""
        password = context.args[2] if len(context.args) > 2 else None
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        new_user_id = access_manager.add_user(target_telegram_id, username, password)
        
        if new_user_id:
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π!**\n\n"
                f"‚Ä¢ Telegram ID: {target_telegram_id}\n"
                f"‚Ä¢ Username: {username}\n"
                f"‚Ä¢ User ID: {new_user_id}\n"
                f"‚Ä¢ –ü–∞—Ä–æ–ª—å: {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.",
                parse_mode='Markdown'
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
            "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /register 123456789 JohnDoe",
            parse_mode='Markdown'
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}",
            parse_mode='Markdown'
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–µ –≤—ñ–¥ –∫–∞–Ω–∞–ª—É)
    if not update.effective_user:
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –∫–∞–Ω–∞–ª
    if update.message.chat.type in ['channel', 'supergroup']:
        # –Ø–∫—â–æ —Ü–µ –∫–∞–Ω–∞–ª, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±–æ—Ç–∞ –ø—ñ–Ω–≥–Ω—É–ª–∏
        if update.message.text and '@' in update.message.text:
            # –®—É–∫–∞—î–º–æ username –±–æ—Ç–∞ –≤ —Ç–µ–∫—Å—Ç—ñ
            bot_username = context.bot.username
            if bot_username and f'@{bot_username}' in update.message.text:
                # –ë–æ—Ç–∞ –ø—ñ–Ω–≥–Ω—É–ª–∏ –≤ –∫–∞–Ω–∞–ª—ñ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
                await handle_channel_ping(update, context)
        return
        
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É/–≥—Ä—É–ø–∏
    # –Ø–∫—â–æ –∞–¥–º—ñ–Ω —É —Å—Ç–∞–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî –æ–±—Ä–æ–±–∏–º–æ –≤ —Å–ø–µ—Ü. —Ö–µ–Ω–¥–ª–µ—Ä—ñ –Ω–∏–∂—á–µ
    try:
        fwd_chat = getattr(update.message, 'forward_from_chat', None)
        if fwd_chat and update.message.chat.type == 'private':
            if not (user_id in user_states and user_states[user_id]['state'] == 'admin_forward_set_channel'):
                await handle_forwarded_channel_setup(update, context, fwd_chat)
                return
    except Exception:
        pass
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ—á—ñ–∫—É—î –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –¥–ª—è –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
    if user_id in waiting_for_password:
        # –°–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É
        if access_manager.authenticate_user(user_id, message_text):
            del waiting_for_password[user_id]
            # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Å–µ—Å—ñ—ó
            access_manager.update_session_activity(user_id)
            await update.message.reply_text(
                "‚úÖ **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!**\n\n"
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å!**\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                parse_mode='Markdown'
            )
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ –Ω–æ–≤—É —Å–∏—Å—Ç–µ–º—É
    if not access_manager.is_authorized(user_id):
        await update.message.reply_text(
            "üîê **–î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ!**\n\n"
            "–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.",
            parse_mode='Markdown'
        )
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    security_manager.update_user_activity(user_id)
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–∞–Ω –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
    if user_id in user_states:
        if user_states[user_id]['state'] == 'adding_project':
            await handle_project_creation(update, context)
        elif user_states[user_id]['state'] == 'setting_forward_channel':
            await handle_forward_channel_setting(update, context)
        elif user_states[user_id]['state'] == 'admin_forward_select_user':
            await handle_admin_forward_select_user(update, context)
        elif user_states[user_id]['state'] == 'admin_forward_set_channel':
            await handle_admin_forward_set_channel(update, context)
        elif user_states[user_id]['state'] == 'admin_creating_project_for_user':
            await handle_admin_create_project_for_user(update, context)
        elif user_states[user_id]['state'] == 'adding_twitter':
            await handle_twitter_addition(update, context)
        elif user_states[user_id]['state'] == 'adding_discord':
            await handle_discord_addition(update, context)
        elif user_states[user_id]['state'] == 'adding_selenium':
            await handle_selenium_addition(update, context)
        elif user_states[user_id]['state'] == 'admin_creating_user':
            await handle_admin_user_creation(update, context)
        elif user_states[user_id]['state'] == 'admin_creating_admin':
            await handle_admin_admin_creation(update, context)
        elif user_states[user_id]['state'] == 'admin_searching_user':
            await handle_admin_user_search(update, context)
        elif user_states[user_id]['state'] == 'admin_deleting_user':
            await handle_admin_user_deletion(update, context)
        elif user_states[user_id]['state'] == 'admin_changing_role':
            await handle_admin_role_change(update, context)
        elif user_states[user_id]['state'] == 'admin_resetting_password':
            await handle_admin_password_reset(update, context)
        elif user_states[user_id]['state'] == 'admin_resetting_system':
            await handle_admin_system_reset(update, context)
        return
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥–∏
    if message_text.startswith('/'):
        await handle_command(update, context, message_text)
    else:
        await update.message.reply_text(
            f"–í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {message_text}\n"
            f"–ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥\n\n"
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó:",
            reply_markup=get_main_menu_keyboard(user_id)
        )

async def handle_command(update: Update, context: ContextTypes.DEFAULT_TYPE, command: str) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥"""
    user_id = update.effective_user.id
    
    if command == '/status':
        time_left = security_manager.get_session_time_left(user_id)
        await update.message.reply_text(
            f"–°—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó:\n"
            f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π: {'–¢–∞–∫' if security_manager.is_user_authorized(user_id) else '–ù—ñ'}\n"
            f"–ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {time_left} —Å–µ–∫—É–Ω–¥"
        )
    elif command == '/logout':
        security_manager.deauthorize_user(user_id)
        await update.message.reply_text("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Å–∏—Å—Ç–µ–º–∏.")
    elif command == '/help':
        await update.message.reply_text(
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
            "/status - –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó\n"
            "/logout - –í–∏–π—Ç–∏ –∑ —Å–∏—Å—Ç–µ–º–∏\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É"
        )
    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏.")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ callback –∑–∞–ø–∏—Ç—ñ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    if not access_manager.is_authorized(user_id):
        await query.edit_message_text(
            "üîê **–î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ!**\n\n"
            "–í–∞—à–∞ —Å–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—è. –î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è.\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥—É –≤ —Å–∏—Å—Ç–µ–º—É.",
            parse_mode='Markdown'
        )
        return
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    access_manager.update_session_activity(user_id)
    
    # –î–æ–¥–∞—î–º–æ/–æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if not project_manager.get_user_data(user_id):
        project_manager.add_user(user_id, {
            'first_name': update.effective_user.first_name,
            'username': update.effective_user.username
        })
    else:
        project_manager.update_user_last_seen(user_id)
    
    callback_data = query.data
    
    if callback_data == "main_menu":
        await query.edit_message_text(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    elif callback_data == "add_project":
        await query.edit_message_text(
            "‚ûï –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É\n\n–û–±–µ—Ä—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:",
            reply_markup=get_platform_keyboard()
        )
    elif callback_data == "my_projects":
        await query.edit_message_text(
            "üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
            reply_markup=get_projects_menu_keyboard(user_id)
        )
    elif callback_data == "projects_menu":
        await query.edit_message_text(
            "üìã –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
            reply_markup=get_projects_menu_keyboard(user_id)
        )
    elif callback_data == "twitter_projects":
        await query.edit_message_text(
            "üê¶ Twitter –ø—Ä–æ–µ–∫—Ç–∏\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=get_twitter_projects_keyboard(user_id)
        )
    elif callback_data == "discord_projects":
        await query.edit_message_text(
            "üí¨ Discord –ø—Ä–æ–µ–∫—Ç–∏\n\n–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=get_discord_projects_keyboard(user_id)
        )
    elif callback_data == "selenium_accounts":
        await query.edit_message_text(
            "üöÄ Selenium Twitter –∞–∫–∞—É–Ω—Ç–∏\n\n–û–±–µ—Ä—ñ—Ç—å –∞–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=get_selenium_accounts_keyboard()
        )
    elif callback_data == "add_twitter":
        user_states[user_id] = {
            'state': 'adding_twitter',
            'data': {}
        }
        await query.edit_message_text(
            "üê¶ –î–æ–¥–∞–≤–∞–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞\n\n–í–≤–µ–¥—ñ—Ç—å username –∞–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ @):"
        )
    elif callback_data == "add_discord":
        user_states[user_id] = {
            'state': 'adding_discord',
            'data': {}
        }
        await query.edit_message_text(
            "üí¨ –î–æ–¥–∞–≤–∞–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É\n\n–í–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É:"
        )
    elif callback_data == "add_selenium":
        user_states[user_id] = {
            'state': 'adding_selenium',
            'data': {}
        }
        await query.edit_message_text(
            "üöÄ –î–æ–¥–∞–≤–∞–Ω–Ω—è Selenium Twitter –∞–∫–∞—É–Ω—Ç–∞\n\n–í–≤–µ–¥—ñ—Ç—å username –∞–∫–∞—É–Ω—Ç–∞ (–±–µ–∑ @):"
        )
    elif callback_data == "platform_twitter":
        user_states[user_id] = {
            'state': 'adding_project',
            'data': {'platform': 'twitter'}
        }
        await query.edit_message_text(
            "üê¶ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É Twitter/X\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:"
        )
    elif callback_data == "platform_discord":
        user_states[user_id] = {
            'state': 'adding_project',
            'data': {'platform': 'discord'}
        }
        await query.edit_message_text(
            "üí¨ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É Discord\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:"
        )
    elif callback_data == "help":
        help_text = (
            "‚ùì –î–æ–ø–æ–º–æ–≥–∞\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n"
            "‚Ä¢ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É\n"
            "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ Twitter/X —Ç–∞ Discord\n"
            "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –±–µ–∑–ø–µ–∫–∞ –∑ –ø–∞—Ä–æ–ª–µ–º\n\n"
            "üîê –ë–µ–∑–ø–µ–∫–∞:\n"
            "‚Ä¢ –°–µ—Å—ñ—è –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n"
            "‚Ä¢ –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å\n\n"
            "üìù –§–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω—å:\n"
            "‚Ä¢ Twitter: https://twitter.com/username\n"
            "‚Ä¢ Discord: https://discord.com/channels/server_id/channel_id"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            help_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif callback_data == "selenium_twitter":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        selenium_status = "üöÄ –ê–∫—Ç–∏–≤–Ω–∏–π" if selenium_twitter_monitor and selenium_twitter_monitor.monitoring_active else "‚è∏Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
        selenium_accounts = len(selenium_twitter_monitor.monitoring_accounts) if selenium_twitter_monitor else 0
        
        selenium_text = (
            "üê¶ **Selenium Twitter –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥**\n\n"
            f"üìä **–°—Ç–∞—Ç—É—Å:** {selenium_status}\n"
            f"üë• **–ê–∫–∞—É–Ω—Ç—ñ–≤:** {selenium_accounts}\n"
            f"üîÑ **–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫:** ‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
            "üîß **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n"
            "‚Ä¢ `/selenium_auth` - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤ Twitter\n"
            "‚Ä¢ `/selenium_add username` - –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ `/selenium_test username` - –¢–µ—Å—Ç—É–≤–∞—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ `/selenium_start` - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n"
            "‚Ä¢ `/selenium_stop` - –ó—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥\n\n"
            "üìù **–ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:**\n"
            "1. `/selenium_auth` - —É–≤—ñ–π–¥—ñ—Ç—å –≤ Twitter\n"
            "2. `/selenium_add pilk_xz` - –¥–æ–¥–∞–π—Ç–µ –∞–∫–∞—É–Ω—Ç\n"
            "3. `/selenium_test pilk_xz` - –ø—Ä–æ—Ç–µ—Å—Ç—É–π—Ç–µ\n"
            "4. –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!\n\n"
            "üí° **–ü–µ—Ä–µ–≤–∞–≥–∏ Selenium:**\n"
            "‚Ä¢ –†–µ–∞–ª—å–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä\n"
            "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø\n"
            "‚Ä¢ –ù–∞–¥—ñ–π–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥\n"
            "‚Ä¢ –û–±—Ö—ñ–¥ –æ–±–º–µ–∂–µ–Ω—å API\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–∞–ø—É—Å–∫ –∑ –±–æ—Ç–æ–º"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            selenium_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif callback_data.startswith("delete_selenium_"):
        username = callback_data.replace("delete_selenium_", "")
        try:
            project_manager.remove_selenium_account(username)
            if selenium_twitter_monitor:
                selenium_twitter_monitor.remove_account(username)
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω
            sync_monitors_with_projects()
            await query.edit_message_text(
                f"‚úÖ Selenium –∞–∫–∞—É–Ω—Ç @{username} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!",
                reply_markup=get_selenium_accounts_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞: {e}",
                reply_markup=get_selenium_accounts_keyboard()
            )
    elif callback_data.startswith("view_twitter_"):
        project_id = callback_data.replace("view_twitter_", "")
        project = project_manager.get_project_by_id(user_id, project_id)
        if project:
            text = f"üê¶ **Twitter –ø—Ä–æ–µ–∫—Ç: {project['name']}**\n\n"
            text += f"üìù **–û–ø–∏—Å:** {project.get('description', '–ù–µ–º–∞—î –æ–ø–∏—Å—É')}\n"
            text += f"üîó **URL:** {project.get('url', '–ù–µ–º–∞—î URL')}\n"
            text += f"üìÖ **–°—Ç–≤–æ—Ä–µ–Ω–æ:** {project.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–Ω–∏–π' if project.get('is_active', True) else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}"
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_twitter_{project_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="twitter_projects")]
            ]
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    elif callback_data.startswith("view_discord_"):
        project_id = callback_data.replace("view_discord_", "")
        project = project_manager.get_project_by_id(user_id, project_id)
        if project:
            text = f"üí¨ **Discord –ø—Ä–æ–µ–∫—Ç: {project['name']}**\n\n"
            text += f"üìù **–û–ø–∏—Å:** {project.get('description', '–ù–µ–º–∞—î –æ–ø–∏—Å—É')}\n"
            text += f"üîó **URL:** {project.get('url', '–ù–µ–º–∞—î URL')}\n"
            text += f"üìÖ **–°—Ç–≤–æ—Ä–µ–Ω–æ:** {project.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–Ω–∏–π' if project.get('is_active', True) else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}"
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_discord_{project_id}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="discord_projects")]
            ]
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    elif callback_data.startswith("view_selenium_"):
        username = callback_data.replace("view_selenium_", "")
        selenium_accounts = project_manager.get_selenium_accounts()
        if username in selenium_accounts:
            account_data = selenium_accounts[username]
            text = f"üöÄ **Selenium Twitter: @{username}**\n\n"
            text += f"üìÖ **–î–æ–¥–∞–Ω–æ:** {account_data.get('added_at', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üë§ **–î–æ–¥–∞–≤:** {account_data.get('added_by', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
            text += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–Ω–∏–π' if account_data.get('is_active', True) else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}\n"
            text += f"‚è∞ **–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:** {account_data.get('last_checked', '–ù—ñ–∫–æ–ª–∏')}"
            
            keyboard = [
                [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_selenium_{username}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="selenium_accounts")]
            ]
            await query.edit_message_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
    elif callback_data == "account_manager":
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
        projects = project_manager.get_user_projects(user_id)
        
        if not projects:
            await query.edit_message_text(
                "üîß **–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤**\n\n‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.\n\n–î–æ–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
        twitter_projects = [p for p in projects if p['platform'] == 'twitter']
        discord_projects = [p for p in projects if p['platform'] == 'discord']
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫
        text = "üîß **–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤**\n\n"
        
        if twitter_projects:
            text += "üê¶ **Twitter/X –∞–∫–∞—É–Ω—Ç–∏:**\n"
            for i, project in enumerate(twitter_projects, 1):
                username = extract_twitter_username(project['url'])
                text += f"{i}. @{username} ({project['name']})\n"
            text += "\n"
        
        if discord_projects:
            text += "üí¨ **Discord –∫–∞–Ω–∞–ª–∏:**\n"
            for i, project in enumerate(discord_projects, 1):
                channel_id = extract_discord_channel_id(project['url'])
                text += f"{i}. –ö–∞–Ω–∞–ª {channel_id} ({project['name']})\n"
            text += "\n"
        
        # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        text += "üîß **–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**\n"
        text += "‚Ä¢ /remove_twitter username - –≤–∏–¥–∞–ª–∏—Ç–∏ Twitter –∞–∫–∞—É–Ω—Ç\n"
        text += "‚Ä¢ /remove_discord channel_id - –≤–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª\n"
        text += "‚Ä¢ /accounts - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    elif callback_data == "discord_history":
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î Discord –ø—Ä–æ–µ–∫—Ç–∏
        projects = project_manager.get_user_projects(user_id)
        discord_projects = [p for p in projects if p['platform'] == 'discord']
        
        if not discord_projects:
            await query.edit_message_text(
                "üìú –Ü—Å—Ç–æ—Ä—ñ—è Discord\n\n‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó.\n\n–î–æ–¥–∞–π—Ç–µ Discord –ø—Ä–æ–µ–∫—Ç —Å–ø–æ—á–∞—Ç–∫—É.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "üìú –Ü—Å—Ç–æ—Ä—ñ—è Discord\n\n–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:",
                reply_markup=get_discord_channels_keyboard(user_id)
            )
    elif callback_data.startswith("channel_"):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –∫–∞–Ω–∞–ª –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
        project_id = int(callback_data.split("_")[1])
        project = project_manager.get_project_by_id(user_id, project_id)
        
        if project:
            user_states[user_id] = {
                'state': 'viewing_history',
                'data': {'project': project}
            }
            await query.edit_message_text(
                f"üìú –Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {project['name']}\n\n–û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
                reply_markup=get_history_count_keyboard()
            )
    elif callback_data.startswith("history_"):
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        count = int(callback_data.split("_")[1])
        await handle_discord_history(update, context, count)
    elif callback_data == "settings":
        stats = project_manager.get_statistics()
        user_projects = project_manager.get_user_projects(user_id)
        
        settings_text = (
            "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
            f"üîê –ß–∞—Å –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: {security_manager.get_session_time_left(user_id)} —Å–µ–∫—É–Ω–¥\n"
            f"üìä –í–∞—à—ñ –ø—Ä–æ–µ–∫—Ç–∏: {len(user_projects)}\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
            f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
            f"üí¨ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['discord_projects']}\n"
            f"üê¶ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['twitter_projects']}\n"
            f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –¥–∞–Ω–∏—Ö: {stats['data_file_size']} –±–∞–π—Ç\n"
            f"üïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {stats['last_updated'][:19]}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n"
            "‚Ä¢ –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è\n"
            "‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Å–µ—Å—ñ—ó\n"
            "‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"
        )
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(
            settings_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif callback_data == "forward_settings":
        forward_status = project_manager.get_forward_status(user_id)
        
        if forward_status['enabled']:
            status_text = f"üì¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n‚úÖ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ\nüì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id']}\nüïí –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {forward_status['created_at'][:19] if forward_status['created_at'] else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n\nüí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª, –Ω–µ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
        else:
            status_text = "üì¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n‚ùå –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ\n\n–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –∑ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤.\n\nüí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª."
        
        await query.edit_message_text(
            status_text,
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "enable_forward":
        if project_manager.enable_forward(user_id):
            await query.edit_message_text(
                "‚úÖ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
    elif callback_data == "disable_forward":
        if project_manager.disable_forward(user_id):
            await query.edit_message_text(
                "üî¥ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è",
                reply_markup=get_forward_settings_keyboard(user_id)
            )
    elif callback_data in ["set_channel", "change_channel"]:
        user_states[user_id] = {
            'state': 'setting_forward_channel',
            'data': {}
        }
        await query.edit_message_text(
            "üìù –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            "**–°–ø–æ—Å—ñ–± 1 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "1. –î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –ü—ñ–Ω–≥–Ω—ñ—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ: @bot_username\n"
            "3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç—É—î –∫–∞–Ω–∞–ª\n\n"
            "**–°–ø–æ—Å—ñ–± 2 - –†—É—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:**\n"
            "–í–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É –∞–±–æ username –∫–∞–Ω–∞–ª—É:\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏:\n"
            "‚Ä¢ @channel_username\n"
            "‚Ä¢ -1001234567890 (ID –∫–∞–Ω–∞–ª—É)\n"
            "‚Ä¢ channel_username (–±–µ–∑ @)\n\n"
            "üí° –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!"
        )
    elif callback_data == "auto_setup":
        bot_username = context.bot.username
        await query.edit_message_text(
            f"ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É**\n\n"
            f"–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É:\n\n"
            f"1Ô∏è‚É£ **–î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª**\n"
            f"   ‚Ä¢ –î–æ–¥–∞–π—Ç–µ @{bot_username} –≤ –∫–∞–Ω–∞–ª —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"   ‚Ä¢ –ù–∞–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n\n"
            f"2Ô∏è‚É£ **–ü—ñ–Ω–≥–Ω—ñ—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ**\n"
            f"   ‚Ä¢ –ù–∞–ø–∏—à—ñ—Ç—å –≤ –∫–∞–Ω–∞–ª—ñ: @{bot_username}\n"
            f"   ‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç—É—î –∫–∞–Ω–∞–ª\n\n"
            f"3Ô∏è‚É£ **–ì–æ—Ç–æ–≤–æ!**\n"
            f"   ‚Ä¢ –ö–∞–Ω–∞–ª –±—É–¥–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n"
            f"   ‚Ä¢ –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è\n\n"
            f"üí° **–ü–µ—Ä–µ–≤–∞–≥–∏:**\n"
            f"‚Ä¢ –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏ ID –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n"
            f"‚Ä¢ –ú–∏—Ç—Ç—î–≤–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è",
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "forward_status":
        forward_status = project_manager.get_forward_status(user_id)
        user_projects = project_manager.get_user_projects(user_id)
        discord_projects = [p for p in user_projects if p['platform'] == 'discord']
        
        status_text = (
            f"üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if forward_status['enabled'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id'] or '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"
            f"üìã Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(discord_projects)}\n"
            f"üïí –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: {forward_status['created_at'][:19] if forward_status['created_at'] else '–ù–µ–≤—ñ–¥–æ–º–æ'}\n\n"
            f"üí° –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –≤ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª, –Ω–µ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n"
        )
        
        if forward_status['enabled'] and discord_projects:
            status_text += "üì¢ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –∑:\n"
            for project in discord_projects:
                status_text += f"‚Ä¢ {project['name']}\n"
        elif not discord_projects:
            status_text += "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–º–∞—î Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."
        
        await query.edit_message_text(
            status_text,
            reply_markup=get_forward_settings_keyboard(user_id)
        )
    elif callback_data == "diagnostics":
        diagnostics_text = (
            "üîß **–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:\n\n"
            "üîç **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ç–∞** - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ —Ç–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è\n"
            "üì∫ **–¢–µ—Å—Ç –∫–∞–Ω–∞–ª—ñ–≤** - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—ñ–≤\n"
            "üîó **Discord API** - —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Discord\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –¥–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏\n"
            "üîÑ **–ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏** - –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ"
        )
        await query.edit_message_text(
            diagnostics_text,
            reply_markup=get_diagnostics_keyboard()
        )
    elif callback_data == "check_bot_status":
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
            bot_info = await context.bot.get_me()
            bot_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            auth_users = len(security_manager.authorized_users)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            discord_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if discord_monitor else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"
            
            status_text = (
                f"üîç **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
                f"ü§ñ –ë–æ—Ç: {bot_status}\n"
                f"üìõ –Ü–º'—è: {bot_info.first_name}\n"
                f"üÜî ID: {bot_info.id}\n"
                f"üë§ Username: @{bot_info.username}\n\n"
                f"üë• –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {auth_users}\n"
                f"üîó Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: {discord_status}\n"
                f"üìä –ü—Ä–æ–µ–∫—Ç—ñ–≤: {len(project_manager.get_user_projects(user_id))}\n"
                f"üïí –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            
            await query.edit_message_text(
                status_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –±–æ—Ç–∞**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "test_channels":
        try:
            forward_channel = project_manager.get_forward_channel(user_id)
            
            if forward_channel:
                # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                test_message = (
                    f"üß™ **–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è**\n\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: {forward_channel}\n"
                    f"üë§ –í—ñ–¥: {update.effective_user.first_name}\n"
                    f"üïí –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"‚úÖ –Ø–∫—â–æ –≤–∏ –±–∞—á–∏—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–∞–Ω–∞–ª –ø—Ä–∞—Ü—é—î!"
                )
                
                await context.bot.send_message(
                    chat_id=forward_channel,
                    text=test_message,
                    parse_mode='Markdown'
                )
                
                result_text = f"‚úÖ **–¢–µ—Å—Ç –∫–∞–Ω–∞–ª—É –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!**\n\nüì∫ –ö–∞–Ω–∞–ª: `{forward_channel}`\nüì§ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ"
            else:
                result_text = "‚ùå **–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**\n\n–°–ø–æ—á–∞—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö."
            
            await query.edit_message_text(
                result_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∫–∞–Ω–∞–ª—É**\n\n{str(e)}\n\nüí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:\n‚Ä¢ –ß–∏ –¥–æ–¥–∞–Ω–æ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª\n‚Ä¢ –ß–∏ —î —É –±–æ—Ç–∞ –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n‚Ä¢ –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–∞–Ω–∞–ª—É",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "test_discord_api":
        try:
            if not DISCORD_AUTHORIZATION:
                await query.edit_message_text(
                    "‚ùå **Discord API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ**\n\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å AUTHORIZATION —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª—ñ",
                    reply_markup=get_diagnostics_keyboard()
                )
                return
            
            # –¢–µ—Å—Ç—É—î–º–æ Discord API
            import aiohttp
            headers = {
                'Authorization': DISCORD_AUTHORIZATION,
                'User-Agent': 'DiscordBot (https://github.com/discord/discord-api-docs, 1.0)'
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.get('https://discord.com/api/v10/users/@me', headers=headers) as response:
                    if response.status == 200:
                        user_data = await response.json()
                        result_text = (
                            f"‚úÖ **Discord API –ø—Ä–∞—Ü—é—î**\n\n"
                            f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {user_data.get('username', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                            f"üÜî ID: {user_data.get('id', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                            f"üìß Email: {user_data.get('email', '–ü—Ä–∏—Ö–æ–≤–∞–Ω–æ')}\n"
                            f"üîê –í–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π: {'‚úÖ' if user_data.get('verified', False) else '‚ùå'}\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {response.status}"
                        )
                    else:
                        result_text = f"‚ùå **Discord API –ø–æ–º–∏–ª–∫–∞**\n\n–°—Ç–∞—Ç—É—Å: {response.status}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {await response.text()}"
            
            await query.edit_message_text(
                result_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ Discord API**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "show_stats":
        try:
            stats = project_manager.get_statistics()
            user_projects = project_manager.get_user_projects(user_id)
            discord_projects = [p for p in user_projects if p['platform'] == 'discord']
            forward_status = project_manager.get_forward_status(user_id)
            
            # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            sent_messages = project_manager.data['settings'].get('sent_messages', {})
            total_tracked = sum(
                len(channel_messages) 
                for user_messages in sent_messages.values() 
                for channel_messages in user_messages.values()
            )
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
                f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
                f"üîó Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len(discord_projects)}\n"
                f"üê¶ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {len([p for p in user_projects if p['platform'] == 'twitter'])}\n\n"
                f"üì¢ **–ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è:**\n"
                f"üîÑ –°—Ç–∞—Ç—É—Å: {'‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ' if forward_status['enabled'] else '‚ùå –í–∏–º–∫–Ω–µ–Ω–æ'}\n"
                f"üì∫ –ö–∞–Ω–∞–ª: {forward_status['channel_id'] or '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n\n"
                f"üíæ **–î–∞–Ω—ñ:**\n"
                f"üìÅ –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {stats.get('data_size', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
                f"üì® –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {total_tracked}\n"
                f"üïí –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {stats.get('last_update', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    elif callback_data == "reload_data":
        try:
            # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            project_manager.load_data()
            # –ü—Ä–æ–≤–æ–¥–∏–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
            sync_monitors_with_projects()
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
            if discord_monitor:
                discord_monitor.channels.clear()
                for user_id_str, projects in project_manager.data['projects'].items():
                    for project in projects:
                        if project['platform'] == 'discord':
                            channel_id = project['link'].split('/')[-1]
                            discord_monitor.add_channel(channel_id)
            
            await query.edit_message_text(
                "üîÑ **–î–∞–Ω—ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ**\n\n‚úÖ –ü—Ä–æ–µ–∫—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ\n‚úÖ Discord –∫–∞–Ω–∞–ª–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ\n‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ",
                reply_markup=get_diagnostics_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è**\n\n{str(e)}",
                reply_markup=get_diagnostics_keyboard()
            )
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ –º–µ–Ω—é: Twitter
    elif callback_data.startswith("delete_twitter_"):
        project_id = int(callback_data.split('_')[-1])
        project = project_manager.get_project_by_id(user_id, project_id)
        if not project:
            await query.edit_message_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_twitter_projects_keyboard(user_id))
            return
        username = extract_twitter_username(project.get('url', ''))
        if project_manager.remove_project(user_id, project_id):
            # –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—å–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞ –≤—ñ–¥—Ä–∞–∑—É
            try:
                if twitter_monitor and username:
                    twitter_monitor.remove_account(username)
            except Exception:
                pass
            if selenium_twitter_monitor and username in getattr(selenium_twitter_monitor, 'monitoring_accounts', set()):
                selenium_twitter_monitor.monitoring_accounts.discard(username)
                if username in selenium_twitter_monitor.seen_tweets:
                    del selenium_twitter_monitor.seen_tweets[username]
            # –¢–∞–∫–æ–∂ –ø—Ä–∏–±–µ—Ä–µ–º–æ —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Selenium –∞–∫–∞—É–Ω—Ç—ñ–≤, —è–∫—â–æ —Ü–µ –±—É–≤ –≤—ñ–Ω
            try:
                project_manager.remove_selenium_account(username)
            except Exception:
                pass
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω
            sync_monitors_with_projects()
            await query.edit_message_text(
                f"‚úÖ Twitter –∞–∫–∞—É–Ω—Ç @{username} –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.",
                reply_markup=get_twitter_projects_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Twitter –ø—Ä–æ–µ–∫—Ç—É.",
                reply_markup=get_twitter_projects_keyboard(user_id)
            )
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∑ –º–µ–Ω—é: Discord
    elif callback_data.startswith("delete_discord_"):
        project_id = int(callback_data.split('_')[-1])
        project = project_manager.get_project_by_id(user_id, project_id)
        if not project:
            await query.edit_message_text("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_discord_projects_keyboard(user_id))
            return
        channel_id = extract_discord_channel_id(project.get('url', ''))
        if project_manager.remove_project(user_id, project_id):
            # –ó—É–ø–∏–Ω—è—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É –≤—ñ–¥—Ä–∞–∑—É
            if discord_monitor and channel_id in getattr(discord_monitor, 'monitoring_channels', set()):
                discord_monitor.monitoring_channels.discard(channel_id)
                if channel_id in discord_monitor.last_message_ids:
                    del discord_monitor.last_message_ids[channel_id]
            # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–º—ñ–Ω
            sync_monitors_with_projects()
            await query.edit_message_text(
                f"‚úÖ Discord –∫–∞–Ω–∞–ª {channel_id} –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.",
                reply_markup=get_discord_projects_keyboard(user_id)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Discord –ø—Ä–æ–µ–∫—Ç—É.",
                reply_markup=get_discord_projects_keyboard(user_id)
            )
    
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –ø–∞–Ω–µ–ª—ñ
    elif callback_data == "admin_panel":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ü—ñ—î—ó –ø–∞–Ω–µ–ª—ñ.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        await query.edit_message_text(
            "üëë **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:",
            reply_markup=get_admin_panel_keyboard()
        )
    elif callback_data == "admin_users":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
            
        await query.edit_message_text(
            "üë• **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏**\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=get_admin_users_keyboard()
        )
    elif callback_data == "admin_create_for_user":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!", reply_markup=get_main_menu_keyboard(user_id))
            return
        # –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫: –≤–≤–µ—Å—Ç–∏ Telegram ID —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states[user_id] = {
            'state': 'admin_creating_project_for_user',
            'data': {'step': 'telegram_id'}
        }
        await query.edit_message_text(
            "‚ûï **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel")]])
        )
    elif callback_data == "admin_forward":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        # –ó–∞–ø–∏—Ç—É—î–º–æ target user id
        user_states[user_id] = {
            'state': 'admin_forward_select_user',
            'data': {}
        }
        await query.edit_message_text(
            "üîÅ **–ö–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)**\n\n–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")]])
        )
    elif callback_data == "admin_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
            
        try:
            stats = project_manager.get_project_statistics(user_id)
            users_list = project_manager.get_all_users_with_projects(user_id)
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏**\n\n"
                f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['active_users']}\n"
                f"üìã –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
                f"üê¶ Twitter –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['twitter_projects']}\n"
                f"üí¨ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['discord_projects']}\n"
                f"üöÄ Selenium –∞–∫–∞—É–Ω—Ç—ñ–≤: {stats['selenium_accounts']}\n\n"
                f"üëë **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:** {len(access_manager.get_all_admins())}\n"
                f"üë§ **–ó–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {len(access_manager.get_all_users_by_role('user'))}"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_admin_panel_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_admin_panel_keyboard()
            )
    elif callback_data == "admin_list_users":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
            
        try:
            all_users = access_manager.get_all_users()
            
            if not all_users:
                await query.edit_message_text(
                    "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
                    "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=get_admin_users_keyboard()
                )
                return
            
            users_text = "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
            
            for i, user in enumerate(all_users[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 10
                role_emoji = "üëë" if user.get('role', 'user') == 'admin' else "üë§"
                status_emoji = "‚úÖ" if user.get('is_active', True) else "‚ùå"
                
                users_text += (
                    f"{i}. {role_emoji} {user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\n"
                    f"   ID: {user.get('telegram_id')}\n"
                    f"   –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                    f"   –°—Ç–≤–æ—Ä–µ–Ω–æ: {user.get('created_at', '')[:10]}\n\n"
                )
            
            if len(all_users) > 10:
                users_text += f"... —Ç–∞ —â–µ {len(all_users) - 10} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
            
            await query.edit_message_text(
                users_text,
                reply_markup=get_admin_users_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n{str(e)}",
                reply_markup=get_admin_users_keyboard()
            )
    elif callback_data == "admin_all_projects":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
            
        try:
            all_projects = project_manager.get_all_projects(user_id)
            total_projects = sum(len(projects) for projects in all_projects.values())
            
            if total_projects == 0:
                await query.edit_message_text(
                    "üìã **–í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏**\n\n"
                    "–ü—Ä–æ–µ–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=get_admin_panel_keyboard()
                )
                return
            
            projects_text = f"üìã **–í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏** (–í—Å—å–æ–≥–æ: {total_projects})\n\n"
            
            shown_projects = 0
            for user_id_str, projects in all_projects.items():
                if shown_projects >= 5:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 5 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                    break
                    
                user_data = access_manager.get_user_by_telegram_id(int(user_id_str))
                username = user_data.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ') if user_data else '–ù–µ–≤—ñ–¥–æ–º–∏–π'
                
                projects_text += f"üë§ **{username}** ({len(projects)} –ø—Ä–æ–µ–∫—Ç—ñ–≤):\n"
                
                for project in projects[:3]:  # –ü–æ 3 –ø—Ä–æ–µ–∫—Ç–∏ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    platform_emoji = "üê¶" if project.get('platform') == 'twitter' else "üí¨"
                    projects_text += f"   {platform_emoji} {project.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}\n"
                
                if len(projects) > 3:
                    projects_text += f"   ... —Ç–∞ —â–µ {len(projects) - 3} –ø—Ä–æ–µ–∫—Ç—ñ–≤\n"
                
                projects_text += "\n"
                shown_projects += 1
            
            if len(all_projects) > 5:
                projects_text += f"... —Ç–∞ —â–µ {len(all_projects) - 5} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏"
            
            await query.edit_message_text(
                projects_text,
                reply_markup=get_admin_panel_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤**\n\n{str(e)}",
                reply_markup=get_admin_panel_keyboard()
            )
    elif callback_data == "admin_add_user":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states[user_id] = {
            'state': 'admin_creating_user',
            'data': {'step': 'telegram_id'}
        }
        
        await query.edit_message_text(
            "üë§ **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_add_admin":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_states[user_id] = {
            'state': 'admin_creating_admin',
            'data': {'step': 'telegram_id'}
        }
        
        await query.edit_message_text(
            "üëë **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_search_user":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø–æ—à—É–∫—É
        user_states[user_id] = {
            'state': 'admin_searching_user',
            'data': {}
        }
        
        await query.edit_message_text(
            "üîç **–ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å username –∞–±–æ Telegram ID –¥–ª—è –ø–æ—à—É–∫—É:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥–∏:**\n"
            "‚Ä¢ JohnDoe (–ø–æ—à—É–∫ –∑–∞ username)\n"
            "‚Ä¢ 123456789 (–ø–æ—à—É–∫ –∑–∞ Telegram ID)",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_delete_user":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        user_states[user_id] = {
            'state': 'admin_deleting_user',
            'data': {}
        }
        
        await query.edit_message_text(
            "üóëÔ∏è **–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "‚ö†Ô∏è **–£–í–ê–ì–ê!** –¶—è –¥—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é!\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_change_role":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ
        user_states[user_id] = {
            'state': 'admin_changing_role',
            'data': {'step': 'telegram_id'}
        }
        
        await query.edit_message_text(
            "üîÑ **–ó–º—ñ–Ω–∞ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_reset_password":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é
        user_states[user_id] = {
            'state': 'admin_resetting_password',
            'data': {'step': 'telegram_id'}
        }
        
        await query.edit_message_text(
            "üîê **–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n\n"
            "üí° **–ü—Ä–∏–∫–ª–∞–¥:** 123456789",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
            ]])
        )
    elif callback_data == "admin_user_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            stats = access_manager.get_user_statistics()
            
            stats_text = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
                f"üë• **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {stats['active_users']}\n"
                f"‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö: {stats['inactive_users']}\n\n"
                f"üëë **–ó–∞ —Ä–æ–ª—è–º–∏:**\n"
                f"‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {stats['admin_users']}\n"
                f"‚Ä¢ –ó–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['regular_users']}\n\n"
                f"üü¢ **–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:**\n"
                f"‚Ä¢ –û–Ω–ª–∞–π–Ω –∑–∞—Ä–∞–∑: {stats['online_users']}\n"
                f"‚Ä¢ –í—Ö–æ–¥–∏–ª–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥: {stats['recent_logins']}"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_admin_users_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_admin_users_keyboard()
            )
    elif callback_data == "admin_system_stats":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            stats = access_manager.get_system_statistics()
            
            stats_text = (
                f"üìä **–°–∏—Å—Ç–µ–º–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**\n\n"
                f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {stats['total_users']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π: {stats['active_sessions']}\n\n"
                f"üìã **–ü—Ä–æ–µ–∫—Ç–∏:**\n"
                f"‚Ä¢ –í—Å—å–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—ñ–≤: {stats['total_projects']}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤: {stats['active_monitors']}\n\n"
                f"‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {stats['system_uptime']}\n"
                f"‚Ä¢ –û—Å—Ç–∞–Ω–Ω—ñ–π –±–µ–∫–∞–ø: {stats['last_backup']}\n"
                f"‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ö–æ–≤–∏—â–∞: {stats['storage_usage']} —Å–∏–º–≤–æ–ª—ñ–≤"
            )
            
            await query.edit_message_text(
                stats_text,
                reply_markup=get_admin_system_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**\n\n{str(e)}",
                reply_markup=get_admin_system_keyboard()
            )
    elif callback_data == "admin_system_logs":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            logs = access_manager.get_logs(20)  # –û—Å—Ç–∞–Ω–Ω—ñ 20 –∑–∞–ø–∏—Å—ñ–≤
            
            if not logs:
                logs_text = "üìã **–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏**\n\n‚ùå –õ–æ–≥–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ"
            else:
                logs_text = "üìã **–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º–∏** (–æ—Å—Ç–∞–Ω–Ω—ñ 20 –∑–∞–ø–∏—Å—ñ–≤)\n\n"
                for log in logs:
                    logs_text += f"‚Ä¢ {log}\n"
            
            await query.edit_message_text(
                logs_text,
                reply_markup=get_admin_system_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–≥—ñ–≤**\n\n{str(e)}",
                reply_markup=get_admin_system_keyboard()
            )
    elif callback_data == "admin_cleanup_sessions":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            cleaned_count = access_manager.cleanup_inactive_sessions()
            
            if cleaned_count > 0:
                await query.edit_message_text(
                    f"üîÑ **–û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
                    f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π\n\n"
                    f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±—É–ª–∏ —Ä–æ–∑–ª–æ–≥—ñ–Ω–µ–Ω—ñ.",
                    reply_markup=get_admin_system_keyboard()
                )
            else:
                await query.edit_message_text(
                    f"üîÑ **–û—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
                    f"‚ÑπÔ∏è –ù–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n\n"
                    f"–í—Å—ñ —Å–µ—Å—ñ—ó –∞–∫—Ç–∏–≤–Ω—ñ.",
                    reply_markup=get_admin_system_keyboard()
                )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π**\n\n{str(e)}",
                reply_markup=get_admin_system_keyboard()
            )
    elif callback_data == "admin_create_backup":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        try:
            if access_manager.backup_data():
                await query.edit_message_text(
                    f"üíæ **–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞!**\n\n"
                    f"‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ\n\n"
                    f"–†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ø–∞–ø—Ü—ñ 'backups'.",
                    reply_markup=get_admin_system_keyboard()
                )
            else:
                await query.edit_message_text(
                    f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó!**\n\n"
                    f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_system_keyboard()
                )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó**\n\n{str(e)}",
                reply_markup=get_admin_system_keyboard()
            )
    elif callback_data == "admin_reset_system":
        if not access_manager.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!",
                reply_markup=get_main_menu_keyboard(user_id)
            )
            return
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è
        user_states[user_id] = {
            'state': 'admin_resetting_system',
            'data': {}
        }
        
        await query.edit_message_text(
            "‚ö†Ô∏è **–°–ö–ò–î–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò**\n\n"
            "üö® **–£–í–ê–ì–ê!** –¶—è –¥—ñ—è –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü–• –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∫—Ä—ñ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤!\n\n"
            "üìã **–©–æ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ:**\n"
            "‚Ä¢ –í—Å—ñ—Ö –∑–≤–∏—á–∞–π–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n"
            "‚Ä¢ –í—Å—ñ —ó—Ö–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏\n"
            "‚Ä¢ –í—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó\n\n"
            "‚úÖ **–©–æ –±—É–¥–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:**\n"
            "‚Ä¢ –í—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n"
            "‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n\n"
            "üîê **–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å:** CONFIRM_RESET",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_system")
            ]])
        )
    # –ê–¥–º—ñ–Ω –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º: –¥—ñ—ó –∑ –∫–Ω–æ–ø–æ–∫
    elif callback_data.startswith("admin_forward_enable_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        project_manager.enable_forward(target_id)
        await query.edit_message_text(
            f"üü¢ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–ª—è `{target_id}`",
            reply_markup=get_admin_forward_keyboard(target_id),
            parse_mode='Markdown'
        )
    elif callback_data.startswith("admin_forward_disable_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        project_manager.disable_forward(target_id)
        await query.edit_message_text(
            f"üî¥ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ –¥–ª—è `{target_id}`",
            reply_markup=get_admin_forward_keyboard(target_id),
            parse_mode='Markdown'
        )
    elif callback_data.startswith("admin_forward_status_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        status = project_manager.get_forward_status(target_id)
        enabled = status.get('enabled', False)
        channel = status.get('channel_id') or '‚Äî'
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç—É—Å –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è `{target_id}`\n\n–°—Ç–∞—Ç—É—Å: {'üü¢ —É–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else 'üî¥ –≤–∏–º–∫–Ω–µ–Ω–æ'}\n–ö–∞–Ω–∞–ª: `{channel}`",
            reply_markup=get_admin_forward_keyboard(target_id),
            parse_mode='Markdown'
        )
    elif callback_data.startswith("admin_forward_test_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        forward_channel = project_manager.get_forward_channel(target_id)
        if not forward_channel:
            await query.edit_message_text(
                f"‚ùå –£ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_id}` –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –∫–∞–Ω–∞–ª.",
                reply_markup=get_admin_forward_keyboard(target_id),
                parse_mode='Markdown'
            )
        else:
            try:
                test_text = (
                    f"üß™ –¢–µ—Å—Ç –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è\n\n"
                    f"–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_id}`."
                )
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    'chat_id': normalize_chat_id(forward_channel),
                    'text': test_text,
                    'parse_mode': 'Markdown'
                }
                r = requests.post(url, data=data, timeout=5)
                if r.status_code == 200:
                    await query.edit_message_text(
                        f"‚úÖ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É `{normalize_chat_id(forward_channel)}`",
                        reply_markup=get_admin_forward_keyboard(target_id),
                        parse_mode='Markdown'
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ({r.status_code}). –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ —É –∫–∞–Ω–∞–ª—ñ.",
                        reply_markup=get_admin_forward_keyboard(target_id)
                    )
            except Exception as e:
                await query.edit_message_text(
                    f"‚ùå –í–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}",
                    reply_markup=get_admin_forward_keyboard(target_id)
                )
    elif callback_data.startswith("admin_forward_set_"):
        if not access_manager.is_admin(user_id):
            return
        target_id = int(callback_data.split('_')[-1])
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ —É —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è ID –∫–∞–Ω–∞–ª—É
        user_states[user_id] = {'state': 'admin_forward_set_channel', 'data': {'target_id': target_id}}
        await query.edit_message_text(
            f"üìù –ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É –ê–ë–û –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ ID –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_id}`:",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")]]),
            parse_mode='Markdown'
        )

async def handle_project_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É"""
    user_id = update.effective_user.id
    message_text = update.message.text
    state_data = user_states[user_id]['data']
    
    if 'name' not in state_data:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É
        state_data['name'] = message_text
        platform = state_data['platform']
        
        if platform == 'twitter':
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É: {message_text}\n\n"
                f"üê¶ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Twitter/X —Å—Ç–æ—Ä—ñ–Ω–∫—É:\n"
                f"–ü—Ä–∏–∫–ª–∞–¥: https://twitter.com/username"
            )
        else:  # discord
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É: {message_text}\n\n"
                f"üí¨ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Discord –∫–∞–Ω–∞–ª:\n"
                f"–ü—Ä–∏–∫–ª–∞–¥: https://discord.com/channels/1408570777275469866/1413243132467871839"
            )
    else:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ –∑–∞–≤–µ—Ä—à—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
        state_data['url'] = message_text
        
        # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–µ–∫—Ç
        if project_manager.add_project(user_id, state_data):
            # –î–æ–¥–∞—î–º–æ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            if state_data['platform'] == 'discord' and discord_monitor:
                try:
                    discord_monitor.add_channel(state_data['url'])
                    logger.info(f"–î–æ–¥–∞–Ω–æ Discord –∫–∞–Ω–∞–ª –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {state_data['url']}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            elif state_data['platform'] == 'twitter' and twitter_monitor:
                try:
                    # –í–∏—Ç—è–≥—É—î–º–æ username –∑ URL
                    username = extract_twitter_username(state_data['url'])
                    if username:
                        twitter_monitor.add_account(username)
                        logger.info(f"–î–æ–¥–∞–Ω–æ Twitter –∞–∫–∞—É–Ω—Ç –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {username}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                    
            success_text = (
                f"üéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                f"üìù –ù–∞–∑–≤–∞: {state_data['name']}\n"
                f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {state_data['platform'].title()}\n"
                f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {state_data['url']}\n\n"
                f"–ü—Ä–æ–µ–∫—Ç –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."
            )
            await update.message.reply_text(
                success_text,
                reply_markup=get_main_menu_keyboard(user_id)
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
        
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        del user_states[user_id]

async def handle_forward_channel_setting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    # –û—á–∏—â–∞—î–º–æ @ —è–∫—â–æ —î
    if message_text.startswith('@'):
        message_text = message_text[1:]
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–∞–Ω–∞–ª—É
    if not message_text:
        await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∞–±–æ username –∫–∞–Ω–∞–ª—É.")
        return
    
    # –°–ø—Ä–æ–±—É—î–º–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–∞–Ω–∞–ª
    if project_manager.set_forward_channel(user_id, message_text):
        success_text = (
            f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"üì∫ –ö–∞–Ω–∞–ª: {message_text}\n"
            f"üîÑ –°—Ç–∞—Ç—É—Å: –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
            f"–¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≤–∞—à–∏—Ö Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –≤ —Ü–µ–π –∫–∞–Ω–∞–ª."
        )
        await update.message.reply_text(
            success_text,
            reply_markup=get_main_menu_keyboard(user_id)
        )
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    
    # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id in user_states:
        del user_states[user_id]

@require_auth
async def handle_admin_create_project_for_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–∞–π—Å—Ç–µ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω)"""
    admin_id = update.effective_user.id
    state = user_states.get(admin_id, {}).get('data', {})
    step = state.get('step', 'telegram_id')
    text = update.message.text.strip()
    
    # –ö—Ä–æ–∫ 1: –≤–∏–±—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if step == 'telegram_id':
        if not text.isdigit():
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
            return
        target_id = int(text)
        target = access_manager.get_user_by_telegram_id(target_id)
        if not target:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:")
            return
        state['target_id'] = target_id
        state['step'] = 'platform'
        await update.message.reply_text(
            "üåê –í–∫–∞–∂—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø—Ä–æ–µ–∫—Ç—É: 'twitter' –∞–±–æ 'discord'",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_panel")]])
        )
        return
    
    # –ö—Ä–æ–∫ 2: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
    if step == 'platform':
        platform = text.lower()
        if platform not in ['twitter', 'discord']:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞. –í–≤–µ–¥—ñ—Ç—å 'twitter' –∞–±–æ 'discord':")
            return
        state['platform'] = platform
        state['step'] = 'name'
        await update.message.reply_text("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É:")
        return
    
    # –ö—Ä–æ–∫ 3: –Ω–∞–∑–≤–∞
    if step == 'name':
        state['name'] = text
        state['step'] = 'url'
        if state['platform'] == 'twitter':
            await update.message.reply_text("üîó –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Twitter/X –ë–µ–∑ @ (–Ω–∞–ø—Ä. username):")
        else:
            await update.message.reply_text("üîó –í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Discord –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä. https://discord.com/channels/<server>/<channel>):")
        return
    
    # –ö—Ä–æ–∫ 4: URL —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    if step == 'url':
        state['url'] = text
        project_data = {
            'name': state['name'],
            'platform': state['platform'],
            'url': state['url'],
            'description': f"–ê–¥–º—ñ–Ω–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è {state['target_id']}"
        }
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–µ–∫—Ç –≤—ñ–¥ —ñ–º–µ–Ω—ñ target_id
        ok = project_manager.add_project(admin_id, project_data, target_user_id=state['target_id'])
        if ok:
            # –î–æ–¥–∞—î–º–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –æ–¥—Ä–∞–∑—É
            if state['platform'] == 'twitter':
                username = extract_twitter_username(state['url'])
                if twitter_monitor and username:
                    twitter_monitor.add_account(username)
            else:
                if discord_monitor:
                    discord_monitor.add_channel(state['url'])
            sync_monitors_with_projects()
            await update.message.reply_text("‚úÖ –ü—Ä–æ–µ–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        else:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç.")
        # –ó–∞–≤–µ—Ä—à—É—î–º–æ –º–∞–π—Å—Ç–µ—Ä
        if admin_id in user_states:
            del user_states[admin_id]

async def handle_twitter_addition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞"""
    user_id = update.effective_user.id
    username = update.message.text.strip().replace('@', '')
    
    try:
        # –î–æ–¥–∞—î–º–æ –¥–æ Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        if twitter_monitor:
            twitter_monitor.add_account(username)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–µ–∫—Ç
        project_data = {
            'name': f"Twitter: @{username}",
            'platform': 'twitter',
            'url': f"https://twitter.com/{username}",
            'description': f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Twitter –∞–∫–∞—É–Ω—Ç–∞ @{username}"
        }
        
        if project_manager.add_project(user_id, project_data):
            await update.message.reply_text(
                f"‚úÖ **Twitter –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!**\n\n"
                f"üê¶ **Username:** @{username}\n"
                f"üîó **URL:** https://twitter.com/{username}\n\n"
                f"–ê–∫–∞—É–Ω—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.",
                reply_markup=get_twitter_projects_keyboard(user_id),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É.",
                reply_markup=get_twitter_projects_keyboard(user_id)
            )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_twitter_projects_keyboard(user_id)
        )
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    del user_states[user_id]

async def handle_discord_addition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É"""
    user_id = update.effective_user.id
    channel_id = update.message.text.strip()
    
    try:
        # –î–æ–¥–∞—î–º–æ –¥–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        if discord_monitor:
            discord_monitor.add_channel(channel_id)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–µ–∫—Ç
        project_data = {
            'name': f"Discord: {channel_id}",
            'platform': 'discord',
            'url': f"https://discord.com/channels/{channel_id}",
            'description': f"–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Discord –∫–∞–Ω–∞–ª—É {channel_id}"
        }
        
        if project_manager.add_project(user_id, project_data):
            await update.message.reply_text(
                f"‚úÖ **Discord –∫–∞–Ω–∞–ª —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!**\n\n"
                f"üí¨ **Channel ID:** {channel_id}\n"
                f"üîó **URL:** https://discord.com/channels/{channel_id}\n\n"
                f"–ö–∞–Ω–∞–ª –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.",
                reply_markup=get_discord_projects_keyboard(user_id),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—Ä–æ–µ–∫—Ç—É.",
                reply_markup=get_discord_projects_keyboard(user_id)
            )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_discord_projects_keyboard(user_id)
        )
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    del user_states[user_id]

async def handle_admin_user_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    state_data = user_states[user_id]['data']
    
    try:
        if state_data['step'] == 'telegram_id':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not message_text.isdigit():
                await update.message.reply_text(
                    "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                    "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
                )
                return
            
            telegram_id = int(message_text)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
            existing_user = access_manager.get_user_by_telegram_id(telegram_id)
            if existing_user:
                await update.message.reply_text(
                    f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î!**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {telegram_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.\n"
                    f"–†–æ–ª—å: {'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' if existing_user.get('role') == 'admin' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Telegram ID —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
            state_data['telegram_id'] = telegram_id
            state_data['step'] = 'username'
            
            await update.message.reply_text(
                f"‚úÖ **Telegram ID:** {telegram_id}\n\n"
                f"üë§ **–í–≤–µ–¥—ñ—Ç—å username –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:**\n\n"
                f"üí° **–ü—Ä–∏–∫–ª–∞–¥:** JohnDoe\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** Username –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
            )
            
        elif state_data['step'] == 'username':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ username —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–∞—Ä–æ–ª—é
            username = message_text.strip()
            state_data['username'] = username
            state_data['step'] = 'password'
            
            await update.message.reply_text(
                f"‚úÖ **Telegram ID:** {state_data['telegram_id']}\n"
                f"‚úÖ **Username:** {username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üîê **–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:**\n\n"
                f"üí° **–ü—Ä–∏–∫–ª–∞–¥:** mypassword123\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
            )
            
        elif state_data['step'] == 'password':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–æ–ª—å —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            password = message_text.strip()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            created_user_id = access_manager.add_user(
                state_data['telegram_id'],
                state_data['username'],
                password if password else None
            )
            
            if created_user_id:
                await update.message.reply_text(
                    f"üéâ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!**\n\n"
                    f"üë§ **Username:** {state_data['username'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üÜî **Telegram ID:** {state_data['telegram_id']}\n"
                    f"üîê **–ü–∞—Ä–æ–ª—å:** {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}\n"
                    f"üëë **–†–æ–ª—å:** –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ—é /login",
                    reply_markup=get_admin_users_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_users_keyboard()
                )
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            del user_states[user_id]
            
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_admin_users_keyboard()
        )
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_admin_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    state_data = user_states[user_id]['data']
    
    try:
        if state_data['step'] == 'telegram_id':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not message_text.isdigit():
                await update.message.reply_text(
                    "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                    "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
                )
                return
            
            telegram_id = int(message_text)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î
            existing_user = access_manager.get_user_by_telegram_id(telegram_id)
            if existing_user:
                await update.message.reply_text(
                    f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î!**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {telegram_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º—ñ.\n"
                    f"–†–æ–ª—å: {'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' if existing_user.get('role') == 'admin' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ Telegram ID —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É
            state_data['telegram_id'] = telegram_id
            state_data['step'] = 'username'
            
            await update.message.reply_text(
                f"‚úÖ **Telegram ID:** {telegram_id}\n\n"
                f"üë§ **–í–≤–µ–¥—ñ—Ç—å username –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
                f"üí° **–ü—Ä–∏–∫–ª–∞–¥:** AdminJohn\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** Username –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º"
            )
            
        elif state_data['step'] == 'username':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ username —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –ø–∞—Ä–æ–ª—é
            username = message_text.strip()
            state_data['username'] = username
            state_data['step'] = 'password'
            
            await update.message.reply_text(
                f"‚úÖ **Telegram ID:** {state_data['telegram_id']}\n"
                f"‚úÖ **Username:** {username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üîê **–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
                f"üí° **–ü—Ä–∏–∫–ª–∞–¥:** adminpass123\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
            )
            
        elif state_data['step'] == 'password':
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–æ–ª—å —Ç–∞ —Å—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            password = message_text.strip()
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            created_user_id = access_manager.create_admin_user(
                state_data['telegram_id'],
                state_data['username'],
                password if password else None
            )
            
            if created_user_id:
                await update.message.reply_text(
                    f"üéâ **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!**\n\n"
                    f"üë§ **Username:** {state_data['username'] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
                    f"üÜî **Telegram ID:** {state_data['telegram_id']}\n"
                    f"üîê **–ü–∞—Ä–æ–ª—å:** {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}\n"
                    f"üëë **–†–æ–ª—å:** –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                    f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ—é /login",
                    reply_markup=get_admin_users_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_users_keyboard()
                )
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            del user_states[user_id]
            
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}\n\n"
            f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=get_admin_users_keyboard()
        )
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_user_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    try:
        # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        results = access_manager.search_users(message_text)
        
        if not results:
            await update.message.reply_text(
                f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É**\n\n"
                f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º: '{message_text}'\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –∑–∞–ø–∏—Ç:",
                reply_markup=get_admin_users_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        results_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É** (–∑–Ω–∞–π–¥–µ–Ω–æ: {len(results)})\n\n"
        
        for i, result in enumerate(results[:10], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 10
            role_emoji = "üëë" if result.get('role') == 'admin' else "üë§"
            status_emoji = "‚úÖ" if result.get('is_active', True) else "‚ùå"
            match_type = "username" if result.get('match_type') == 'username' else "Telegram ID"
            
            results_text += (
                f"{i}. {role_emoji} **{result.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}**\n"
                f"   üÜî ID: `{result.get('telegram_id')}`\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                f"   üîç –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞: {match_type}\n"
                f"   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {result.get('created_at', '')[:10]}\n\n"
            )
        
        if len(results) > 10:
            results_text += f"... —Ç–∞ —â–µ {len(results) - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
        
        await update.message.reply_text(
            results_text,
            reply_markup=get_admin_users_keyboard(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É:** {str(e)}",
            reply_markup=get_admin_users_keyboard()
        )
    finally:
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_user_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
        if not message_text.isdigit():
            await update.message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
            )
            return
        
        target_telegram_id = int(message_text)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
        target_user = access_manager.get_user_by_telegram_id(target_telegram_id)
        if not target_user:
            await update.message.reply_text(
                f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {target_telegram_id} –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
            )
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ
        if target_telegram_id == user_id:
            await update.message.reply_text(
                "‚ùå **–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ!**\n\n"
                "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç.\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
            )
            return
        
        # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if access_manager.delete_user(target_telegram_id):
            username = target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')
            role = target_user.get('role', 'user')
            
            await update.message.reply_text(
                f"üóëÔ∏è **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π!**\n\n"
                f"üë§ **Username:** {username}\n"
                f"üÜî **Telegram ID:** {target_telegram_id}\n"
                f"üëë **–†–æ–ª—å:** {'–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä' if role == 'admin' else '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ —Å–∏—Å—Ç–µ–º–∏.",
                reply_markup=get_admin_users_keyboard(),
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå **–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!**\n\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_admin_users_keyboard()
            )
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}",
            reply_markup=get_admin_users_keyboard()
        )
    finally:
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_role_change(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    state_data = user_states[user_id]['data']
    
    try:
        if state_data['step'] == 'telegram_id':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not message_text.isdigit():
                await update.message.reply_text(
                    "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                    "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
                )
                return
            
            target_telegram_id = int(message_text)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
            target_user = access_manager.get_user_by_telegram_id(target_telegram_id)
            if not target_user:
                await update.message.reply_text(
                    f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {target_telegram_id} –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ä–æ–ª—ñ
            state_data['target_telegram_id'] = target_telegram_id
            state_data['target_user'] = target_user
            state_data['step'] = 'new_role'
            
            current_role = target_user.get('role', 'user')
            current_role_text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if current_role == "admin" else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
            
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:**\n\n"
                f"üë§ **Username:** {target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\n"
                f"üÜî **Telegram ID:** {target_telegram_id}\n"
                f"üëë **–ü–æ—Ç–æ—á–Ω–∞ —Ä–æ–ª—å:** {current_role_text}\n\n"
                f"üîÑ **–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤—É —Ä–æ–ª—å:**\n\n"
                f"–í–≤–µ–¥—ñ—Ç—å: 'admin' –∞–±–æ 'user'",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
                ]])
            )
            
        elif state_data['step'] == 'new_role':
            new_role = message_text.lower().strip()
            
            if new_role not in ['admin', 'user']:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤—ñ—Ä–Ω–∞ —Ä–æ–ª—å!**\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–ª—ñ: 'admin' –∞–±–æ 'user'\n"
                    "–í–≤–µ–¥—ñ—Ç—å —Ä–æ–ª—å —â–µ —Ä–∞–∑:"
                )
                return
            
            target_telegram_id = state_data['target_telegram_id']
            target_user = state_data['target_user']
            
            # –ó–º—ñ–Ω—é—î–º–æ —Ä–æ–ª—å
            if access_manager.change_user_role(target_telegram_id, new_role):
                old_role_text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if target_user.get('role') == 'admin' else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
                new_role_text = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä" if new_role == 'admin' else "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
                
                await update.message.reply_text(
                    f"üîÑ **–†–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–∞!**\n\n"
                    f"üë§ **Username:** {target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\n"
                    f"üÜî **Telegram ID:** {target_telegram_id}\n"
                    f"üëë **–°—Ç–∞—Ä–∞ —Ä–æ–ª—å:** {old_role_text}\n"
                    f"üëë **–ù–æ–≤–∞ —Ä–æ–ª—å:** {new_role_text}\n\n"
                    f"–î–æ–∑–≤–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
                    reply_markup=get_admin_users_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–ª—ñ!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_users_keyboard()
                )
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            del user_states[user_id]
            
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}",
            reply_markup=get_admin_users_keyboard()
        )
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_password_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    state_data = user_states[user_id]['data']
    
    try:
        if state_data['step'] == 'telegram_id':
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —á–∏—Å–ª–æ
            if not message_text.isdigit():
                await update.message.reply_text(
                    "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
                    "–í–≤–µ–¥—ñ—Ç—å Telegram ID —â–µ —Ä–∞–∑:"
                )
                return
            
            target_telegram_id = int(message_text)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î
            target_user = access_manager.get_user_by_telegram_id(target_telegram_id)
            if not target_user:
                await update.message.reply_text(
                    f"‚ùå **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!**\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ Telegram ID {target_telegram_id} –Ω–µ —ñ—Å–Ω—É—î –≤ —Å–∏—Å—Ç–µ–º—ñ.\n\n"
                    f"–í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:"
                )
                return
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é
            state_data['target_telegram_id'] = target_telegram_id
            state_data['target_user'] = target_user
            state_data['step'] = 'new_password'
            
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:**\n\n"
                f"üë§ **Username:** {target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\n"
                f"üÜî **Telegram ID:** {target_telegram_id}\n\n"
                f"üîê **–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:**\n\n"
                f"üí° **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –Ø–∫—â–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –ø–∞—Ä–æ–ª—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_users")
                ]])
            )
            
        elif state_data['step'] == 'new_password':
            new_password = message_text.strip()
            target_telegram_id = state_data['target_telegram_id']
            target_user = state_data['target_user']
            
            # –°–∫–∏–¥–∞—î–º–æ –ø–∞—Ä–æ–ª—å
            if access_manager.reset_user_password(target_telegram_id, new_password if new_password else None):
                password_text = new_password if new_password else "–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º"
                
                await update.message.reply_text(
                    f"üîê **–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ!**\n\n"
                    f"üë§ **Username:** {target_user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}\n"
                    f"üÜî **Telegram ID:** {target_telegram_id}\n"
                    f"üîê **–ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:** {password_text}\n\n"
                    f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–¥–µ —Ä–æ–∑–ª–æ–≥—ñ–Ω–µ–Ω–∏–π –∑ —É—Å—ñ—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤.",
                    reply_markup=get_admin_users_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_users_keyboard()
                )
            
            # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
            del user_states[user_id]
            
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}",
            reply_markup=get_admin_users_keyboard()
        )
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_system_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user_id = update.effective_user.id
    message_text = update.message.text.strip()
    
    try:
        if message_text == "CONFIRM_RESET":
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
            if access_manager.reset_system():
                await update.message.reply_text(
                    f"‚ö†Ô∏è **–°–ò–°–¢–ï–ú–ê –°–ö–ò–ù–£–¢–ê!**\n\n"
                    f"‚úÖ **–í–∏–∫–æ–Ω–∞–Ω–æ:**\n"
                    f"‚Ä¢ –í—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∏–¥–∞–ª–µ–Ω–æ\n"
                    f"‚Ä¢ –í—Å—ñ –ø—Ä–æ–µ–∫—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–æ\n"
                    f"‚Ä¢ –í—Å—ñ —Å–µ—Å—ñ—ó –æ—á–∏—â–µ–Ω–æ\n"
                    f"‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω–∞ –∫–æ–ø—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞\n\n"
                    f"üëë **–ó–±–µ—Ä–µ–∂–µ–Ω–æ:**\n"
                    f"‚Ä¢ –í—Å—ñ—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤\n"
                    f"‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
                    f"–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –Ω–æ–≤–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.",
                    reply_markup=get_admin_system_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    "‚ùå **–ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏!**\n\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                    reply_markup=get_admin_system_keyboard()
                )
        else:
            await update.message.reply_text(
                "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è!**\n\n"
                "–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∏–¥–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –≤–≤–µ–¥—ñ—Ç—å —Ç–æ—á–Ω–æ: **CONFIRM_RESET**\n\n"
                "‚ö†Ô∏è **–£–í–ê–ì–ê!** –¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–∞!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="admin_system")
                ]])
            )
            return
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞:** {str(e)}",
            reply_markup=get_admin_system_keyboard()
        )
    finally:
        # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
        if user_id in user_states:
            del user_states[user_id]

async def handle_admin_forward_select_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º"""
    admin_id = update.effective_user.id
    message_text = update.message.text.strip()
    try:
        if not message_text.isdigit():
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:")
            return
        target_id = int(message_text)
        target_user = access_manager.get_user_by_telegram_id(target_id)
        if not target_user:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π Telegram ID:")
            return
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º
        user_states[admin_id] = {'state': 'admin_forward_set_user_menu', 'data': {'target_id': target_id}}
        status = project_manager.get_forward_status(target_id)
        enabled = status.get('enabled', False)
        channel = status.get('channel_id') or '‚Äî'
        await update.message.reply_text(
            f"üîÅ –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ `{target_id}`\n\n–°—Ç–∞—Ç—É—Å: {'üü¢ —É–≤—ñ–º–∫–Ω–µ–Ω–æ' if enabled else 'üî¥ –≤–∏–º–∫–Ω–µ–Ω–æ'}\n–ö–∞–Ω–∞–ª: `{channel}`",
            reply_markup=get_admin_forward_keyboard(target_id),
            parse_mode='Markdown'
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def handle_admin_forward_set_channel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º—ñ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–∞–Ω–∞–ª –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    admin_id = update.effective_user.id
    message_text = update.message.text.strip()
    state = user_states.get(admin_id, {}).get('data', {})
    target_id = state.get('target_id')
    if not target_id:
        await update.message.reply_text("‚ùå –°–µ—Å—ñ—è –≤—Ç—Ä–∞—á–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.")
        return
    # –ü—ñ–¥—Ç—Ä–∏–º—É—î–º–æ 2 —Å–ø–æ—Å–æ–±–∏: —Ç–µ–∫—Å—Ç–æ–≤–∏–π ID –∞–±–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
    fwd_chat = getattr(update.message, 'forward_from_chat', None)
    if fwd_chat:
        channel_id_str = str(getattr(fwd_chat, 'id', ''))
    else:
        if not message_text:
            await update.message.reply_text("‚ùå –í–≤–µ–¥—ñ—Ç—å ID –∫–∞–Ω–∞–ª—É –∞–±–æ –ø–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω—å–æ–≥–æ.")
            return
        channel_id_str = message_text
    if project_manager.set_forward_channel(target_id, channel_id_str):
        await update.message.reply_text(
            f"‚úÖ –ö–∞–Ω–∞–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è `{target_id}`: `{normalize_chat_id(channel_id_str)}`",
            parse_mode='Markdown',
            reply_markup=get_admin_forward_keyboard(target_id)
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∞–Ω–∞–ª.")

async def handle_selenium_addition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è Selenium Twitter –∞–∫–∞—É–Ω—Ç–∞"""
    user_id = update.effective_user.id
    username = update.message.text.strip().replace('@', '')
    
    try:
        # –î–æ–¥–∞—î–º–æ –¥–æ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        if selenium_twitter_monitor:
            selenium_twitter_monitor.add_account(username)
        
        # –î–æ–¥–∞—î–º–æ –¥–æ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        project_manager.add_selenium_account(username, user_id)
        
        await update.message.reply_text(
            f"‚úÖ **Selenium Twitter –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!**\n\n"
            f"üöÄ **Username:** @{username}\n"
            f"üîó **URL:** https://x.com/{username}\n\n"
            f"–ê–∫–∞—É–Ω—Ç –¥–æ–¥–∞–Ω–æ –¥–æ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.",
            reply_markup=get_selenium_accounts_keyboard(),
            parse_mode='Markdown'
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            reply_markup=get_selenium_accounts_keyboard()
        )
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω
    del user_states[user_id]

async def handle_channel_ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø—ñ–Ω–≥—É –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ñ"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–∞–Ω–∞–ª
        channel_id = update.message.chat.id
        channel_title = update.message.chat.title or "Unknown Channel"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –ø—ñ–Ω–≥–Ω—É–≤
        if update.message.from_user:
            user_id = update.message.from_user.id
            username = update.message.from_user.username or update.message.from_user.first_name
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π (—É–∑–≥–æ–¥–∂–µ–Ω–æ –∑ —ñ–Ω—à–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏)
            if not access_manager.is_authorized(user_id):
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üîí –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è.\n\n–°–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –±–æ—Ç—ñ: @{context.bot.username}"
                    )
                except:
                    pass  # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                return
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
            if project_manager.set_forward_channel(user_id, str(channel_id)):
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª
                safe_channel_title = escape_markdown(channel_title)
                safe_username = escape_markdown(username)
                
                confirmation_text = (
                    f"‚úÖ **–ö–∞–Ω–∞–ª –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è!**\n\n"
                    f"üì∫ –ö–∞–Ω–∞–ª: {safe_channel_title}\n"
                    f"üë§ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ: @{safe_username}\n"
                    f"üîÑ –°—Ç–∞—Ç—É—Å: –£–≤—ñ–º–∫–Ω–µ–Ω–æ\n\n"
                    f"–¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord –ø—Ä–æ–µ–∫—Ç—ñ–≤ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏—Å—è –≤ —Ü–µ–π –∫–∞–Ω–∞–ª."
                )
                
                await context.bot.send_message(
                    chat_id=normalize_chat_id(str(channel_id)),
                    text=confirmation_text,
                    parse_mode='Markdown'
                )
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=normalize_chat_id(str(user_id)),
                        text=f"‚úÖ –ö–∞–Ω–∞–ª '{channel_title}' —É—Å–ø—ñ—à–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å!"
                    )
                except:
                    pass
                    
                logger.info(f"–ö–∞–Ω–∞–ª {channel_id} ({channel_title}) –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            else:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª—É '{channel_title}'. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                    )
                except:
                    pass
        else:
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            await context.bot.send_message(
                chat_id=channel_id,
                text="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è."
            )
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—ñ–Ω–≥—É –≤ –∫–∞–Ω–∞–ª—ñ: {e}")
        try:
            await context.bot.send_message(
                chat_id=update.message.chat.id,
                text="‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
        except:
            pass

async def handle_discord_history(update: Update, context: ContextTypes.DEFAULT_TYPE, count: int) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–≥–ª—è–¥—É —ñ—Å—Ç–æ—Ä—ñ—ó Discord"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in user_states or user_states[user_id]['state'] != 'viewing_history':
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó –≤—Ç—Ä–∞—á–µ–Ω–æ.", reply_markup=get_main_menu_keyboard(user_id))
        return
    
    project = user_states[user_id]['data']['project']
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await query.edit_message_text(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É {project['name']}...")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord
        messages = await get_discord_messages_history(project['url'], count)
        
        if not messages:
            await query.edit_message_text(
                f"üìú –Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {project['name']}\n\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n–ú–æ–∂–ª–∏–≤–æ, –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–∞–Ω–∞–ª—É –∞–±–æ –∫–∞–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π.",
                reply_markup=get_main_menu_keyboard(user_id)
            )
        else:
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            history_text = format_discord_history(messages, project['name'], count)
            
            # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(history_text) > 4000:
                # Telegram –º–∞—î –ª—ñ–º—ñ—Ç –Ω–∞ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                parts = [history_text[i:i+4000] for i in range(0, len(history_text), 4000)]
                for i, part in enumerate(parts):
                    if i == 0:
                        await query.edit_message_text(part)
                    else:
                        await context.bot.send_message(chat_id=user_id, text=part)
            else:
                await query.edit_message_text(history_text, reply_markup=get_main_menu_keyboard(user_id))
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó Discord: {e}")
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–∞–Ω–∞–ª—É {project['name']}:\n{str(e)}",
            reply_markup=get_main_menu_keyboard(user_id)
        )
    finally:
        # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_id in user_states:
            del user_states[user_id]

async def get_discord_messages_history(channel_url: str, limit: int) -> List[Dict]:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ Discord –∫–∞–Ω–∞–ª—É"""
    if not DISCORD_AUTHORIZATION:
        return []
    
    try:
        # –ü–∞—Ä—Å–∏–º–æ URL –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è channel_id
        import re
        match = re.search(r'discord\.com/channels/(\d+)/(\d+)', channel_url)
        if not match:
            return []
        
        channel_id = match.group(2)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π session –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://discord.com/api/v9/channels/{channel_id}/messages?limit={limit}",
                headers={
                    'Authorization': DISCORD_AUTHORIZATION,
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {response.status}")
                    return []
                
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ get_discord_messages_history: {e}")
        return []

def format_discord_history(messages: List[Dict], channel_name: str, count: int) -> str:
    """–§–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Discord"""
    from datetime import datetime
    
    header = f"üìú **–Ü—Å—Ç–æ—Ä—ñ—è –∫–∞–Ω–∞–ª—É: {channel_name}**\n"
    header += f"üìä –û—Å—Ç–∞–Ω–Ω—ñ {count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:\n\n"
    
    if not messages:
        return header + "‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    
    formatted_messages = []
    for i, message in enumerate(messages, 1):
        author = message.get('author', {}).get('username', 'Unknown')
        content = message.get('content', '')
        timestamp = message.get('timestamp', '')
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å
        try:
            if timestamp:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                time_str = dt.strftime('%d.%m.%Y %H:%M')
            else:
                time_str = 'Unknown time'
        except:
            time_str = 'Unknown time'
        
        # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if len(content) > 200:
            content = content[:200] + "..."
        
        formatted_msg = f"**{i}.** üë§ {author} | üïí {time_str}\n"
        if content:
            formatted_msg += f"üí¨ {content}\n"
        formatted_msg += "‚îÄ" * 30 + "\n"
        
        formatted_messages.append(formatted_msg)
    
    return header + "\n".join(formatted_messages)

def handle_discord_notifications_sync(new_messages: List[Dict]) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Discord (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    global bot_instance
    
    if not bot_instance:
        return
        
    try:
        # –ö–µ—à—ñ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        channel_to_tracked_users: Dict[str, List[int]] = {}
        user_to_forward_channel: Dict[int, str] = {}
        
        # –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        for message in new_messages:
            message_id = message.get('message_id', '')
            channel_id = message.get('channel_id', '')
            
            # –ö—Ä–∞—Å–∏–≤–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            author = escape_markdown(message['author'])
            content = escape_markdown(message['content'])
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(content) > 200:
                content = content[:200] + "..."
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            timestamp = message.get('timestamp', '')
            formatted_date = "–ù–µ –≤—ñ–¥–æ–º–æ"
            time_ago = ""
            
            if timestamp:
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d %B, %H:%M UTC")
                    time_ago = _get_time_ago(dt)
                except:
                    formatted_date = timestamp[:19] if len(timestamp) > 19 else timestamp
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä –∑ URL
            server_name = "Discord"
            try:
                # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ guild_id –∑ URL
                url_parts = message['url'].split('/')
                if len(url_parts) >= 5:
                    guild_id = url_parts[4]
                    server_name = f"Discord Server ({guild_id})"
            except:
                pass
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            images = message.get('images', [])
            
            forward_text = (
                f"üì¢ **–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ Discord**\n"
                f"‚Ä¢ –°–µ—Ä–≤–µ—Ä: {server_name}\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author}\n"
                f"‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                f"‚Ä¢ –¢–µ–∫—Å—Ç: {content}\n"
                f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]({message['url']})"
            )
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —î
            if images:
                forward_text += f"\nüì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}"
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å —Ü–µ–π Discord –∫–∞–Ω–∞–ª
            if channel_id in channel_to_tracked_users:
                tracked_users = channel_to_tracked_users[channel_id]
            else:
                tracked_users = get_users_tracking_discord_channel(channel_id)
                channel_to_tracked_users[channel_id] = tracked_users

            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è–º
            users_with_forwarding: List[int] = []
            for user_id in tracked_users:
                if user_id in user_to_forward_channel:
                    forward_channel = user_to_forward_channel[user_id]
                else:
                    forward_channel = project_manager.get_forward_channel(user_id)
                    user_to_forward_channel[user_id] = forward_channel
                if forward_channel:
                    users_with_forwarding.append(user_id)
            if not users_with_forwarding:
                continue

            # –ù–µ –¥—É–±–ª—é–≤–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É, —è–∫—â–æ –∫—ñ–ª—å–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∫–∞–∑–∞–ª–∏ —Ç–æ–π —Å–∞–º–∏–π —Ü—ñ–ª—å–æ–≤–∏–π –∫–∞–Ω–∞–ª
            sent_targets: Set[str] = set()

            for user_id in users_with_forwarding:
                try:
                    # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–Ω–∞–ª—É
                    forward_channel = user_to_forward_channel.get(user_id) or project_manager.get_forward_channel(user_id)
                    if not forward_channel:
                        continue
                    if forward_channel in sent_targets:
                        # –£–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ü–µ–π –∫–∞–Ω–∞–ª —Ü—é –ø–æ–¥—ñ—é
                        continue
                    
                    # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
                    forward_key = f"forward_{channel_id}_{message_id}"
                    if project_manager.is_message_sent(forward_key, forward_channel, user_id):
                        continue
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                    data = {
                        'chat_id': normalize_chat_id(forward_channel),
                        'text': forward_text,
                        'parse_mode': 'Markdown'
                    }
                    response = requests.post(url, data=data, timeout=3)
                    
                    if response.status_code == 200:
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —î
                        if images:
                            for i, image_url in enumerate(images[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å
                                try:
                                    image_caption = f"üì∑ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}/{len(images)}" if len(images) > 1 else "üì∑ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
                                    download_and_send_image(image_url, forward_channel, image_caption)
                                    # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
                                    import time
                                    time.sleep(1)
                                except Exception as e:
                                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                        
                        project_manager.add_sent_message(forward_key, forward_channel, user_id)
                        sent_targets.add(forward_channel)
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª {forward_channel} (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id})")
                    else:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {forward_channel}: {response.status_code}")
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Discord —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

def handle_twitter_notifications_sync(new_tweets: List[Dict]) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤ Twitter (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ –≤–µ—Ä—Å—ñ—è)"""
    global bot_instance, global_sent_tweets
    
    if not bot_instance:
        return
        
    try:
        # –®–≤–∏–¥–∫–∞ –æ–±—Ä–æ–±–∫–∞ —Ç–≤—ñ—Ç—ñ–≤
        for tweet in new_tweets:
            tweet_id = tweet.get('tweet_id', '')
            account = tweet.get('account', '')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤—ñ–¥—Å—Ç–µ–∂—É—é—Ç—å —Ü–µ–π Twitter –∞–∫–∞—É–Ω—Ç, —Ç–∞ –º–∞—é—Ç—å –≤–≤—ñ–º–∫–Ω–µ–Ω–µ –ø–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è
            users_with_forwarding: List[int] = []
            tracked_users = get_users_tracking_twitter(account)
            for user_id in tracked_users:
                forward_channel = project_manager.get_forward_channel(user_id)
                if forward_channel:
                    users_with_forwarding.append(user_id)
            if not users_with_forwarding:
                continue

            # –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
            if account not in global_sent_tweets:
                global_sent_tweets[account] = set()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ–π —Ç–≤—ñ—Ç –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ
            if tweet_id in global_sent_tweets[account]:
                logger.info(f"–¢–≤—ñ—Ç {tweet_id} –¥–ª—è {account} –≤–∂–µ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ")
                continue
            
            # –î–æ–¥–∞—î–º–æ —Ç–≤—ñ—Ç –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏—Ö
            global_sent_tweets[account].add(tweet_id)
            
            # –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –æ—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä—ñ —Ç–≤—ñ—Ç–∏
            if len(global_sent_tweets[account]) % 50 == 0:  # –ö–æ–∂–Ω—ñ 50 —Ç–≤—ñ—Ç—ñ–≤
                cleanup_old_tweets()
            
            # –ö—Ä–∞—Å–∏–≤–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            author = escape_markdown(tweet.get('author', 'Unknown'))
            text = escape_markdown(tweet.get('text', ''))
            
            # –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
            if len(text) > 200:
                text = text[:200] + "..."
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
            timestamp = tweet.get('timestamp', '')
            formatted_date = "–ù–µ –≤—ñ–¥–æ–º–æ"
            time_ago = ""
            
            if timestamp:
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                    formatted_date = dt.strftime("%d %B, %H:%M UTC")
                    time_ago = _get_time_ago(dt)
                except:
                    formatted_date = timestamp[:19] if len(timestamp) > 19 else timestamp
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–≤—ñ—Ç–∞
            images = tweet.get('images', [])
            
            forward_text = (
                f"üê¶ **–ù–æ–≤–∏–π —Ç–≤—ñ—Ç –∑ Twitter**\n"
                f"‚Ä¢ –ü—Ä–æ—Ñ—ñ–ª—å: @{account}\n"
                f"‚Ä¢ –ê–≤—Ç–æ—Ä: {author}\n"
                f"‚Ä¢ –î–∞—Ç–∞: {formatted_date} ({time_ago})\n"
                f"‚Ä¢ –¢–µ–∫—Å—Ç: {text}\n"
                f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–≤—ñ—Ç–∞]({tweet.get('url', '')})"
            )
            
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —î
            if images:
                forward_text += f"\nüì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}"
            
            for user_id in users_with_forwarding:
                try:
                    # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞–Ω–∞–ª—É
                    forward_channel = project_manager.get_forward_channel(user_id)
                    if not forward_channel:
                        continue
                    
                    # –®–≤–∏–¥–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
                    forward_key = f"twitter_{account}_{tweet_id}"
                    if project_manager.is_message_sent(forward_key, forward_channel, user_id):
                        continue
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                    data = {
                        'chat_id': normalize_chat_id(forward_channel),
                        'text': forward_text,
                        'parse_mode': 'Markdown'
                    }
                    response = requests.post(url, data=data, timeout=3)
                    
                    if response.status_code == 200:
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫—â–æ —î
                        if images:
                            logger.info(f"üì∑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(images)} –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {forward_channel}")
                            for i, image_url in enumerate(images[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å
                                try:
                                    logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}/{len(images)}: {image_url}")
                                    image_caption = f"üì∑ Twitter –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}/{len(images)}" if len(images) > 1 else "üì∑ Twitter –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
                                    success = download_and_send_image(image_url, forward_channel, image_caption)
                                    if success:
                                        logger.info(f"‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                                    else:
                                        logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}")
                                    # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
                                    import time
                                    time.sleep(1)
                                except Exception as e:
                                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Twitter –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}: {e}")
                        else:
                            logger.info(f"‚ÑπÔ∏è –ó–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–≤—ñ—Ç–∞ {tweet_id}")
                        
                        project_manager.add_sent_message(forward_key, forward_channel, user_id)
                        logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ Twitter —Ç–≤—ñ—Ç –≤ –∫–∞–Ω–∞–ª {forward_channel} (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id})")
                    else:
                        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ Twitter —Ç–≤—ñ—Ç–∞ –≤ –∫–∞–Ω–∞–ª {forward_channel}: {response.status_code}")
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Twitter –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ Twitter —Å–ø–æ–≤—ñ—â–µ–Ω—å: {e}")

async def start_discord_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Discord"""
    global discord_monitor
    
    if not discord_monitor or not DISCORD_AUTHORIZATION:
        logger.warning("Discord authorization —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        return
        
    try:
        async with discord_monitor:
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ Discord –∫–∞–Ω–∞–ª–∏ –∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            for user_id, projects in project_manager.data['projects'].items():
                for project in projects:
                    if project['platform'] == 'discord':
                        discord_monitor.add_channel(project['url'])
                        
            logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Discord –∫–∞–Ω–∞–ª—ñ–≤")
            await discord_monitor.start_monitoring(handle_discord_notifications_sync, MONITORING_INTERVAL)
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Discord: {e}")

async def start_twitter_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ Twitter –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º"""
    global twitter_monitor
    
    if not twitter_monitor or not TWITTER_AUTH_TOKEN:
        logger.warning("Twitter auth_token –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        return
        
    try:
        async with twitter_monitor:
            # –î–æ–¥–∞—î–º–æ –≤—Å—ñ Twitter –∞–∫–∞—É–Ω—Ç–∏ –∑ –ø—Ä–æ–µ–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            for user_id, projects in project_manager.data['projects'].items():
                for project in projects:
                    if project['platform'] == 'twitter':
                        username = extract_twitter_username(project['url'])
                        if username:
                            twitter_monitor.add_account(username)
                            
            logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter –∞–∫–∞—É–Ω—Ç—ñ–≤ –∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º")
            
            # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–ª–∞—Å–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º
            while True:
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π HTML –ø–∞—Ä—Å–∏–Ω–≥
                    new_tweets = await twitter_monitor.check_new_tweets()
                    
                    if new_tweets:
                        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
                        formatted_tweets = []
                        for tweet in new_tweets:
                            formatted_tweets.append({
                                'tweet_id': tweet.get('id', ''),
                                'account': tweet.get('user', {}).get('screen_name', ''),
                                'author': tweet.get('user', {}).get('name', ''),
                                'text': tweet.get('text', ''),
                                'url': tweet.get('url', ''),
                                'timestamp': tweet.get('created_at', '')
                            })
                        
                        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                        handle_twitter_notifications_sync(formatted_tweets)
                        logger.info(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {len(formatted_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                    
                    # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                    await asyncio.sleep(TWITTER_MONITORING_INTERVAL)
                    
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")
                    await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")

async def start_selenium_twitter_monitoring():
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global selenium_twitter_monitor
    
    if not selenium_twitter_monitor:
        logger.warning("Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥—Ä–∞–π–≤–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ
    if not selenium_twitter_monitor.driver:
        logger.warning("Selenium –¥—Ä–∞–π–≤–µ—Ä –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏...")
        if not selenium_twitter_monitor._setup_driver(headless=True):
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Selenium –¥—Ä–∞–π–≤–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥")
            return
        
    try:
        selenium_twitter_monitor.monitoring_active = True
        
        if selenium_twitter_monitor.monitoring_accounts:
            logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter –∞–∫–∞—É–Ω—Ç—ñ–≤: {list(selenium_twitter_monitor.monitoring_accounts)}")
        else:
            logger.info("üöÄ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ (–æ—á—ñ–∫—É—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç—ñ–≤)")
        
        # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        while selenium_twitter_monitor.monitoring_active:
            try:
                # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ —á–µ—Ä–µ–∑ Selenium
                new_tweets = await selenium_twitter_monitor.check_new_tweets()
                
                if new_tweets:
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —ñ—Å–Ω—É—é—á–∏–º –∫–æ–¥–æ–º
                    formatted_tweets = []
                    for tweet in new_tweets:
                        formatted_tweets.append({
                            'tweet_id': tweet.get('id', ''),
                            'account': tweet.get('user', {}).get('screen_name', ''),
                            'author': tweet.get('user', {}).get('name', ''),
                            'text': tweet.get('text', ''),
                            'url': tweet.get('url', ''),
                            'timestamp': tweet.get('created_at', ''),
                            'images': tweet.get('images', [])  # –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è!
                        })
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
                    handle_twitter_notifications_sync(formatted_tweets)
                    logger.info(f"Selenium: –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(formatted_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                
                # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")
                # –°–ø—Ä–æ–±—É—î–º–æ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥—Ä–∞–π–≤–µ—Ä
                try:
                    selenium_twitter_monitor.close_driver()
                    await asyncio.sleep(5)
                    if selenium_twitter_monitor._setup_driver(headless=True):
                        logger.info("Selenium –¥—Ä–∞–π–≤–µ—Ä –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
                    else:
                        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ Selenium –¥—Ä–∞–π–≤–µ—Ä")
                except Exception as e2:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥—Ä–∞–π–≤–µ—Ä–∞: {e2}")
                
                await asyncio.sleep(30)  # –ö–æ—Ä–æ—Ç—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Twitter: {e}")
        # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—Ä–∞–π–≤–µ—Ä –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω—ñ–π –ø–æ–º–∏–ª—Ü—ñ
        try:
            selenium_twitter_monitor.close_driver()
        except:
            pass

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

def check_sessions(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω—ñ —Å–µ—Å—ñ—ó"""
    try:
        security_manager.check_expired_sessions(context.bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ–π: {e}")

def cleanup_old_messages(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    try:
        project_manager.cleanup_old_messages(hours=24)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å: {e}")

def cleanup_access_sessions(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω—ñ —Å–µ—Å—ñ—ó –¥–æ—Å—Ç—É–ø—É"""
    try:
        access_manager.cleanup_expired_sessions()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –¥–æ—Å—Ç—É–ø—É: {e}")

def _get_time_ago(dt: datetime) -> str:
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —á–∞—Å —Ç–æ–º—É"""
    try:
        from datetime import datetime, timezone
        now = datetime.now(timezone.utc)
        
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ dt –º–∞—î timezone
        if dt.tzinfo is None:
            dt = dt.replace(tzinfo=timezone.utc)
        
        diff = now - dt
        
        total_seconds = int(diff.total_seconds())
        
        if total_seconds < 0:
            return "—â–æ–π–Ω–æ"
        elif total_seconds < 60:
            return f"{total_seconds} —Å–µ–∫—É–Ω–¥ —Ç–æ–º—É"
        elif total_seconds < 3600:
            minutes = total_seconds // 60
            return f"{minutes} —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É"
        elif total_seconds < 86400:
            hours = total_seconds // 3600
            return f"{hours} –≥–æ–¥–∏–Ω —Ç–æ–º—É"
        else:
            days = total_seconds // 86400
            return f"{days} –¥–Ω—ñ–≤ —Ç–æ–º—É"
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —á–∞—Å—É: {e}")
        return ""

# Selenium Twitter –∫–æ–º–∞–Ω–¥–∏
@require_auth
async def selenium_auth_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ Twitter —á–µ—Ä–µ–∑ Selenium"""
    global selenium_twitter_monitor
    
    if not selenium_twitter_monitor:
        selenium_twitter_monitor = SeleniumTwitterMonitor()
        await selenium_twitter_monitor.__aenter__()
    
    await update.message.reply_text("üîê –í—ñ–¥–∫—Ä–∏–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤ Twitter...")
    
    try:
        if selenium_twitter_monitor.open_manual_auth():
            selenium_twitter_monitor.save_profile()
            await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ—Ñ—ñ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {str(e)}")

@require_auth
async def selenium_add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –¥–ª—è Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    global selenium_twitter_monitor
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /selenium_add pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    if project_manager.add_selenium_account(username, user_id):
        # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –≤ –ø–æ—Ç–æ—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä
        if not selenium_twitter_monitor:
            selenium_twitter_monitor = SeleniumTwitterMonitor()
            await selenium_twitter_monitor.__aenter__()
        
        if selenium_twitter_monitor.add_account(username):
            await update.message.reply_text(
                f"‚úÖ **–î–æ–¥–∞–Ω–æ Twitter –∞–∫–∞—É–Ω—Ç –¥–ª—è Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:**\n\n"
                f"‚Ä¢ Username: @{username}\n"
                f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∏–π\n"
                f"‚Ä¢ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ê–∫–∞—É–Ω—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—ñ, –∞–ª–µ –ø–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –º–æ–Ω—ñ—Ç–æ—Ä: @{username}")
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞: @{username}")

@require_auth
async def selenium_test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç—É–≤–∞—Ç–∏ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global selenium_twitter_monitor
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /selenium_test pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    if not selenium_twitter_monitor:
        selenium_twitter_monitor = SeleniumTwitterMonitor()
        await selenium_twitter_monitor.__aenter__()
    
    await update.message.reply_text(f"üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –¥–ª—è @{username}...")
    
    try:
        tweets = await selenium_twitter_monitor.get_user_tweets(username, limit=3)
        
        if tweets:
            result_text = f"‚úÖ **Selenium —Ç–µ—Å—Ç —É—Å–ø—ñ—à–Ω–∏–π!**\n\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤:\n\n"
            
            for i, tweet in enumerate(tweets, 1):
                text_preview = tweet['text'][:100] + "..." if len(tweet['text']) > 100 else tweet['text']
                result_text += f"{i}. {text_preview}\n"
                result_text += f"   üîó [–ü–µ—Ä–µ–π—Ç–∏]({tweet['url']})\n\n"
                
            await update.message.reply_text(result_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(f"‚ùå –¢–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è @{username}")
            
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {str(e)}")

@require_auth
async def selenium_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global selenium_twitter_monitor
    
    if not selenium_twitter_monitor:
        selenium_twitter_monitor = SeleniumTwitterMonitor()
        await selenium_twitter_monitor.__aenter__()
    
    if not selenium_twitter_monitor.monitoring_accounts:
        await update.message.reply_text("‚ùå –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É! –î–æ–¥–∞–π—Ç–µ Twitter –∞–∫–∞—É–Ω—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É.")
        return
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    import threading
    selenium_thread = threading.Thread(target=lambda: asyncio.run(start_selenium_twitter_monitoring()))
    selenium_thread.daemon = True
    selenium_thread.start()
    # –°—Ç–∞—Ä—Ç –ø—ñ—Å–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó ‚Äî –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫
    sync_monitors_with_projects()
    
    await update.message.reply_text("üöÄ **Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ!**\n\n–ë–æ—Ç –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥.", parse_mode='Markdown')

@require_auth
async def selenium_stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó—É–ø–∏–Ω–∏—Ç–∏ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"""
    global selenium_twitter_monitor
    
    if selenium_twitter_monitor:
        selenium_twitter_monitor.monitoring_active = False
        await selenium_twitter_monitor.__aexit__(None, None, None)
        selenium_twitter_monitor = None
    
    await update.message.reply_text("‚èπÔ∏è **Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ!**", parse_mode='Markdown')

# –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
@require_auth
async def accounts_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∞–∫–∞—É–Ω—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    user_id = update.effective_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ–µ–∫—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    projects = project_manager.get_user_projects(user_id)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ Selenium Twitter –∞–∫–∞—É–Ω—Ç–∏
    selenium_accounts = project_manager.get_selenium_accounts()
    
    # –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫
    text = "üìã **–í–∞—à—ñ –∞–∫–∞—É–Ω—Ç–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:**\n\n"
    
    # Selenium Twitter –∞–∫–∞—É–Ω—Ç–∏
    if selenium_accounts:
        text += "üöÄ **Selenium Twitter –∞–∫–∞—É–Ω—Ç–∏:**\n"
        for i, username in enumerate(selenium_accounts, 1):
            account_info = project_manager.get_selenium_account_info(username)
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π" if account_info and account_info.get('is_active', True) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            text += f"{i}. @{username} - {status}\n"
        text += "\n"
    
    # –ó–≤–∏—á–∞–π–Ω—ñ Twitter –ø—Ä–æ–µ–∫—Ç–∏
    if twitter_projects:
        text += "üê¶ **–ó–≤–∏—á–∞–π–Ω—ñ Twitter/X –∞–∫–∞—É–Ω—Ç–∏:**\n"
        for i, project in enumerate(twitter_projects, 1):
            username = extract_twitter_username(project['url'])
            text += f"{i}. @{username} ({project['name']})\n"
        text += "\n"
    
    # Discord –∫–∞–Ω–∞–ª–∏
    if discord_projects:
        text += "üí¨ **Discord –∫–∞–Ω–∞–ª–∏:**\n"
        for i, project in enumerate(discord_projects, 1):
            channel_id = extract_discord_channel_id(project['url'])
            text += f"{i}. –ö–∞–Ω–∞–ª {channel_id} ({project['name']})\n"
        text += "\n"
    
    # –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤
    if not selenium_accounts and not twitter_projects and not discord_projects:
        text += "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.\n\n"
        text += "–î–æ–¥–∞–π—Ç–µ –∞–∫–∞—É–Ω—Ç–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞ –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
        text += "‚Ä¢ /selenium_add username - –¥–æ–¥–∞—Ç–∏ Selenium Twitter –∞–∫–∞—É–Ω—Ç\n"
        text += "‚Ä¢ –ú–µ–Ω—é '–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç' - –¥–æ–¥–∞—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π –ø—Ä–æ–µ–∫—Ç"
    
    # –î–æ–¥–∞—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    text += "\nüîß **–ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:**\n"
    text += "‚Ä¢ /selenium_add username - –¥–æ–¥–∞—Ç–∏ Selenium Twitter –∞–∫–∞—É–Ω—Ç\n"
    text += "‚Ä¢ /selenium_remove username - –≤–∏–¥–∞–ª–∏—Ç–∏ Selenium Twitter –∞–∫–∞—É–Ω—Ç\n"
    text += "‚Ä¢ /remove_twitter username - –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–π Twitter –∞–∫–∞—É–Ω—Ç\n"
    text += "‚Ä¢ /remove_discord channel_id - –≤–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª\n"
    text += "‚Ä¢ /accounts - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ–π —Å–ø–∏—Å–æ–∫"
    
    await update.message.reply_text(text, parse_mode='Markdown')

@require_auth
async def remove_twitter_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ Twitter –∞–∫–∞—É–Ω—Ç –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /remove_twitter pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    projects = project_manager.get_user_projects(user_id)
    twitter_projects = [p for p in projects if p['platform'] == 'twitter']
    
    project_to_remove = None
    for project in twitter_projects:
        if extract_twitter_username(project['url']) == username:
            project_to_remove = project
            break
    
    if not project_to_remove:
        await update.message.reply_text(f"‚ùå Twitter –∞–∫–∞—É–Ω—Ç @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–µ–∫—Ç
    if project_manager.remove_project(user_id, project_to_remove['id']):
        await update.message.reply_text(f"‚úÖ Twitter –∞–∫–∞—É–Ω—Ç @{username} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        
        # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
        global selenium_twitter_monitor
        if selenium_twitter_monitor and username in selenium_twitter_monitor.monitoring_accounts:
            selenium_twitter_monitor.monitoring_accounts.discard(username)
            if username in selenium_twitter_monitor.seen_tweets:
                del selenium_twitter_monitor.seen_tweets[username]
            await update.message.reply_text(f"‚úÖ –ê–∫–∞—É–Ω—Ç @{username} —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        global twitter_monitor
        try:
            if twitter_monitor:
                twitter_monitor.remove_account(username)
        except Exception:
            pass
        # –ü—ñ—Å–ª—è –∑–º—ñ–Ω ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω —É—Å—ñ—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤
        sync_monitors_with_projects()
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Twitter –∞–∫–∞—É–Ω—Ç–∞ @{username}.")

@require_auth
async def selenium_remove_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ Selenium Twitter –∞–∫–∞—É–Ω—Ç –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    global selenium_twitter_monitor
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å username Twitter –∞–∫–∞—É–Ω—Ç–∞!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /selenium_remove pilk_xz")
        return
    
    username = context.args[0].replace('@', '').strip()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    if project_manager.remove_selenium_account(username):
        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞
        if selenium_twitter_monitor and username in selenium_twitter_monitor.monitoring_accounts:
            selenium_twitter_monitor.monitoring_accounts.remove(username)
            if username in selenium_twitter_monitor.seen_tweets:
                del selenium_twitter_monitor.seen_tweets[username]
        
        await update.message.reply_text(
            f"‚úÖ **–í–∏–¥–∞–ª–µ–Ω–æ Selenium Twitter –∞–∫–∞—É–Ω—Ç:**\n\n"
            f"‚Ä¢ Username: @{username}\n"
            f"‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n"
            f"‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞",
            parse_mode='Markdown'
        )
    else:
        await update.message.reply_text(f"‚ùå –ê–∫–∞—É–Ω—Ç @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")

@require_auth
async def remove_discord_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∏–¥–∞–ª–∏—Ç–∏ Discord –∫–∞–Ω–∞–ª –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    user_id = update.effective_user.id
    
    if not context.args:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å ID Discord –∫–∞–Ω–∞–ª—É!\n\n**–ü—Ä–∏–∫–ª–∞–¥:** /remove_discord 1358806016648544326")
        return
    
    channel_id = context.args[0].strip()
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    projects = project_manager.get_user_projects(user_id)
    discord_projects = [p for p in projects if p['platform'] == 'discord']
    
    project_to_remove = None
    for project in discord_projects:
        if extract_discord_channel_id(project['url']) == channel_id:
            project_to_remove = project
            break
    
    if not project_to_remove:
        await update.message.reply_text(f"‚ùå Discord –∫–∞–Ω–∞–ª {channel_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.")
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–µ–∫—Ç
    if project_manager.remove_project(user_id, project_to_remove['id']):
        await update.message.reply_text(f"‚úÖ Discord –∫–∞–Ω–∞–ª {channel_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        
        # –¢–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î–º–æ –∑ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∞ —è–∫—â–æ –≤—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
        global discord_monitor
        if discord_monitor and channel_id in discord_monitor.monitoring_channels:
            discord_monitor.monitoring_channels.discard(channel_id)
            if channel_id in discord_monitor.last_message_ids:
                del discord_monitor.last_message_ids[channel_id]
            await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
        # –ü—ñ—Å–ª—è –∑–º—ñ–Ω ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω
        sync_monitors_with_projects()
    else:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è Discord –∫–∞–Ω–∞–ª—É {channel_id}.")

def extract_twitter_username(url: str) -> str:
    """–í–∏—Ç—è–≥—Ç–∏ username –∑ Twitter URL"""
    import re
    match = re.search(r'twitter\.com/([^/?]+)', url)
    return match.group(1) if match else url

def extract_discord_channel_id(url: str) -> str:
    """–í–∏—Ç—è–≥—Ç–∏ channel_id –∑ Discord URL"""
    import re
    match = re.search(r'discord\.com/channels/\d+/(\d+)', url)
    return match.group(1) if match else url

async def admin_create_user_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
            parse_mode='Markdown'
        )
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /admin_create_user <telegram_id> <username> [password]\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /admin_create_user 123456789 JohnDoe mypassword",
            parse_mode='Markdown'
        )
        return
    
    try:
        telegram_id = int(context.args[0])
        username = context.args[1]
        password = context.args[2] if len(context.args) > 2 else None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id_created = access_manager.add_user(telegram_id, username, password)
        
        if user_id_created:
            await update.message.reply_text(
                f"‚úÖ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!**\n\n"
                f"üë§ **Username:** {username}\n"
                f"üÜî **Telegram ID:** {telegram_id}\n"
                f"üîê **–ü–∞—Ä–æ–ª—å:** {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}\n"
                f"üëë **–†–æ–ª—å:** –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á\n\n"
                f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ—é /login",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î).",
                parse_mode='Markdown'
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
            "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /admin_create_user 123456789 JohnDoe",
            parse_mode='Markdown'
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {str(e)}",
            parse_mode='Markdown'
        )

async def admin_create_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —ñ–Ω—à–∏—Ö –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.",
            parse_mode='Markdown'
        )
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "üìù **–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /admin_create_admin <telegram_id> <username> [password]\n\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /admin_create_admin 123456789 AdminJohn adminpass123",
            parse_mode='Markdown'
        )
        return
    
    try:
        telegram_id = int(context.args[0])
        username = context.args[1]
        password = context.args[2] if len(context.args) > 2 else None
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_id_created = access_manager.create_admin_user(telegram_id, username, password)
        
        if user_id_created:
            await update.message.reply_text(
                f"‚úÖ **–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!**\n\n"
                f"üë§ **Username:** {username}\n"
                f"üÜî **Telegram ID:** {telegram_id}\n"
                f"üîê **–ü–∞—Ä–æ–ª—å:** {password or '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º'}\n"
                f"üëë **–†–æ–ª—å:** –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä\n\n"
                f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥–æ—é /login",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–ª–∏–≤–æ, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î).",
                parse_mode='Markdown'
            )
            
    except ValueError:
        await update.message.reply_text(
            "‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
            "Telegram ID –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /admin_create_admin 123456789 AdminJohn",
            parse_mode='Markdown'
        )
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}",
            parse_mode='Markdown'
        )

async def admin_users_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!**\n\n"
            "–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
            parse_mode='Markdown'
        )
        return
    
    try:
        all_users = access_manager.get_all_users()
        
        if not all_users:
            await update.message.reply_text(
                "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                parse_mode='Markdown'
            )
            return
        
        users_text = "üë• **–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
        
        for i, user in enumerate(all_users[:20], 1):  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–∏—Ö 20
            role_emoji = "üëë" if user.get('role', 'user') == 'admin' else "üë§"
            status_emoji = "‚úÖ" if user.get('is_active', True) else "‚ùå"
            
            users_text += (
                f"{i}. {role_emoji} **{user.get('username', '–ë–µ–∑ —ñ–º–µ–Ω—ñ')}**\n"
                f"   üÜî ID: `{user.get('telegram_id')}`\n"
                f"   üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                f"   üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {user.get('created_at', '')[:10]}\n\n"
            )
        
        if len(all_users) > 20:
            users_text += f"... —Ç–∞ —â–µ {len(all_users) - 20} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤\n\n"
        
        users_text += f"**–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {len(all_users)}"
        
        await update.message.reply_text(users_text, parse_mode='Markdown')
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n{str(e)}",
            parse_mode='Markdown'
        )

def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    global bot_instance
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –°—Ç–≤–æ—Ä—ñ—Ç—å —Ñ–∞–π–ª .env –∑ BOT_TOKEN")
        return
    
    if not DISCORD_AUTHORIZATION:
        logger.warning("AUTHORIZATION —Ç–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
    application = Application.builder().token(BOT_TOKEN).build()
    bot_instance = application.bot
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    
    # –ö–æ–º–∞–Ω–¥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    application.add_handler(CommandHandler("login", login_command))
    application.add_handler(CommandHandler("logout", logout_command))
    application.add_handler(CommandHandler("register", register_command))
    
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Selenium Twitter –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("selenium_auth", selenium_auth_command))
    application.add_handler(CommandHandler("selenium_add", selenium_add_command))
    application.add_handler(CommandHandler("selenium_test", selenium_test_command))
    application.add_handler(CommandHandler("selenium_start", selenium_start_command))
    application.add_handler(CommandHandler("selenium_stop", selenium_stop_command))
    application.add_handler(CommandHandler("selenium_remove", selenium_remove_command))
    
    # –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∞—É–Ω—Ç—ñ–≤
    application.add_handler(CommandHandler("accounts", accounts_command))
    application.add_handler(CommandHandler("remove_twitter", remove_twitter_command))
    application.add_handler(CommandHandler("remove_discord", remove_discord_command))
    
    # –ü–µ—Ä–µ—Å–∏–ª–∞–Ω–Ω—è (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è)
    application.add_handler(CommandHandler("forward_on", forward_enable_command))
    application.add_handler(CommandHandler("forward_off", forward_disable_command))
    application.add_handler(CommandHandler("forward_status", forward_status_command))
    application.add_handler(CommandHandler("forward_set_channel", forward_set_channel_command))
    application.add_handler(CommandHandler("forward_test", forward_test_command))
    
    # –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("admin_create_user", admin_create_user_command))
    application.add_handler(CommandHandler("admin_create_admin", admin_create_admin_command))
    application.add_handler(CommandHandler("admin_users", admin_users_command))
    
    application.add_error_handler(error_handler)
    
    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Å–µ—Å—ñ–π (–∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É)
    job_queue = application.job_queue
    job_queue.run_repeating(check_sessions, interval=300, first=300)  # –ö–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    
    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∫–æ–∂–Ω—ñ 2 –≥–æ–¥–∏–Ω–∏)
    job_queue.run_repeating(cleanup_old_messages, interval=7200, first=7200)
    
    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ–π –¥–æ—Å—Ç—É–ø—É (–∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω)
    job_queue.run_repeating(cleanup_access_sessions, interval=1800, first=1800)  # –ö–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    if discord_monitor and DISCORD_AUTHORIZATION:
        import threading
        discord_thread = threading.Thread(target=lambda: asyncio.run(start_discord_monitoring()))
        discord_thread.daemon = True
        discord_thread.start()
        logger.info("Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    if twitter_monitor and TWITTER_AUTH_TOKEN:
        import threading
        twitter_thread = threading.Thread(target=lambda: asyncio.run(start_twitter_monitoring()))
        twitter_thread.daemon = True
        twitter_thread.start()
        logger.info("Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥
    global selenium_twitter_monitor
    selenium_twitter_monitor = SeleniumTwitterMonitor()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–∫–∞—É–Ω—Ç–∏
    saved_accounts = project_manager.get_selenium_accounts()
    if saved_accounts:
        logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(saved_accounts)} –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Selenium –∞–∫–∞—É–Ω—Ç—ñ–≤: {saved_accounts}")
        for username in saved_accounts:
            selenium_twitter_monitor.add_account(username)
        logger.info(f"‚úÖ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤–∏–π –∑ {len(saved_accounts)} –∞–∫–∞—É–Ω—Ç–∞–º–∏")
    else:
        logger.info("‚ÑπÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö Selenium –∞–∫–∞—É–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –±—É–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑ –∞–∫–∞—É–Ω—Ç—ñ–≤")
    
    # –ù–∞ —Å—Ç–∞—Ä—Ç—ñ –ø—Ä–æ–≤–æ–¥–∏–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ –∑ –ø—Ä–æ–µ–∫—Ç–∞–º–∏/–±–∞–∑–æ—é
    sync_monitors_with_projects()

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    selenium_thread = threading.Thread(target=lambda: asyncio.run(start_selenium_twitter_monitoring()))
    selenium_thread.daemon = True
    selenium_thread.start()
    logger.info("üöÄ Selenium Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    try:
        application.run_polling()
    except KeyboardInterrupt:
        # –ü—Ä–∏–º—É—Å–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ
        project_manager.save_data(force=True)
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ, –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

if __name__ == '__main__':
    main()