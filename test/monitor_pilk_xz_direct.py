#!/usr/bin/env python3
"""
–ü—Ä—è–º–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz –∑ HTML –ø–∞—Ä—Å–∏–Ω–≥–æ–º
"""

import asyncio
import logging
import requests
import re
import time
from datetime import datetime
from typing import Set, List, Dict

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DirectPilkXzMonitor:
    """–ü—Ä—è–º–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz"""
    
    def __init__(self):
        self.username = "pilk_xz"
        self.url = f"https://x.com/{self.username}"
        self.seen_tweets = set()  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∂–µ –ø–æ–±–∞—á–µ–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
        self.monitoring_active = False
        
        # Headers –¥–ª—è –∑–∞–ø–∏—Ç—ñ–≤
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        }
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ñ—ñ–ª—é"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz")
        print("=" * 60)
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ç–≤—ñ—Ç–∏
            print("üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤...")
            initial_tweets = await self._get_tweets_from_profile()
            
            if initial_tweets:
                print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(initial_tweets)} –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                for tweet in initial_tweets:
                    self.seen_tweets.add(tweet['id'])
                    print(f"   üìù {tweet['text'][:80]}...")
            else:
                print("‚ö†Ô∏è –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            print("\nüîÑ –ü–æ—á–∞—Ç–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤...")
            print("üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
            print("-" * 60)
            
            self.monitoring_active = True
            
            # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            while self.monitoring_active:
                try:
                    await self._check_for_new_posts()
                    await asyncio.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                    
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
                    self.monitoring_active = False
                    break
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                    await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            
    async def _get_tweets_from_profile(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é —á–µ—Ä–µ–∑ –ø—Ä—è–º–∏–π HTML –ø–∞—Ä—Å–∏–Ω–≥"""
        try:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ requests –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
            response = requests.get(self.url, headers=self.headers, timeout=15)
            
            if response.status_code == 200:
                html = response.text
                return self._parse_tweets_from_html(html)
            else:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {response.status_code}")
                return []
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤: {e}")
            return []
            
    def _parse_tweets_from_html(self, html: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ç–≤—ñ—Ç—ñ–≤ –∑ HTML"""
        tweets = []
        
        try:
            # –†—ñ–∑–Ω—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è –ø–æ—à—É–∫—É —Ç–≤—ñ—Ç—ñ–≤
            patterns = [
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É —Ç–≤—ñ—Ç—ñ–≤ –∑ data-tweet-id
                r'data-tweet-id="(\d+)"[^>]*>.*?<div[^>]*class="[^"]*tweet-text[^"]*"[^>]*>(.*?)</div>',
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É —Ç–≤—ñ—Ç—ñ–≤ –≤ article —Ç–µ–≥–∞—Ö
                r'<article[^>]*data-testid="tweet"[^>]*>.*?<div[^>]*dir="auto"[^>]*>(.*?)</div>',
                # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É —Ç–≤—ñ—Ç—ñ–≤ –∑ href
                r'href="/{}/status/(\d+)"[^>]*>.*?<div[^>]*dir="auto"[^>]*>(.*?)</div>'.format(self.username),
                # –ó–∞–≥–∞–ª—å–Ω–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ—à—É–∫—É —Ç–µ–∫—Å—Ç—ñ–≤ —Ç–≤—ñ—Ç—ñ–≤
                r'<div[^>]*dir="auto"[^>]*class="[^"]*"[^>]*>(.*?)</div>',
            ]
            
            for pattern in patterns:
                matches = re.findall(pattern, html, re.DOTALL | re.IGNORECASE)
                
                for match in matches:
                    if len(match) == 2:
                        tweet_id, text = match
                    else:
                        # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
                        text = match
                        tweet_id = f"html_{len(tweets)}_{int(time.time())}"
                    
                    # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ HTML —Ç–µ–≥—ñ–≤
                    clean_text = re.sub(r'<[^>]+>', '', text)
                    clean_text = re.sub(r'\s+', ' ', clean_text).strip()
                    
                    # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ç–µ–∫—Å—Ç–∏
                    if len(clean_text) > 10 and clean_text not in ['...', '.', '']:
                        tweets.append({
                            'id': tweet_id,
                            'text': clean_text,
                            'url': f"https://twitter.com/{self.username}/status/{tweet_id}",
                            'created_at': datetime.now().isoformat()
                        })
                        
                        # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–≤—ñ—Ç—ñ–≤
                        if len(tweets) >= 10:
                            break
                
                if tweets:
                    break  # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ç–≤—ñ—Ç–∏ –∑ —Ü–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º, –∑—É–ø–∏–Ω—è—î–º–æ—Å—è
            
            # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
            seen_texts = set()
            unique_tweets = []
            for tweet in tweets:
                if tweet['text'] not in seen_texts:
                    seen_texts.add(tweet['text'])
                    unique_tweets.append(tweet)
            
            return unique_tweets
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É HTML: {e}")
            return []
            
    async def _check_for_new_posts(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏"""
        try:
            tweets = await self._get_tweets_from_profile()
            
            if tweets:
                new_tweets = []
                current_tweet_ids = set()
                
                for tweet in tweets:
                    tweet_id = tweet['id']
                    current_tweet_ids.add(tweet_id)
                    
                    if tweet_id not in self.seen_tweets:
                        new_tweets.append(tweet)
                        print(f"üÜï –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π —Ç–≤—ñ—Ç: {tweet_id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
                self.seen_tweets = current_tweet_ids
                
                if new_tweets:
                    self._notify_new_posts(new_tweets)
                else:
                    current_time = datetime.now().strftime("%H:%M:%S")
                    print(f"[{current_time}] üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î (–≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è {len(self.seen_tweets)} —Ç–≤—ñ—Ç—ñ–≤)")
            else:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤: {e}")
            
    def _notify_new_posts(self, new_tweets):
        """–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏"""
        print("\n" + "üéâ" * 20)
        print("üÜï –ù–û–í–Ü –ü–û–°–¢–ò –ó–ù–ê–ô–î–ï–ù–û!")
        print("üéâ" * 20)
        
        for i, tweet in enumerate(new_tweets, 1):
            print(f"\nüìù –ü–æ—Å—Ç #{i}:")
            print(f"üÜî ID: {tweet['id']}")
            print(f"üë§ –ê–≤—Ç–æ—Ä: @{self.username}")
            print(f"üìÖ –ß–∞—Å: {tweet['created_at']}")
            print(f"üîó URL: {tweet['url']}")
            print(f"üìÑ –¢–µ–∫—Å—Ç:")
            print("-" * 40)
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            text = tweet['text']
            if len(text) > 200:
                print(text[:200] + "...")
                print(f"[–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤]")
            else:
                print(text)
                
            print("-" * 40)
            
        print(f"\n‚úÖ –í—Å—å–æ–≥–æ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤: {len(new_tweets)}")
        print("üéâ" * 20 + "\n")
        
    def print_status(self):
        """–í–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:")
        print(f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å: @{self.username}")
        print(f"üîÑ –ê–∫—Ç–∏–≤–Ω–∏–π: {'‚úÖ –¢–∞–∫' if self.monitoring_active else '‚ùå –ù—ñ'}")
        print(f"üìù –í—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è —Ç–≤—ñ—Ç—ñ–≤: {len(self.seen_tweets)}")
        print(f"üîó –ü—Ä–æ—Ñ—ñ–ª—å: {self.url}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    monitor = DirectPilkXzMonitor()
    
    try:
        await monitor.start_monitoring()
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
    finally:
        monitor.print_status()
        print("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    print("üê¶ –ü—Ä—è–º–∏–π –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz")
    print("=" * 40)
    asyncio.run(main())