#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import logging
import sys
import os

# –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ø–∞–ø–∫—É –¥–æ —à–ª—è—Ö—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from access_manager import access_manager

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_user_creation_flow():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é")
    print("=" * 60)
    
    try:
        # –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_id = access_manager.create_admin_user(99999, "test_admin", "admin123")
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_id}")
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        print("\n--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ---")
        
        # –°–∏–º—É–ª—é—î–º–æ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        test_telegram_id = 11111
        test_username = "test_user_menu"
        test_password = "userpass123"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î
        existing_user = access_manager.get_user_by_telegram_id(test_telegram_id)
        if existing_user:
            print(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {test_telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î")
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        created_user_id = access_manager.add_user(test_telegram_id, test_username, test_password)
        
        if created_user_id:
            print(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {created_user_id}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
            if access_manager.authenticate_user(test_telegram_id, test_password):
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∞—Ü—é—î")
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –ø—Ä–∞—Ü—é—î")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–ª—å
            user_role = access_manager.get_user_role(test_telegram_id)
            if user_role == "user":
                print("‚úÖ –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ä–æ–ª—å: {user_role}")
                return False
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            return False
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        print("\n--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---")
        
        test_admin_telegram_id = 22222
        test_admin_username = "test_admin_menu"
        test_admin_password = "adminpass123"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ —ñ—Å–Ω—É—î
        existing_admin = access_manager.get_user_by_telegram_id(test_admin_telegram_id)
        if existing_admin:
            print(f"‚ùå –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑ ID {test_admin_telegram_id} –≤–∂–µ —ñ—Å–Ω—É—î")
            return False
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        created_admin_id = access_manager.create_admin_user(test_admin_telegram_id, test_admin_username, test_admin_password)
        
        if created_admin_id:
            print(f"‚úÖ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å—Ç–≤–æ—Ä–µ–Ω–∏–π: {created_admin_id}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
            if access_manager.authenticate_user(test_admin_telegram_id, test_admin_password):
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∞—Ü—é—î")
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –ø—Ä–∞—Ü—é—î")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–ª—å
            admin_role = access_manager.get_user_role(test_admin_telegram_id)
            if admin_role == "admin":
                print("‚úÖ –†–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            else:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Ä–æ–ª—å: {admin_role}")
                return False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–∑–≤–æ–ª–∏
            if access_manager.check_permission(test_admin_telegram_id, "can_manage_users"):
                print("‚úÖ –î–æ–∑–≤–æ–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∞—Ü—é—é—Ç—å")
            else:
                print("‚ùå –î–æ–∑–≤–æ–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –ø—Ä–∞—Ü—é—é—Ç—å")
                return False
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
        print("\n--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ ---")
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —ñ—Å–Ω—É—é—á–∏–º ID
        duplicate_user_id = access_manager.add_user(test_telegram_id, "duplicate_user", "duplicate_pass")
        if duplicate_user_id:
            print("‚ùå –î—É–±–ª—ñ–∫–∞—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π (–Ω–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏)")
            return False
        else:
            print("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î")
        
        # –¢–µ—Å—Ç—É—î–º–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        print("\n--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ---")
        
        all_users = access_manager.get_all_users()
        print(f"‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {len(all_users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –Ω–∞—à—ñ —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ —Å–ø–∏—Å–∫—É
        test_users_found = 0
        for user in all_users:
            if user.get('telegram_id') in [test_telegram_id, test_admin_telegram_id, 99999]:
                test_users_found += 1
        
        if test_users_found >= 3:  # –ú—ñ–Ω—ñ–º—É–º 3 —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ —Å–ø–∏—Å–∫—É")
        else:
            print(f"‚ùå –ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ {test_users_found} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        return False

def test_menu_states():
    """–¢–µ—Å—Ç —Å—Ç–∞–Ω—ñ–≤ –º–µ–Ω—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤ –º–µ–Ω—é")
    print("=" * 40)
    
    try:
        # –°–∏–º—É–ª—é—î–º–æ —Å—Ç–∞–Ω–∏ –º–µ–Ω—é
        user_states = {}
        
        # –°–∏–º—É–ª—é—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_states[12345] = {
            'state': 'admin_creating_user',
            'data': {'step': 'telegram_id'}
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω
        if user_states[12345]['state'] == 'admin_creating_user':
            print("‚úÖ –°—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –°—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
        
        # –°–∏–º—É–ª—é—î–º–æ –ø–µ—Ä–µ—Ö—ñ–¥ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
        user_states[12345]['data']['telegram_id'] = 11111
        user_states[12345]['data']['step'] = 'username'
        
        if user_states[12345]['data']['step'] == 'username':
            print("‚úÖ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫—Ä–æ–∫—É username –ø—Ä–∞—Ü—é—î")
        else:
            print("‚ùå –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫—Ä–æ–∫—É username –Ω–µ –ø—Ä–∞—Ü—é—î")
            return False
        
        user_states[12345]['data']['username'] = 'test_user'
        user_states[12345]['data']['step'] = 'password'
        
        if user_states[12345]['data']['step'] == 'password':
            print("‚úÖ –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫—Ä–æ–∫—É password –ø—Ä–∞—Ü—é—î")
        else:
            print("‚ùå –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫—Ä–æ–∫—É password –Ω–µ –ø—Ä–∞—Ü—é—î")
            return False
        
        # –°–∏–º—É–ª—é—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user_states[54321] = {
            'state': 'admin_creating_admin',
            'data': {'step': 'telegram_id'}
        }
        
        if user_states[54321]['state'] == 'admin_creating_admin':
            print("‚úÖ –°—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        else:
            print("‚ùå –°—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤: {e}")
        return False

def test_validation():
    """–¢–µ—Å—Ç –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö")
    print("=" * 40)
    
    try:
        # –¢–µ—Å—Ç—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é Telegram ID
        valid_ids = ["123456789", "987654321", "111111111"]
        invalid_ids = ["abc", "123abc", "", "12.34"]
        
        for valid_id in valid_ids:
            if valid_id.isdigit():
                print(f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏–π ID: {valid_id}")
            else:
                print(f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID: {valid_id}")
                return False
        
        for invalid_id in invalid_ids:
            if not invalid_id.isdigit():
                print(f"‚úÖ –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ: {invalid_id}")
            else:
                print(f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π ID –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–π–Ω—è—Ç–æ: {invalid_id}")
                return False
        
        # –¢–µ—Å—Ç—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é username
        valid_usernames = ["JohnDoe", "admin_user", "test123", ""]
        invalid_usernames = ["user with spaces", "user@domain.com"]
        
        for username in valid_usernames:
            if len(username) <= 50:  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É
                print(f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏–π username: '{username}'")
            else:
                print(f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π username: '{username}'")
                return False
        
        # –¢–µ—Å—Ç—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é –ø–∞—Ä–æ–ª—è
        valid_passwords = ["password123", "admin_pass", "simple", ""]
        
        for password in valid_passwords:
            if len(password) <= 100:  # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É
                print(f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å: '{password}'")
            else:
                print(f"‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ø–∞—Ä–æ–ª—å: '{password}'")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–¢–í–û–†–ï–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í –ß–ï–†–ï–ó –ú–ï–ù–Æ")
    print("=" * 70)
    
    # –¢–µ—Å—Ç—É—î–º–æ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    creation_test = test_user_creation_flow()
    
    # –¢–µ—Å—Ç—É—î–º–æ —Å—Ç–∞–Ω–∏ –º–µ–Ω—é
    states_test = test_menu_states()
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
    validation_test = test_validation()
    
    print("\n" + "=" * 70)
    print("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print(f"üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {'‚úÖ –ü–†–û–ô–®–û–í' if creation_test else '‚ùå –ù–ï –ü–†–û–ô–®–û–í'}")
    print(f"üéÆ –°—Ç–∞–Ω–∏ –º–µ–Ω—é: {'‚úÖ –ü–†–û–ô–®–û–í' if states_test else '‚ùå –ù–ï –ü–†–û–ô–®–û–í'}")
    print(f"üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö: {'‚úÖ –ü–†–û–ô–®–û–í' if validation_test else '‚ùå –ù–ï –ü–†–û–ô–®–û–í'}")
    
    if creation_test and states_test and validation_test:
        print("\nüéä –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–®–õ–ò –£–°–ü–Ü–®–ù–û!")
        print("\nüìã –ü—ñ–¥—Å—É–º–æ–∫ –Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É:")
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î")
        print("‚úÖ –°—Ç–∞–Ω–∏ –º–µ–Ω—é –ø—Ä–∞—Ü—é—é—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        print("\nüöÄ –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è!")
        print("\nüìù –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:")
        print("1. –£–≤—ñ–π–¥—ñ—Ç—å —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: /login")
        print("2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å")
        print("3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ")
        print("4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å: ‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ üëë –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞")
        print("5. –°–ª—ñ–¥—É–π—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö")
    else:
        print("\n‚ùå –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ù–ï –ü–†–û–ô–®–õ–ò!")
        print("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏.")

if __name__ == "__main__":
    main()