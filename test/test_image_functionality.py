#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è Twitter —Ç–∞ Discord –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
"""

import asyncio
import logging
from selenium_twitter_monitor import SeleniumTwitterMonitor
from discord_monitor import DiscordMonitor

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_twitter_image_extraction():
    """–¢–µ—Å—Ç –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ Twitter"""
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ Twitter...")
    
    try:
        async with SeleniumTwitterMonitor() as monitor:
            # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç
            test_account = "pilk_xz"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∞–∫–∞—É–Ω—Ç –∑ –ø—Ä–æ–µ–∫—Ç—É
            monitor.add_account(test_account)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–≤—ñ—Ç–∏
            tweets = await monitor.get_user_tweets(test_account, limit=3)
            
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤")
            
            for i, tweet in enumerate(tweets):
                print(f"\nüìù –¢–≤—ñ—Ç {i+1}:")
                print(f"   ID: {tweet.get('id', 'N/A')}")
                print(f"   –¢–µ–∫—Å—Ç: {tweet.get('text', 'N/A')[:100]}...")
                print(f"   URL: {tweet.get('url', 'N/A')}")
                
                images = tweet.get('images', [])
                print(f"   üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}")
                
                for j, image_url in enumerate(images):
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–µ –∞–≤–∞—Ç–∞—Ä–∫–∞
                    is_avatar = any(pattern in image_url.lower() for pattern in [
                        'profile_images', 'avatar', 'normal.jpg', 'bigger.jpg', 'mini.jpg'
                    ])
                    avatar_status = " (–ê–í–ê–¢–ê–†–ö–ê!)" if is_avatar else " (–ó–û–ë–†–ê–ñ–ï–ù–ù–Ø –¢–í–Ü–¢–ê)"
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    has_params = '?' in image_url and ('format=' in image_url or 'name=' in image_url)
                    param_status = " ‚úÖ –ó –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏" if has_params else " ‚ö†Ô∏è –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤"
                    
                    print(f"      {j+1}. {image_url}{avatar_status}{param_status}")
                
                if images:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Å–ø—Ä–∞–≤–∂–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–≤—ñ—Ç–∞
                    real_images = [img for img in images if not any(pattern in img.lower() for pattern in [
                        'profile_images', 'avatar', 'normal.jpg', 'bigger.jpg', 'mini.jpg'
                    ])]
                    
                    if real_images:
                        print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(real_images)} —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–≤—ñ—Ç–∞!")
                    else:
                        print("   ‚ö†Ô∏è  –ó–Ω–∞–π–¥–µ–Ω—ñ —Ç—ñ–ª—å–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏, —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å —Ç–≤—ñ—Ç–∞ –Ω–µ–º–∞—î")
                else:
                    print("   ‚ÑπÔ∏è  –ó–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            return len(tweets) > 0
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Twitter: {e}")
        return False

async def test_discord_image_extraction():
    """–¢–µ—Å—Ç –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ Discord"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑ Discord...")
    
    # –ü–æ—Ç—Ä—ñ–±–µ–Ω Discord authorization —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    discord_token = None  # –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    
    if not discord_token:
        print("‚ö†Ô∏è  Discord authorization —Ç–æ–∫–µ–Ω –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç")
        return True
    
    try:
        async with DiscordMonitor(discord_token) as monitor:
            # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–∞–Ω–∞–ª
            test_channel = "https://discord.com/channels/1408570777275469866/1413243132467871839"
            monitor.add_channel(test_channel)
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            messages = await monitor.check_new_messages()
            
            print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(messages)} –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
            
            for i, message in enumerate(messages):
                print(f"\nüí¨ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {i+1}:")
                print(f"   ID: {message.get('message_id', 'N/A')}")
                print(f"   –ê–≤—Ç–æ—Ä: {message.get('author', 'N/A')}")
                print(f"   –¢–µ–∫—Å—Ç: {message.get('content', 'N/A')[:100]}...")
                print(f"   URL: {message.get('url', 'N/A')}")
                
                images = message.get('images', [])
                print(f"   üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}")
                
                for j, image_url in enumerate(images):
                    print(f"      {j+1}. {image_url}")
                
                if images:
                    print("   ‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏—Ç—è–≥–Ω—É—Ç—ñ!")
                else:
                    print("   ‚ÑπÔ∏è  –ó–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Discord: {e}")
        return False

def test_image_download():
    """–¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å"""
    print("\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å...")
    
    # –¢–µ—Å—Ç–æ–≤—ñ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å
    test_urls = [
        "https://pbs.twimg.com/media/example.jpg",  # –ü—Ä–∏–∫–ª–∞–¥ Twitter –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        "https://cdn.discordapp.com/attachments/example.png"  # –ü—Ä–∏–∫–ª–∞–¥ Discord –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    ]
    
    try:
        from bot import download_and_send_image
        
        for i, url in enumerate(test_urls):
            print(f"üì• –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {i+1}: {url}")
            
            # –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (–±–µ–∑ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram)
            import requests
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            }
            
            try:
                response = requests.head(url, headers=headers, timeout=5)
                if response.status_code == 200:
                    print(f"   ‚úÖ URL –¥–æ—Å—Ç—É–ø–Ω–∏–π (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                else:
                    print(f"   ‚ö†Ô∏è  URL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
            except Exception as e:
                print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ URL: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {e}")
        return False

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç—É—î–º–æ Twitter
    twitter_result = await test_twitter_image_extraction()
    results.append(("Twitter", twitter_result))
    
    # –¢–µ—Å—Ç—É—î–º–æ Discord
    discord_result = await test_discord_image_extraction()
    results.append(("Discord", discord_result))
    
    # –¢–µ—Å—Ç—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    download_result = test_image_download()
    results.append(("Download", download_result))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    print("=" * 60)
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
        print(f"{test_name:15} {status}")
        if not result:
            all_passed = False
    
    print("=" * 60)
    if all_passed:
        print("üéâ –í–°–Ü –¢–ï–°–¢–ò –ü–†–û–ô–î–ï–ù–û! –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø—Ä–∞—Ü—é—î.")
    else:
        print("‚ö†Ô∏è  –î–ï–Ø–ö–Ü –¢–ï–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–Ü. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    
    return all_passed

if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)