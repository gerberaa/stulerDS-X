#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz –Ω–∞ Twitter/X
"""

import asyncio
import logging
import time
from datetime import datetime
from twitter_monitor import TwitterMonitor

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PilkXzMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz"""
    
    def __init__(self):
        self.auth_token = "262d2ffed60222b5c42f4150300cb144ac012871"
        self.csrf_token = "ddf294f36c4c0fd61ca8fae2dea1b30f24b82d01ddc860b9c0bf8009876a744b031f8d07b1e4774dea6771b26adcdc217b44726d034345a324b1e0999b31cf9513eeafc0954310dd3478db570e59d170"
        self.username = "pilk_xz"
        self.twitter_monitor = None
        self.last_tweet_ids = set()  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∂–µ –ø–æ–±–∞—á–µ–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
        self.monitoring_active = False
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ñ—ñ–ª—é"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz")
        print("=" * 50)
        
        try:
            async with TwitterMonitor(self.auth_token, self.csrf_token) as monitor:
                self.twitter_monitor = monitor
                
                # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
                monitor.add_account(self.username)
                print(f"‚úÖ –î–æ–¥–∞–Ω–æ –∞–∫–∞—É–Ω—Ç @{self.username} –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
                
                # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –¥–ª—è –±–∞–∑–∏
                print("üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤...")
                initial_tweets = await monitor.get_user_tweets(self.username, limit=10)
                
                if initial_tweets:
                    real_tweets = []
                    for tweet in initial_tweets:
                        if self._is_real_tweet(tweet):
                            real_tweets.append(tweet)
                            self.last_tweet_ids.add(tweet['id'])
                    
                    print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(real_tweets)} —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö —Ç–≤—ñ—Ç—ñ–≤ (–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(initial_tweets) - len(real_tweets)} —Å–∏—Å—Ç–µ–º–Ω–∏—Ö)")
                    
                    if real_tweets:
                        print("üìù –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Ç–≤—ñ—Ç–∏:")
                        for tweet in real_tweets[:3]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ 3
                            text_preview = tweet['text'][:60] + "..." if len(tweet['text']) > 60 else tweet['text']
                            print(f"   üìù {text_preview}")
                    else:
                        print("‚ö†Ô∏è –°–ø—Ä–∞–≤–∂–Ω—ñ—Ö —Ç–≤—ñ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                else:
                    print("‚ö†Ô∏è –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                
                print("\nüîÑ –ü–æ—á–∞—Ç–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤...")
                print("üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
                print("-" * 50)
                
                self.monitoring_active = True
                
                # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
                while self.monitoring_active:
                    try:
                        await self._check_for_new_posts()
                        await asyncio.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                        
                    except KeyboardInterrupt:
                        print("\n‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
                        self.monitoring_active = False
                        break
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                        await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                        
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            
    async def _check_for_new_posts(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏"""
        try:
            tweets = await self.twitter_monitor.get_user_tweets(self.username, limit=10)
            
            if tweets:
                new_tweets = []
                current_tweet_ids = set()
                
                # –°–ø–æ—á–∞—Ç–∫—É –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ ID
                for tweet in tweets:
                    tweet_id = tweet['id']
                    current_tweet_ids.add(tweet_id)
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–æ–≤–∏–π —Ç–≤—ñ—Ç
                    if tweet_id not in self.last_tweet_ids:
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - —á–∏ —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–≤—ñ—Ç, –∞ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ñ –¥–∞–Ω—ñ
                        if self._is_real_tweet(tweet):
                            new_tweets.append(tweet)
                            print(f"üÜï –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π —Ç–≤—ñ—Ç: {tweet_id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
                self.last_tweet_ids = current_tweet_ids
                
                # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if len(tweets) > 0:
                    print(f"üîç –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –æ—Ç—Ä–∏–º–∞–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤, –∑–Ω–∞–π–¥–µ–Ω–æ {len(new_tweets)} –Ω–æ–≤–∏—Ö")
                    for tweet in tweets[:2]:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 2 —Ç–≤—ñ—Ç–∏ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                        print(f"   üìã –¢–≤—ñ—Ç ID: {tweet['id']}, –¢–µ–∫—Å—Ç: '{tweet.get('text', '')[:30]}...', –†–µ–∞–ª—å–Ω–∏–π: {self._is_real_tweet(tweet)}")
                
                if new_tweets:
                    self._notify_new_posts(new_tweets)
                else:
                    # –¢–∏—Ö–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è - –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î
                    current_time = datetime.now().strftime("%H:%M:%S")
                    print(f"[{current_time}] üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î (–≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è {len(self.last_tweet_ids)} —Ç–≤—ñ—Ç—ñ–≤)")
            else:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤: {e}")
            
    def _is_real_tweet(self, tweet):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–≤—ñ—Ç, –∞ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ñ –¥–∞–Ω—ñ"""
        tweet_id = tweet['id']
        text = tweet.get('text', '')
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω—ñ –¥–∞–Ω—ñ
        system_keywords = ['entities', 'errors', 'fetchStatus', 'timeline', 'user', 'data']
        
        # –Ø–∫—â–æ ID –º—ñ—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
        if any(keyword in tweet_id.lower() for keyword in system_keywords):
            return False
            
        # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª—å–∫–∏ –∫—Ä–∞–ø–∫–∏
        if not text or text.strip() in ['.', '...', '']:
            return False
            
        # –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π (–º–µ–Ω—à–µ 5 —Å–∏–º–≤–æ–ª—ñ–≤)
        if len(text.strip()) < 5:
            return False
            
        # –Ø–∫—â–æ —Ü–µ –≤–∏–≥–ª—è–¥–∞—î —è–∫ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–≤—ñ—Ç
        return True
            
    def _notify_new_posts(self, new_tweets):
        """–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏"""
        print("\n" + "üéâ" * 20)
        print("üÜï –ù–û–í–Ü –ü–û–°–¢–ò –ó–ù–ê–ô–î–ï–ù–û!")
        print("üéâ" * 20)
        
        for i, tweet in enumerate(new_tweets, 1):
            print(f"\nüìù –ü–æ—Å—Ç #{i}:")
            print(f"üÜî ID: {tweet['id']}")
            print(f"üë§ –ê–≤—Ç–æ—Ä: @{tweet['user']['screen_name']}")
            print(f"üìÖ –ß–∞—Å: {tweet['created_at']}")
            print(f"üîó URL: {tweet['url']}")
            print(f"üìÑ –¢–µ–∫—Å—Ç:")
            print("-" * 40)
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            text = tweet['text']
            if len(text) > 200:
                print(text[:200] + "...")
                print(f"[–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤]")
            else:
                print(text)
                
            print("-" * 40)
            
        print(f"\n‚úÖ –í—Å—å–æ–≥–æ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤: {len(new_tweets)}")
        print("üéâ" * 20 + "\n")
        
    def print_status(self):
        """–í–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:")
        print(f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å: @{self.username}")
        print(f"üîÑ –ê–∫—Ç–∏–≤–Ω–∏–π: {'‚úÖ –¢–∞–∫' if self.monitoring_active else '‚ùå –ù—ñ'}")
        print(f"üìù –í—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è —Ç–≤—ñ—Ç—ñ–≤: {len(self.last_tweet_ids)}")
        print(f"üîó –ü—Ä–æ—Ñ—ñ–ª—å: https://x.com/{self.username}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    monitor = PilkXzMonitor()
    
    try:
        await monitor.start_monitoring()
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
    finally:
        monitor.print_status()
        print("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    print("üê¶ –ú–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz")
    print("=" * 30)
    asyncio.run(main())