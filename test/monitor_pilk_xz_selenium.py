#!/usr/bin/env python3
"""
–ú–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Selenium —Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
"""

import asyncio
import logging
import time
import json
from datetime import datetime
from typing import Set, List, Dict
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SeleniumPilkXzMonitor:
    """–ú–æ–Ω—ñ—Ç–æ—Ä –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz –∑ Selenium"""
    
    def __init__(self):
        self.username = "pilk_xz"
        self.url = f"https://x.com/{self.username}"
        self.seen_tweets = set()  # –î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∂–µ –ø–æ–±–∞—á–µ–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
        self.monitoring_active = False
        self.driver = None
        
    def _setup_driver(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ Chrome –¥—Ä–∞–π–≤–µ—Ä"""
        chrome_options = Options()
        
        # –ë–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-blink-features=AutomationControlled')
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # User Agent
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        
        # –í—ñ–¥–∫–ª—é—á–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
        prefs = {
            "profile.managed_default_content_settings.images": 2,
            "profile.default_content_setting_values.notifications": 2
        }
        chrome_options.add_experimental_option("prefs", prefs)
        
        # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ (–∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
        # chrome_options.add_argument('--headless')
        
        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            logger.info("Chrome –¥—Ä–∞–π–≤–µ—Ä —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Chrome –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            return False
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ñ—ñ–ª—é"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Selenium –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz")
        print("=" * 60)
        
        if not self._setup_driver():
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±—Ä–∞—É–∑–µ—Ä")
            return
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Ç–≤—ñ—Ç–∏
            print("üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤...")
            initial_tweets = await self._get_tweets_from_profile()
            
            if initial_tweets:
                print(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {len(initial_tweets)} –ø–æ—á–∞—Ç–∫–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                for tweet in initial_tweets:
                    self.seen_tweets.add(tweet['id'])
                    print(f"   üìù {tweet['text'][:80]}...")
            else:
                print("‚ö†Ô∏è –ü–æ—á–∞—Ç–∫–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
            print("\nüîÑ –ü–æ—á–∞—Ç–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤...")
            print("üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
            print("-" * 60)
            
            self.monitoring_active = True
            
            # –û—Å–Ω–æ–≤–Ω–∏–π —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
            while self.monitoring_active:
                try:
                    await self._check_for_new_posts()
                    await asyncio.sleep(30)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
                    
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è –ó—É–ø–∏–Ω–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
                    self.monitoring_active = False
                    break
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ü–∏–∫–ª—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
                    await asyncio.sleep(10)  # –ö–æ—Ä–æ—Ç—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
                    
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
        finally:
            if self.driver:
                self.driver.quit()
                print("üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä–∏—Ç–æ")
            
    async def _get_tweets_from_profile(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏ –∑ –ø—Ä–æ—Ñ—ñ–ª—é —á–µ—Ä–µ–∑ Selenium"""
        try:
            print(f"üåê –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å: {self.url}")
            self.driver.get(self.url)
            
            # –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            await asyncio.sleep(5)
            
            # –ß–µ–∫–∞—î–º–æ –ø–æ—è–≤–∏ —Ç–≤—ñ—Ç—ñ–≤
            try:
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR, '[data-testid="tweet"]'))
                )
                print("‚úÖ –¢–≤—ñ—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ")
            except TimeoutException:
                print("‚ö†Ô∏è –¢–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –∑–∞ 10 —Å–µ–∫—É–Ω–¥, —Å–ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–≤—ñ—Ç–∏
            tweets = self._extract_tweets_from_page()
            return tweets
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤: {e}")
            return []
            
    def _extract_tweets_from_page(self) -> List[Dict]:
        """–í–∏—Ç—è–≥—Ç–∏ —Ç–≤—ñ—Ç–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        tweets = []
        
        try:
            # –†—ñ–∑–Ω—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É —Ç–≤—ñ—Ç—ñ–≤
            selectors = [
                '[data-testid="tweet"]',
                'article[role="article"]',
                '[data-testid="tweetText"]',
                '.tweet'
            ]
            
            tweet_elements = []
            for selector in selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if elements:
                        tweet_elements = elements
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(elements)} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: {selector}")
                        break
                except Exception as e:
                    continue
            
            if not tweet_elements:
                print("‚ùå –¢–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                return []
            
            # –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∑ –∫–æ–∂–Ω–æ–≥–æ —Ç–≤—ñ—Ç–∞
            for i, element in enumerate(tweet_elements[:10]):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ç–≤—ñ—Ç—ñ–≤
                try:
                    tweet_data = self._extract_tweet_data(element, i)
                    if tweet_data:
                        tweets.append(tweet_data)
                except Exception as e:
                    logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–≤—ñ—Ç–∞ {i}: {e}")
                    continue
            
            print(f"üìù –í–∏—Ç—è–≥–Ω—É—Ç–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤")
            return tweets
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤: {e}")
            return []
            
    def _extract_tweet_data(self, element, index: int) -> Dict:
        """–í–∏—Ç—è–≥—Ç–∏ –¥–∞–Ω—ñ –∑ –æ–¥–Ω–æ–≥–æ —Ç–≤—ñ—Ç–∞"""
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç —Ç–≤—ñ—Ç–∞
            text_selectors = [
                '[data-testid="tweetText"]',
                '[dir="auto"]',
                '.tweet-text',
                'div[role="button"]'
            ]
            
            text = ""
            for selector in text_selectors:
                try:
                    text_element = element.find_element(By.CSS_SELECTOR, selector)
                    text = text_element.text.strip()
                    if text:
                        break
                except NoSuchElementException:
                    continue
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ç–µ–∫—Å—Ç, —Å–ø—Ä–æ–±—É—î–º–æ –∑ —É—Å—å–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
            if not text:
                text = element.text.strip()
            
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ ID —Ç–≤—ñ—Ç–∞
            tweet_id = f"selenium_{index}_{int(time.time())}"
            
            # –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–≤—ñ—Ç
            tweet_url = f"https://x.com/{self.username}"
            try:
                link_element = element.find_element(By.CSS_SELECTOR, 'a[href*="/status/"]')
                href = link_element.get_attribute('href')
                if href:
                    tweet_url = href
                    # –í–∏—Ç—è–≥—É—î–º–æ ID –∑ URL
                    if '/status/' in href:
                        tweet_id = href.split('/status/')[-1].split('?')[0]
            except NoSuchElementException:
                pass
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–æ—Ä–æ—Ç–∫—ñ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ç–µ–∫—Å—Ç–∏
            if len(text) < 5:
                return None
            
            return {
                'id': tweet_id,
                'text': text,
                'url': tweet_url,
                'created_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.debug(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–≤—ñ—Ç–∞: {e}")
            return None
            
    async def _check_for_new_posts(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏"""
        try:
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É
            print("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É...")
            self.driver.refresh()
            await asyncio.sleep(3)
            
            tweets = await self._get_tweets_from_profile()
            
            if tweets:
                new_tweets = []
                current_tweet_ids = set()
                
                for tweet in tweets:
                    tweet_id = tweet['id']
                    current_tweet_ids.add(tweet_id)
                    
                    if tweet_id not in self.seen_tweets:
                        new_tweets.append(tweet)
                        print(f"üÜï –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–π —Ç–≤—ñ—Ç: {tweet_id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞–Ω–∏—Ö —Ç–≤—ñ—Ç—ñ–≤
                self.seen_tweets = current_tweet_ids
                
                if new_tweets:
                    self._notify_new_posts(new_tweets)
                else:
                    current_time = datetime.now().strftime("%H:%M:%S")
                    print(f"[{current_time}] üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤ –Ω–µ–º–∞—î (–≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è {len(self.seen_tweets)} —Ç–≤—ñ—Ç—ñ–≤)")
            else:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤: {e}")
            
    def _notify_new_posts(self, new_tweets):
        """–ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –Ω–æ–≤—ñ –ø–æ—Å—Ç–∏"""
        print("\n" + "üéâ" * 20)
        print("üÜï –ù–û–í–Ü –ü–û–°–¢–ò –ó–ù–ê–ô–î–ï–ù–û!")
        print("üéâ" * 20)
        
        for i, tweet in enumerate(new_tweets, 1):
            print(f"\nüìù –ü–æ—Å—Ç #{i}:")
            print(f"üÜî ID: {tweet['id']}")
            print(f"üë§ –ê–≤—Ç–æ—Ä: @{self.username}")
            print(f"üìÖ –ß–∞—Å: {tweet['created_at']}")
            print(f"üîó URL: {tweet['url']}")
            print(f"üìÑ –¢–µ–∫—Å—Ç:")
            print("-" * 40)
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            text = tweet['text']
            if len(text) > 200:
                print(text[:200] + "...")
                print(f"[–ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç: {len(text)} —Å–∏–º–≤–æ–ª—ñ–≤]")
            else:
                print(text)
                
            print("-" * 40)
            
        print(f"\n‚úÖ –í—Å—å–æ–≥–æ –Ω–æ–≤–∏—Ö –ø–æ—Å—Ç—ñ–≤: {len(new_tweets)}")
        print("üéâ" * 20 + "\n")
        
    def print_status(self):
        """–í–∏–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        print(f"\nüìä –°—Ç–∞—Ç—É—Å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:")
        print(f"üë§ –ü—Ä–æ—Ñ—ñ–ª—å: @{self.username}")
        print(f"üîÑ –ê–∫—Ç–∏–≤–Ω–∏–π: {'‚úÖ –¢–∞–∫' if self.monitoring_active else '‚ùå –ù—ñ'}")
        print(f"üìù –í—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è —Ç–≤—ñ—Ç—ñ–≤: {len(self.seen_tweets)}")
        print(f"üîó –ü—Ä–æ—Ñ—ñ–ª—å: {self.url}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    monitor = SeleniumPilkXzMonitor()
    
    try:
        await monitor.start_monitoring()
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
    finally:
        monitor.print_status()
        print("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    print("üê¶ Selenium –º–æ–Ω—ñ—Ç–æ—Ä –ø—Ä–æ—Ñ—ñ–ª—é @pilk_xz")
    print("=" * 45)
    print("‚ö†Ô∏è –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –≤–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π Chrome —Ç–∞ ChromeDriver")
    print("üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ: pip install selenium")
    print("=" * 45)
    asyncio.run(main())