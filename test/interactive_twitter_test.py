#!/usr/bin/env python3
"""
–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
–î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
"""

import asyncio
import logging
import json
from datetime import datetime
from twitter_monitor import TwitterMonitor
from config import TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN, TWITTER_MONITORING_INTERVAL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class InteractiveTwitterTester:
    """–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç–µ—Ä Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    
    def __init__(self):
        self.monitor = TwitterMonitor(TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN)
        self.monitoring_accounts = []
        
    def print_menu(self):
        """–í–∏–≤–µ—Å—Ç–∏ –º–µ–Ω—é –æ–ø—Ü—ñ–π"""
        print("\n" + "=" * 50)
        print("üê¶ –Ü–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ò–ô –¢–ï–°–¢ TWITTER –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£")
        print("=" * 50)
        print("1. üîó –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
        print("2. üìù –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥—É URL")
        print("3. üê¶ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏ –∞–∫–∞—É–Ω—Ç–∞")
        print("4. üìä –î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        print("5. üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏")
        print("6. ‚è±Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (30 —Å–µ–∫)")
        print("7. üìã –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤")
        print("8. üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤")
        print("9. üì¢ –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å")
        print("0. üö™ –í–∏—Ö—ñ–¥")
        print("=" * 50)
        
    def extract_twitter_username(self, url: str) -> str:
        """–í–∏—Ç—è–≥—Ç–∏ username –∑ Twitter URL"""
        try:
            if 'twitter.com' in url or 'x.com' in url:
                url = url.replace('https://', '').replace('http://', '')
                if url.startswith('www.'):
                    url = url[4:]
                    
                if url.startswith('twitter.com/'):
                    username = url.split('/')[1]
                elif url.startswith('x.com/'):
                    username = url.split('/')[1]
                else:
                    return None
                    
                username = username.split('?')[0].split('#')[0]
                return username if username else None
                
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Twitter username: {e}")
            return None
            
    async def test_connection(self):
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
        print("\nüîó –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Twitter...")
        
        try:
            async with self.monitor:
                print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ!")
                return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            return False
            
    def test_url_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥—É URL"""
        print("\nüìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É URL...")
        
        while True:
            url = input("–í–≤–µ–¥—ñ—Ç—å Twitter URL (–∞–±–æ 'back' –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è): ").strip()
            
            if url.lower() == 'back':
                break
                
            if not url:
                print("‚ùå –í–≤–µ–¥—ñ—Ç—å URL!")
                continue
                
            username = self.extract_twitter_username(url)
            print(f"URL: {url}")
            print(f"Username: {username if username else '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ'}")
            
    async def get_account_tweets(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–≤—ñ—Ç–∏ –∞–∫–∞—É–Ω—Ç–∞"""
        print("\nüê¶ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤ –∞–∫–∞—É–Ω—Ç–∞...")
        
        username = input("–í–≤–µ–¥—ñ—Ç—å username (–±–µ–∑ @): ").strip().replace('@', '')
        
        if not username:
            print("‚ùå –í–≤–µ–¥—ñ—Ç—å username!")
            return
            
        try:
            async with self.monitor:
                print(f"üì± –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤ –¥–ª—è @{username}...")
                
                tweets = await self.monitor.get_user_tweets(username, limit=5)
                
                if tweets:
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤:")
                    print("-" * 50)
                    
                    for i, tweet in enumerate(tweets, 1):
                        text = tweet.get('text', '')[:100]
                        timestamp = tweet.get('created_at', '–ù–µ–≤—ñ–¥–æ–º–æ')
                        print(f"{i}. {text}...")
                        print(f"   –ß–∞—Å: {timestamp}")
                        print()
                else:
                    print("‚ö†Ô∏è –¢–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                    
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            
    def add_account_to_monitoring(self):
        """–î–æ–¥–∞—Ç–∏ –∞–∫–∞—É–Ω—Ç –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        print("\nüìä –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
        
        username = input("–í–≤–µ–¥—ñ—Ç—å username (–±–µ–∑ @): ").strip().replace('@', '')
        
        if not username:
            print("‚ùå –í–≤–µ–¥—ñ—Ç—å username!")
            return
            
        if username in self.monitoring_accounts:
            print(f"‚ö†Ô∏è @{username} –≤–∂–µ –≤ —Å–ø–∏—Å–∫—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
            return
            
        self.monitoring_accounts.append(username)
        print(f"‚úÖ @{username} –¥–æ–¥–∞–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        
    async def check_new_tweets(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–≤—ñ —Ç–≤—ñ—Ç–∏"""
        print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤...")
        
        if not self.monitoring_accounts:
            print("‚ùå –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É!")
            return
            
        try:
            async with self.monitor:
                # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç–∏ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∞
                for account in self.monitoring_accounts:
                    self.monitor.add_account(account)
                    
                print(f"üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {len(self.monitoring_accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤...")
                
                new_tweets = await self.monitor.check_new_tweets()
                
                if new_tweets:
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(new_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤:")
                    print("-" * 50)
                    
                    for tweet in new_tweets:
                        print(f"üê¶ @{tweet['account']}")
                        print(f"üìù {tweet['text'][:100]}...")
                        print(f"‚è∞ {tweet['timestamp']}")
                        print()
                else:
                    print("‚ÑπÔ∏è –ù–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                    
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
            
    async def run_monitoring(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥"""
        print("\n‚è±Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–∞ 30 —Å–µ–∫—É–Ω–¥...")
        
        if not self.monitoring_accounts:
            print("‚ùå –ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É!")
            return
            
        try:
            async with self.monitor:
                # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç–∏
                for account in self.monitoring_accounts:
                    self.monitor.add_account(account)
                    
                print(f"üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ {len(self.monitoring_accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤...")
                print("‚è∞ –ß–µ–∫–∞—î–º–æ 30 —Å–µ–∫—É–Ω–¥...")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
                new_tweets = await self.monitor.check_new_tweets()
                
                if new_tweets:
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(new_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤!")
                    for tweet in new_tweets:
                        print(f"üê¶ @{tweet['account']}: {tweet['text'][:50]}...")
                else:
                    print("‚ÑπÔ∏è –ù–æ–≤—ñ —Ç–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
                    
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            
    def show_accounts(self):
        """–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        print("\nüìã –°–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:")
        
        if not self.monitoring_accounts:
            print("‚ùå –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return
            
        for i, account in enumerate(self.monitoring_accounts, 1):
            print(f"{i}. @{account}")
            
    def clear_accounts(self):
        """–û—á–∏—Å—Ç–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        print("\nüóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫–∞—É–Ω—Ç—ñ–≤...")
        
        if not self.monitoring_accounts:
            print("‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return
            
        confirm = input(f"–í–∏–¥–∞–ª–∏—Ç–∏ {len(self.monitoring_accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤? (y/n): ").lower()
        
        if confirm == 'y':
            self.monitoring_accounts.clear()
            print("‚úÖ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω–æ")
        else:
            print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
            
    def test_notification_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        print("\nüì¢ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å...")
        
        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
        test_tweets = [
            {
                'account': 'elonmusk',
                'tweet_id': '1234567890',
                'text': 'This is a normal tweet without special characters.',
                'author': 'Elon Musk',
                'username': 'elonmusk',
                'timestamp': datetime.now().isoformat(),
                'url': 'https://twitter.com/elonmusk/status/1234567890'
            },
            {
                'account': 'twitter',
                'tweet_id': '0987654321',
                'text': 'This tweet has *asterisks*, _underscores_, [brackets], and (parentheses)!',
                'author': 'Twitter',
                'username': 'twitter',
                'timestamp': datetime.now().isoformat(),
                'url': 'https://twitter.com/twitter/status/0987654321'
            }
        ]
        
        for i, tweet in enumerate(test_tweets, 1):
            print(f"\n--- –¢–µ—Å—Ç {i} ---")
            formatted = self.monitor.format_tweet_notification(tweet)
            print(formatted)
            
    async def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç"""
        print("üß™ –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        print("–¢–µ—Å—Ç—É–π—Ç–µ —Ä—ñ–∑–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ")
        
        if not TWITTER_AUTH_TOKEN:
            print("‚ùå TWITTER_AUTH_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            print("–î–æ–¥–∞–π—Ç–µ TWITTER_AUTH_TOKEN –≤ .env —Ñ–∞–π–ª")
            return
            
        while True:
            self.print_menu()
            
            try:
                choice = input("–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é (0-9): ").strip()
                
                if choice == '0':
                    print("üëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                    break
                elif choice == '1':
                    await self.test_connection()
                elif choice == '2':
                    self.test_url_parsing()
                elif choice == '3':
                    await self.get_account_tweets()
                elif choice == '4':
                    self.add_account_to_monitoring()
                elif choice == '5':
                    await self.check_new_tweets()
                elif choice == '6':
                    await self.run_monitoring()
                elif choice == '7':
                    self.show_accounts()
                elif choice == '8':
                    self.clear_accounts()
                elif choice == '9':
                    self.test_notification_formatting()
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
                break
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    tester = InteractiveTwitterTester()
    await tester.run()

if __name__ == "__main__":
    asyncio.run(main())