#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
–û–∫—Ä–µ–º–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤—Å—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ Twitter
"""

import asyncio
import logging
import json
from datetime import datetime
from twitter_monitor import TwitterMonitor
from config import TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN, TWITTER_MONITORING_INTERVAL

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TwitterTester:
    """–ö–ª–∞—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
    
    def __init__(self):
        self.monitor = TwitterMonitor(TWITTER_AUTH_TOKEN, TWITTER_CSRF_TOKEN)
        self.test_accounts = []
        self.test_results = {
            'connection_test': False,
            'account_parsing': False,
            'tweet_fetching': False,
            'monitoring_test': False,
            'notification_test': False
        }
        
    async def test_connection(self):
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Twitter"""
        print("üîó –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Twitter...")
        
        try:
            async with self.monitor:
                print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Twitter —É—Å–ø—ñ—à–Ω–µ!")
                self.test_results['connection_test'] = True
                return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Twitter: {e}")
            return False
            
    def test_account_parsing(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥—É Twitter –∞–∫–∞—É–Ω—Ç—ñ–≤"""
        print("\nüìù –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä—Å–∏–Ω–≥—É Twitter –∞–∫–∞—É–Ω—Ç—ñ–≤...")
        
        test_urls = [
            "https://twitter.com/elonmusk",
            "https://x.com/elonmusk", 
            "https://www.twitter.com/elonmusk",
            "https://twitter.com/elonmusk?ref=test",
            "https://twitter.com/elonmusk#section",
            "elonmusk",
            "@elonmusk"
        ]
        
        for url in test_urls:
            username = self.extract_twitter_username(url)
            print(f"URL: {url} -> Username: {username}")
            
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∞—É–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î!")
        self.test_results['account_parsing'] = True
        return True
        
    def extract_twitter_username(self, url: str) -> str:
        """–í–∏—Ç—è–≥—Ç–∏ username –∑ Twitter URL (–∫–æ–ø—ñ—è –∑ bot.py)"""
        try:
            if 'twitter.com' in url or 'x.com' in url:
                url = url.replace('https://', '').replace('http://', '')
                if url.startswith('www.'):
                    url = url[4:]
                    
                if url.startswith('twitter.com/'):
                    username = url.split('/')[1]
                elif url.startswith('x.com/'):
                    username = url.split('/')[1]
                else:
                    return None
                    
                username = username.split('?')[0].split('#')[0]
                return username if username else None
                
            return None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è Twitter username: {e}")
            return None
            
    async def test_tweet_fetching(self):
        """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤"""
        print("\nüê¶ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤...")
        
        # –¢–µ—Å—Ç–æ–≤—ñ –∞–∫–∞—É–Ω—Ç–∏ (–ø—É–±–ª—ñ—á–Ω—ñ)
        test_accounts = ['elonmusk', 'twitter', 'github']
        
        try:
            async with self.monitor:
                for account in test_accounts:
                    print(f"üì± –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞: @{account}")
                    
                    # –î–æ–¥–∞—î–º–æ –∞–∫–∞—É–Ω—Ç
                    self.monitor.add_account(account)
                    
                    # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–≤—ñ—Ç–∏
                    tweets = await self.monitor.get_user_tweets(account, limit=3)
                    
                    if tweets:
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(tweets)} —Ç–≤—ñ—Ç—ñ–≤ –¥–ª—è @{account}")
                        for i, tweet in enumerate(tweets[:2]):  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 2
                            print(f"  {i+1}. {tweet.get('text', '')[:100]}...")
                    else:
                        print(f"‚ö†Ô∏è –¢–≤—ñ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è @{account}")
                        
                    # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
                    await asyncio.sleep(2)
                    
            print("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î!")
            self.test_results['tweet_fetching'] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤: {e}")
            return False
            
    async def test_monitoring_cycle(self):
        """–¢–µ—Å—Ç —Ü–∏–∫–ª—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"""
        print("\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü–∏–∫–ª—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É...")
        
        try:
            async with self.monitor:
                # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –∞–∫–∞—É–Ω—Ç–∏
                test_accounts = ['elonmusk', 'twitter']
                for account in test_accounts:
                    self.monitor.add_account(account)
                    
                print(f"üìä –î–æ–¥–∞–Ω–æ {len(test_accounts)} –∞–∫–∞—É–Ω—Ç—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
                
                # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–¥–∏–Ω —Ü–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
                new_tweets = await self.monitor.check_new_tweets()
                
                print(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ {len(new_tweets)} –Ω–æ–≤–∏—Ö —Ç–≤—ñ—Ç—ñ–≤")
                
                if new_tweets:
                    for tweet in new_tweets:
                        print(f"  üê¶ @{tweet['account']}: {tweet['text'][:50]}...")
                        
                print("‚úÖ –¶–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—Ä–∞—Ü—é—î!")
                self.test_results['monitoring_test'] = True
                return True
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ü–∏–∫–ª—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
            return False
            
    def test_notification_formatting(self):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å"""
        print("\nüì¢ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å...")
        
        # –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Ç–≤—ñ—Ç–∞
        test_tweet = {
            'account': 'elonmusk',
            'tweet_id': '1234567890',
            'text': 'This is a test tweet with *special* characters and [links]!',
            'author': 'Elon Musk',
            'username': 'elonmusk',
            'timestamp': datetime.now().isoformat(),
            'url': 'https://twitter.com/elonmusk/status/1234567890'
        }
        
        try:
            formatted = self.monitor.format_tweet_notification(test_tweet)
            print("‚úÖ –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è:")
            print("-" * 50)
            print(formatted)
            print("-" * 50)
            
            self.test_results['notification_test'] = True
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {e}")
            return False
            
    async def run_full_test(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–≤–Ω–∏–π —Ç–µ—Å—Ç"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        await self.test_connection()
        
        # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ –∞–∫–∞—É–Ω—Ç—ñ–≤
        self.test_account_parsing()
        
        # –¢–µ—Å—Ç 3: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–≤—ñ—Ç—ñ–≤
        await self.test_tweet_fetching()
        
        # –¢–µ—Å—Ç 4: –¶–∏–∫–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
        await self.test_monitoring_cycle()
        
        # –¢–µ—Å—Ç 5: –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
        self.test_notification_formatting()
        
        # –ü—ñ–¥—Å—É–º–æ–∫
        self.print_summary()
        
    def print_summary(self):
        """–í–∏–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ —Ç–µ—Å—Ç—ñ–≤"""
        print("\n" + "=" * 60)
        print("üìä –ü–Ü–î–°–£–ú–û–ö –¢–ï–°–¢–Ü–í")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–û"
            print(f"{test_name.replace('_', ' ').title()}: {status}")
            
        print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ! Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")
        else:
            print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
            
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
        if not self.test_results['connection_test']:
            print("- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ TWITTER_AUTH_TOKEN –≤ .env —Ñ–∞–π–ª—ñ")
        if not self.test_results['tweet_fetching']:
            print("- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è —Ç–∞ –¥–æ—Å—Ç—É–ø –¥–æ Twitter")
        if not self.test_results['monitoring_test']:
            print("- –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    print("üß™ Twitter Monitor Tester")
    print("–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ Twitter –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É")
    print()
    
    if not TWITTER_AUTH_TOKEN:
        print("‚ùå TWITTER_AUTH_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        print("–î–æ–¥–∞–π—Ç–µ TWITTER_AUTH_TOKEN –≤ .env —Ñ–∞–π–ª")
        return
        
    tester = TwitterTester()
    await tester.run_full_test()

if __name__ == "__main__":
    asyncio.run(main())